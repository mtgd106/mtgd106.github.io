const n=JSON.parse('{"key":"v-3c1fa4c2","path":"/posts/note/Concurrency/Java%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C.html","title":"线程的创建和运行","lang":"zh-CN","frontmatter":{"title":"线程的创建和运行","author":{"name":"北斗星司"},"category":["并发编程"],"tag":["线程Thread"],"date":"2023-10-23T15:08:32.000Z","icon":"file","description":"创建线程 继承Thread类 创建一个类，继承Thread类并重写run方法 通过该类创建对象，并执行start方法 例： //继承Thread类并重写run方法 class Mythread extends Thread{ @Override public void run() { for (int i = 0; i &lt; 100; i++) { if (i % 10 == 0) { System.out.println(Thread.currentThread().getName() + \\":\\" + i); } } } } public static void main(String args[]) throws InterruptedException { //创建对象并执行start方法 构造方法的参数是给线程指定名字 Mythread t1 = new Mythread(\\"t1\\"); //start()方法底层其实是给CPU注册当前线程，并且触发run()方法执行 t1.start(); System.out.println(\\"我是主线程\\"); }","head":[["meta",{"property":"og:url","content":"https://mtgd106.github.io/posts/note/Concurrency/Java%E7%BA%BF%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%88%9B%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C.html"}],["meta",{"property":"og:site_name","content":"北斗星司"}],["meta",{"property":"og:title","content":"线程的创建和运行"}],["meta",{"property":"og:description","content":"创建线程 继承Thread类 创建一个类，继承Thread类并重写run方法 通过该类创建对象，并执行start方法 例： //继承Thread类并重写run方法 class Mythread extends Thread{ @Override public void run() { for (int i = 0; i &lt; 100; i++) { if (i % 10 == 0) { System.out.println(Thread.currentThread().getName() + \\":\\" + i); } } } } public static void main(String args[]) throws InterruptedException { //创建对象并执行start方法 构造方法的参数是给线程指定名字 Mythread t1 = new Mythread(\\"t1\\"); //start()方法底层其实是给CPU注册当前线程，并且触发run()方法执行 t1.start(); System.out.println(\\"我是主线程\\"); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mtgd106.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"线程的创建和运行"}],["meta",{"property":"article:author","content":"北斗星司"}],["meta",{"property":"article:tag","content":"线程Thread"}],["meta",{"property":"article:published_time","content":"2023-10-23T15:08:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程的创建和运行\\",\\"image\\":[\\"https://mtgd106.github.io/\\"],\\"datePublished\\":\\"2023-10-23T15:08:32.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"北斗星司\\"}]}"]]},"headers":[{"level":2,"title":"创建线程","slug":"创建线程","link":"#创建线程","children":[{"level":3,"title":"继承Thread类","slug":"继承thread类","link":"#继承thread类","children":[]},{"level":3,"title":"实现Runnable接口","slug":"实现runnable接口","link":"#实现runnable接口","children":[]},{"level":3,"title":"实现Callable接口","slug":"实现callable接口","link":"#实现callable接口","children":[]},{"level":3,"title":"使用匿名内部类","slug":"使用匿名内部类","link":"#使用匿名内部类","children":[]}]},{"level":2,"title":"Future接口","slug":"future接口","link":"#future接口","children":[{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"FutureTask类","slug":"futuretask类","link":"#futuretask类","children":[]},{"level":3,"title":"Callable和Future的关系","slug":"callable和future的关系","link":"#callable和future的关系","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":10.04,"words":2007},"filePathRelative":"posts/note/Concurrency/Java线程/线程的创建和运行.md","localizedDate":"2023年10月23日","excerpt":"<h2> 创建线程</h2>\\n<h3> 继承Thread类</h3>\\n<ol>\\n<li>\\n<p>创建一个类，继承Thread类并重写run方法</p>\\n</li>\\n<li>\\n<p>通过该类创建对象，并执行start方法</p>\\n</li>\\n</ol>\\n<p>例：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">//继承Thread类并重写run方法</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Mythread</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">{</span>\\n    \\n  <span class=\\"token annotation punctuation\\">@Override</span>    \\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        \\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            \\n      <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">%</span> <span class=\\"token number\\">10</span> <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                \\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getName</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\":\\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>            \\n      <span class=\\"token punctuation\\">}</span>        \\n    <span class=\\"token punctuation\\">}</span>    \\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> args<span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">InterruptedException</span> <span class=\\"token punctuation\\">{</span>\\n  \\n  <span class=\\"token comment\\">//创建对象并执行start方法   构造方法的参数是给线程指定名字</span>\\n  <span class=\\"token class-name\\">Mythread</span> t1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Mythread</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"t1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        \\n  <span class=\\"token comment\\">//start()方法底层其实是给CPU注册当前线程，并且触发run()方法执行</span>\\n  t1<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        \\n  <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"我是主线程\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"北斗星司"},"autoDesc":true}');export{n as data};
