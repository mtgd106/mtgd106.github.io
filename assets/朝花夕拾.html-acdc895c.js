import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,a}from"./app-a89b456a.js";const i="/assets/image-20231011124345744-e1b36fdc.png",t="/assets/image-20231011124523941-876c93c4.png",l="/assets/image-20231019121442259-220fc90d.png",p="/assets/151257-20221216162427371-1790284749-e395be4e.png",c={},r=a(`<h3 id="同时配置github和gitee" tabindex="-1"><a class="header-anchor" href="#同时配置github和gitee" aria-hidden="true">#</a> 同时配置Github和Gitee</h3><p>1.github和gitee可以使用不同的名称和邮箱</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.name <span class="token string">&quot;你的名字&quot;</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.email <span class="token string">&quot;你的邮箱&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.生成两对公钥和私钥</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&#39;github邮箱号&#39;</span> <span class="token parameter variable">-f</span> ~/.ssh/id_rsa_github
$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&#39;gitee邮箱号&#39;</span> <span class="token parameter variable">-f</span> ~/.ssh/id_rsa_gitee
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>生成的文件在<code>C:\\Users\\用户名\\.ssh</code>中。</strong></p><p>3.把公钥添加到Gitee和Github上</p><p>  后缀名为.pub的文件为公钥</p><p>4.生成配置文件</p><p>  在.ssh目录下，创建config文件(文件名就叫config，没有后缀)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># gitee</span>
Host gitee.com
HostName gitee.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa_gitee

<span class="token comment"># github</span>
Host github.com
HostName github.com
PreferredAuthentications publickey
IdentityFile ~/.ssh/id_rsa_github

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitee.com
$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>  如果出现successfully即为成功。</p><h3 id="推送项目到github" tabindex="-1"><a class="header-anchor" href="#推送项目到github" aria-hidden="true">#</a> 推送项目到Github</h3><p>1.在项目的根目录下进入git bash</p><p>2.执行 gin init 进行初始化，得到 .git 目录</p><p>3.执行 <code>git add . </code>,将变更加入到暂存区中</p><p>4.执行 git commit -m &#39;提交信息&#39;</p><p>5.在git中绑定一个远程仓库</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> 别名 <span class="token string">&quot;链接地址&quot;</span>

<span class="token comment">#这个链接地址就代表仓库的位置，别名和链接地址就类似于域名和ip地址的关系，这个别名一般为 origin</span>

<span class="token comment"># 输入命令 git remote -v 可以看到添加的仓库信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  例：添加远程仓库，并起一个别名为origin</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:mtgd106/mtgd106.github.io.git    <span class="token comment">#使用的仓库地址为仓库的SSH链接地址。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.执行 <code>git push origin master</code> ,将项目内容推送到Github仓库的master分支(本地的分支也要是master分支)</p><h3 id="更改默认分支" tabindex="-1"><a class="header-anchor" href="#更改默认分支" aria-hidden="true">#</a> 更改默认分支</h3><p><strong>问题：</strong></p><p>  在Github中，将默认分支改为了main，因为Github认为master有主人的意思，所以将master改为了main；</p><p>  而在本地创建仓库时(git init)，默认的分支为master，所以，如果直接将本地项目推送到Github，则项目代码会保存到</p><p>  仓库的master分支，而不是保存到默认的main分支。</p><p>  如果直接打开仓库地址，则默认展现的main分支上的代码，如果想要查看master分支上的代码，还需要手动切换分支。</p><p><strong>解决：</strong></p><p>​ 1.在本地git init时将默认分支修改成main</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token parameter variable">--version</span>  //查看版本

<span class="token function">git</span> config <span class="token parameter variable">--global</span> init.defaultBranch main  //将默认分支修改成main

<span class="token function">git</span> init    //会在本地项目文件夹内创建.git文件夹

<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>  //将文件的变更添加到暂存区

<span class="token function">git</span> commit <span class="token parameter variable">-a</span> <span class="token punctuation">[</span>描述的内容<span class="token punctuation">]</span>    //将文件提交到本地仓库

<span class="token function">git</span> pull <span class="token parameter variable">--rebase</span> origin main    //拉取github上的readme.md

<span class="token function">git</span> push origin main   //上传代码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><p>2.在github上将默认分支修改成master</p><p>​ <img src="`+i+'" alt="image-20231011124345744" style="zoom:50%;"></p><p>​ <img src="'+t+`" alt="image-20231011124523941" style="zoom:50%;"></p><p>3.其他方法</p><p>​ 1.当在Github中新创建了一个仓库之后，里面只有一个README.md文件(如果不添加其他文件的话)，这时，可以先将</p><p>  该仓库的内容拉取到本地，会得到一个 .git文件夹和一个README.md 文件，且<strong>默认分支名已经变为了main</strong>。</p><p>  需要注意：当用git clone命令拉取时，会将仓库的名称一起拉取下来。</p><p>​    例，假设仓库名称为test，当在 d:/vkls 目录下拉取时，就会在该目录下得到test目录，test目录中才是项目代码。</p><p>​ 2.当想将该目录推送到Github时，就可以执行以下代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>. <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>

<span class="token number">2</span>. <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;提交&#39;</span>

<span class="token number">3</span>. <span class="token function">git</span> push  git@github.com:mtgd106/Test.git 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令简写" tabindex="-1"><a class="header-anchor" href="#命令简写" aria-hidden="true">#</a> 命令简写</h3><p>在命令行窗口输入<code>git config --global -e</code> ，命令行窗口会直接进入到配置文件中，通过命令行方式进行编辑。</p><p>配置内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>alias<span class="token punctuation">]</span>
	st <span class="token operator">=</span> status
	co <span class="token operator">=</span> checkout
	br <span class="token operator">=</span> branch
	mg <span class="token operator">=</span> merge
	ci <span class="token operator">=</span> commit
	<span class="token function">rm</span> <span class="token operator">=</span> remote
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="报错" tabindex="-1"><a class="header-anchor" href="#报错" aria-hidden="true">#</a> 报错</h3><p>1.LF will be replaced by CRLF the next time Git touches it</p><p>  原因：Dos/Windows平台默认换行符：回车(CR) +换行(LF)，即&#39;\\r\\n&#39;</p><p>         Mac/Linux平台默认换行符：换行(LF)，即&#39;\\n&#39;</p><p>  服务器一般都是Linux系统进行管理，所以从Windows系统提交文件到Linux系统时会有替换换行符的需求。</p><p>方法：</p><p>  1.适用于Windows系统，且一般为Windows默认设置，会在提交时对换行符进行CRLF - LF的转换，检出时又会进行LF - CRLF的转换。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#提交时转换为LF，检出时转换为CRLF</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 2.适用于Linux系统，所有换行符都会进行CRLF - LF转换，但操作时不会转换回CRLF。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#提交时转换为LF，检出时不转换</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf input
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>2.non-fast-forward</p><img src="`+l+`" alt="image-20231019121442259" style="zoom:60%;"><p>原因：你<strong>在本地仓库上的修改没有基于远程库最新版本，你的本地仓库版本落后于远程仓库</strong>。</p><p>​ <strong>别人将代码上传到远程仓库后，你没有及时地同步到本地，但是你同时又添加了一些内容，以致于你在提交时，</strong></p><p> <strong>它会检测到你之前从远程仓库拉取的时候的仓库状态和现在的不一样。也可能是直接在远程仓库中做了修改。</strong></p><p> <strong>于是，它为了安全起见拒绝了你的提交（然后就报了这个错误）。</strong></p><p>方法：先合并之前的历史，再进行提交</p><p>​ 1.先把git的东西fetch到本地，然后merge后再push</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#先抓取远程仓库的更新到本地，然后与本地仓库合并，这样就可以使远程仓库和本地仓库一致了，然后就可以提交修改了。</span>
<span class="token function">git</span> fetch origin master

<span class="token function">git</span> merge origin FETCH_HEAD 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 2.<code>git pull 远程仓库名 远程分支名 --rebase</code></p><p>​   重定基，可以使历史更加统一，使提交历史趋向于一条直线。</p><p>​ 3.强制提交</p><p>  <code>git push 远程仓库名 远程分支名 --force</code></p><h3 id="问答" tabindex="-1"><a class="header-anchor" href="#问答" aria-hidden="true">#</a> 问答</h3><h4 id="git-clone-和-git-pull-的区别" tabindex="-1"><a class="header-anchor" href="#git-clone-和-git-pull-的区别" aria-hidden="true">#</a> <strong>git clone 和 git pull 的区别</strong></h4><p><strong>git clone：</strong></p><p>  1.从远程服务器克隆一个一模一样的版本库(仓库)到本地，<strong>复制的是整个版本库</strong>，叫做git clone。</p><p>​    即，将一个库复制到本地，是一个本地从无到有的过程。<strong>包括里面的日志信息，项目里的分支，也可以直接切换、</strong></p><p>    <strong>使用里面的分支等。</strong></p><p>  git clone是远程操作的第一步，通常是从远程主机克隆一个版本库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">git</span> clone <span class="token string">&#39;远程仓库地址(ssh/http)&#39;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  2.该命令<strong>会在本地生成一个目录，与远程主机的版本库同名。</strong></p><p>    如果想要使用不同的目录名，可以使用git clone 命令的第二个参数设置本地目录名：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone <span class="token string">&#39;仓库地址&#39;</span> <span class="token string">&#39;本地目录名&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>git pull：</strong></p><p>  在本地有版本库的情况下，从远程服务器获取到一个branch的更新到本地，并更新本地库。</p><p>  即，<strong>取回服务器上某个分支的更新，再与本地的指定分支进行合并。</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull origin next:master   		<span class="token comment">#获取远程服务器origin上next分支的更新，然后和本地的master分支合并</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p><p>  该命令相当于： <code>git fetch origin</code> + <code>git merge origin/next</code></p><p><strong>区别：</strong></p><p>1.是否需要本地初始化仓库</p><blockquote><p>git clone是将整个工程复制下来，所以不需要本地是仓库（即没有.git文件夹）</p></blockquote><blockquote><p>git pull需要先初始化本地文件夹作为一个仓库</p></blockquote><p>2.切换分支的问题</p><blockquote><p>clone出的项目可以自由切换远端已有的分支。</p></blockquote><blockquote><p>pull只能操作当前拉取的分支，不能切换到其他分支。</p></blockquote><p>3.push的问题</p><blockquote><p>clone下来的项目可以直接指定分支推送到远程仓库</p></blockquote><blockquote><p>pull下来的项目需要先执行 git remote add name url 命令来添加远程仓库，然后才能push</p></blockquote><p><strong>适用场景</strong>：</p><p>  通常情况下，远程操作的第一步，是使用git clone从远程主机克隆一个版本库到本地。</p><p>  <strong>本地修改代码后，每次从本地push到远程仓库之前都要先进行git pull操作，保证push到远程仓库时没有版本冲突。</strong></p><p>  在某些场合，git会自动在本地和远程分支之间，建立一种追踪关系。比如，在git clone 的时候，所有本地分支默认</p><p>    与远程主机的同名分支建立追踪关系。也就是，Git 会自动创建一个名为 master 的本地分支来跟踪 origin/master。</p><p> git也可以手动建立追踪：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> branch --set-upstream-to<span class="token operator">=</span>origin/远程分支名称 本地分支名称
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="pull和fetch的区别" tabindex="-1"><a class="header-anchor" href="#pull和fetch的区别" aria-hidden="true">#</a> <strong>pull和fetch的区别</strong></h4><p>两者都是从服务端获取更新，主要区别是<code>fetch</code>不会自动合并，不会影响当前工作区内容。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull <span class="token operator">=</span> <span class="token function">git</span> fetch + <span class="token function">git</span> merge
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>如下面图中，<code>git fetch</code>只获取了更新，并未影响<code>master</code>、<code>HEAD</code>的位置。</p></li><li><p>要更新<code>master</code>、<code>HEAD</code>的位置需要手动执行<code>git merge</code>合并。</p></li></ul><p>​ <img src="`+p+'" alt="image" style="zoom:80%;"></p>',110),o=[r];function d(u,g){return n(),e("div",null,o)}const v=s(c,[["render",d],["__file","朝花夕拾.html.vue"]]);export{v as default};
