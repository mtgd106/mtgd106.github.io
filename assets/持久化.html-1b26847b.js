import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as a,a as p}from"./app-a89b456a.js";const t="/assets/image-20230426075305539-0ef0c00b.png",s="/assets/image-20230426075317666-0c6adae4.png",i="/assets/image-20230426075324701-34815528.png",d="/assets/image-20230426075335148-282693fb.png",o="/assets/image-20230426075352373-20892f38.png",n="/assets/image-20230426075409671-d74e7280.png",l={},h=p('<h2 id="持久化之rdb" tabindex="-1"><a class="header-anchor" href="#持久化之rdb" aria-hidden="true">#</a> 持久化之RDB</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>持久化：</p><p>  <strong>利用永久性存储介质将数据进行保存，在数据丢失情况下能够利用保存的数据进行恢复的工作机制称为持久化。</strong></p><p>方式：</p><ol><li><p>将当前数据状态进行保存，存储数据结果，存储格式简单，<strong>关注点在数据</strong>。</p></li><li><p>将数据的操作过程进行保存，日志形式，存储操作过程，存储格式复杂，<strong>关注点在数据的操作过程</strong>。</p></li></ol><p>​ <img src="'+t+'" alt="image-20230426075305539" loading="lazy"></p><p><strong>RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。</strong></p><p><strong>简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。</strong></p><p><strong>快照文件称为RDB文件，默认是保存在当前运行目录。</strong></p><h3 id="备份的执行方式" tabindex="-1"><a class="header-anchor" href="#备份的执行方式" aria-hidden="true">#</a> 备份的执行方式</h3><p>Redis会单独创建(fork)一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束了，再用这个临时文件替换上次持久化好的文件。</p><p><strong>整个过程中，主进程是不进行任何IO操作的</strong>，这就确保了极高的性能。</p><p>如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。</p><p><strong>RDB的缺点是最后一次持久化后的数据可能丢失</strong>。</p><h3 id="fork" tabindex="-1"><a class="header-anchor" href="#fork" aria-hidden="true">#</a> Fork</h3><p><strong>Fork的作用是复制一个与当前进程一样的进程。</strong></p><p>新进程的所有数据(变量、环境变量、程序计数器等)数值都和原进程一致，与原进程共享内存空间，但它是一个全新的进程，并作为原进程的子进程。</p><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程此后会执行exec系统调用，出于效率考虑，Linux中引入了“写时复制技术&quot;：</p><ul><li><p>当主进程执行读操作时，访问共享内存；</p></li><li><p>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</p></li></ul><p>​ <img src="'+s+'" alt="image-20230426075317666" style="zoom:80%;"></p><h3 id="rdb持久化流程" tabindex="-1"><a class="header-anchor" href="#rdb持久化流程" aria-hidden="true">#</a> RDB持久化流程</h3><p>​ <img src="'+i+'" alt="image-20230426075324701" style="zoom:80%;"></p><p>​ 生成rdb文件后，用新的rdb文件代替旧的rdb文件。</p><h3 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h3><h4 id="save指令" tabindex="-1"><a class="header-anchor" href="#save指令" aria-hidden="true">#</a> <strong>save指令</strong></h4><p>作用：<strong>保存所有的key</strong></p><p><strong>save指令的执行会阻塞当前Redis服务器，直到当前RDB过程完成为止，有可能会造成长时间阻塞，线上环境不建议使用。</strong></p><p>相关配置(在配置文件redis.conf中修改)</p><ol><li>dbfilename dump.rdb</li></ol><p>​   说明：设置本地数据库文件名，默认值为 dump.rdb</p><p>​   经验：通常设置为dump-端口号.rdb</p><ol start="2"><li>dir</li></ol><p>​   说明：设置存储.rdb文件的位置，默认为Redis启动时命令行所在的目录下</p><p>​   经验：通常设置成存储空间较大的目录中，目录名称为data</p><ol start="3"><li>rdbcompression yes</li></ol><p>​   说明：设置存储至本地数据库时是否压缩数据，默认为yes，采用 LZF算法进行压缩</p><p>​   经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变的很大</p><ol start="4"><li>rdbchecksum yes</li></ol><p>​   说明：设置是否使用CRC64算法进行数据校验，该校验过程在写文件和读文件过程均进行</p><p>​   经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%的时间消耗，但是存储有一定的数据损坏风险</p><h4 id="bgsave指令" tabindex="-1"><a class="header-anchor" href="#bgsave指令" aria-hidden="true">#</a> <strong>bgsave指令</strong></h4><p>作用：<strong>手动启动在后台异步进行保存操作，但不是立即执行</strong></p><p>bgsave命令是针对save阻塞问题做的优化。</p><p><strong>Redis内部所有涉及到RDB操作都采用bgsave的方式，save命令可以放弃使用。</strong></p><p>相关配置</p><p>​ 1.dbfilename dump.rdb</p><p>​ 2.dir</p><p>​ 3.rdbcompression yes</p><p>​ 4.rdbchecksum yes</p><p>​ 5.stop-writes-on-bgsave-error yes</p><p>​   说明：后台存储过程中如果出现错误现象，是否停止保存操作</p><p>​   经验：通常默认为开启状态</p><p>​ <img src="'+d+'" alt="image-20230426075335148" style="zoom:80%;"></p><h4 id="rdb启动方式-save配置" tabindex="-1"><a class="header-anchor" href="#rdb启动方式-save配置" aria-hidden="true">#</a> <strong>RDB启动方式-----save配置</strong></h4><p>​ 在配置文件redis.conf中修改</p><p>​ save second changes</p><p>​ 作用：<strong>规定时间范围内key的变化次数达到了指定的次数就进行持久化。如果没有达到指定次数，则重新计时。</strong></p><p>​ 参数：</p><p>​   second：规定的时间范围</p><p>​   changes：key的变化次数</p><p>​ 例：<br> ​   save 900 1       900秒内发生了一次变化就执行bgsave操作</p><p>​   save 300 10      300秒内发生了10次变化</p><p>​   save 60 10000    60秒内发生了10000次变化</p><h4 id="save与bgsave对比" tabindex="-1"><a class="header-anchor" href="#save与bgsave对比" aria-hidden="true">#</a> <strong>save与bgsave对比</strong></h4><p>​ <img src="'+o+'" alt="image-20230426075352373" loading="lazy"></p><h3 id="rdb文件的备份" tabindex="-1"><a class="header-anchor" href="#rdb文件的备份" aria-hidden="true">#</a> rdb文件的备份</h3><ol><li><p>先通过config get dir 查询rdb文件的目录</p></li><li><p>将*.rdb的文件拷贝到别的地方</p></li><li><p>rdb的恢复</p></li></ol><p>​   关闭Redis</p><p>​   先把备份的文件拷贝到工作目录下 cp dump2.rdb dump.rdb</p><p>​   启动Redis， 备份数据会直接加载</p><h3 id="rdb优点" tabindex="-1"><a class="header-anchor" href="#rdb优点" aria-hidden="true">#</a> RDB优点</h3><ol><li><p>RDB是一个紧凑压缩的二进制文件，<strong>存储效率较高</strong></p></li><li><p>RDB内部存储的是redis在某个时间点的数据快照，<strong>非常适合用于数据备份，全量复制，大规模的数据恢复等场景</strong></p></li><li><p>RDB<strong>恢复数据的速度要比AOF快很多</strong></p></li><li><p>节省磁盘空间，<strong>对数据的完整性和一致性要求不高更适合使用</strong></p></li></ol><p>​ 应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</p><h3 id="rdb缺点" tabindex="-1"><a class="header-anchor" href="#rdb缺点" aria-hidden="true">#</a> RDB缺点</h3><ol><li><p>RDB方式无论是执行指令还是利用配置，<strong>无法做到实时持久化，具有较大的可能性丢失数据</strong></p></li><li><p>bgsave指令每次运行要<strong>执行fork操作创建子进程</strong>，要牺牲掉一些性能</p></li><li><p>Redis的众多版本中<strong>没有进行RDB文件格式的版本统一</strong>，有可能出现各版本服务之间数据格式无法兼容现象</p></li></ol><h2 id="持久化之aof" tabindex="-1"><a class="header-anchor" href="#持久化之aof" aria-hidden="true">#</a> 持久化之AOF</h2><p><strong>Append Only File(仅追加文件)</strong></p><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1" aria-hidden="true">#</a> 概述</h3><ol><li><p>AOF持久化：以独立日志的方式记录每次写操作，<strong>将Redis执行过的所有写指令记录下来(读操作不记录)</strong>， 只许追加文件不许改写文件重启时再重新执行AOF文件中的命令，以达到恢复数据的目的。</p></li><li><p>与RDB相比可以简单描述为：<strong>RDB是记录数据 AOF是记录数据产生的过程</strong></p></li><li><p>AOF的主要作用是<strong>解决了数据持久化的实时性</strong>，目前已经是Redis持久化的主流方式。</p></li></ol><h3 id="持久化流程" tabindex="-1"><a class="header-anchor" href="#持久化流程" aria-hidden="true">#</a> 持久化流程</h3><p>（1）客户端的请求写命令会被append追加到AOF缓冲区内；</p><p>（2）AOF缓冲区根据AOF持久化策略 [always,everysec,no] 将操作同步到磁盘中的AOF文件中；</p><p>（3）AOF文件大小超过重写策略或手动重写时，会对AOF文件进行重写，压缩AOF文件容量；</p><p>（4）Redis服务重启时，会重新加载AOF文件，执行文件中的写操作达到数据恢复的目的；</p><h3 id="写数据的三种策略" tabindex="-1"><a class="header-anchor" href="#写数据的三种策略" aria-hidden="true">#</a> 写数据的三种策略</h3><p>​ appendfsync always|everysec|no</p><ol><li>always(每次)</li></ol><p>​   <strong>每次写入操作均同步到AOF文件中</strong>，数据零误差，性能较低，不建议使用。</p><ol start="2"><li>everysec(每秒)</li></ol><p>​   <strong>每秒将缓冲区中的指令同步到AOF文件中</strong>，数据准确性较高，性能较高。建议使用，也是默认配置。</p><p>​   在系统突然宕机的情况下本秒的数据可能丢失，<strong>最多丢失1秒的数据</strong>。</p><ol start="3"><li>no(系统控制)</li></ol><p>​   写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘，整体过程不可控，可能丢失大量数据。</p><h3 id="aof功能开启" tabindex="-1"><a class="header-anchor" href="#aof功能开启" aria-hidden="true">#</a> AOF功能开启</h3><p>在配置文件中设置</p><p>​ appendonly yes|no</p><p>​ 作用：是否开启AOF持久化功能，默认不开启</p><p>​ appendfsync always|everysec|no</p><p>​ 作用：AOF写数据策略</p><p>​ appendfilename filename</p><p>​ 作用：AOF持久化文件名，默认文件名为appendonly.aof，建议配置为appendonly-端口号.aof</p><p>​ dir</p><p>​ 作用：AOF持久化文件保存路径，与RDB持久化文件保持一致即可</p><h3 id="aof重写" tabindex="-1"><a class="header-anchor" href="#aof重写" aria-hidden="true">#</a> AOF重写</h3><p>描述：随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。</p><p>​ AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。</p><p>​ <strong>即，将对同一个数据的若干条命令的执行结果转化成最终结果对应的指令进行记录(将多条命令等效为一条命令)。</strong></p><h4 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> <strong>作用：</strong></h4><ol><li><p>降低磁盘占用量，提高磁盘利用率</p></li><li><p>提高持久化效率，降低持久化写时间，提高IO性能</p></li><li><p>降低数据恢复用时，提高数据恢复效率</p></li></ol><h4 id="规则" tabindex="-1"><a class="header-anchor" href="#规则" aria-hidden="true">#</a> <strong>规则:</strong></h4><ol><li><p>进程内已超时的数据不再写入文件</p></li><li><p>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令</p></li></ol><p>​   如del key1、 hdel key2、srem key3、set key4 111、set key4 222等</p><ol start="3"><li>对同一个数据的多条写命令合并为一条命令</li></ol><p>​   例如，lpush list1 a、lpush list1 b、 lpush list1 c 可以转化为：lpush list1 a b c。</p><p>​   为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素。</p><h4 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> <strong>配置</strong></h4><p>​ no-appendfsync-on-rewrite</p><p>​ 如果为yes，则不写入aof文件只写入缓存，用户请求不会阻塞，但是在这段时间如果宕机会丢失这段时间的缓存数据。</p><p>​ （降低数据安全性，提高性能)</p><p>​ 如果为no，还是会把数据往磁盘里刷，但是遇到重写操作，可能会发生阻塞。（数据安全，但是性能降低）</p><h4 id="重写方式" tabindex="-1"><a class="header-anchor" href="#重写方式" aria-hidden="true">#</a> <strong>重写方式</strong></h4><ol><li>手动重写</li></ol><p>​   bgrewriteaof 执行该指令后，redis在后台完成重写操作</p><ol start="2"><li>自动重写</li></ol><p>​   Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的一倍且文件大于64M时触发。</p><p>​   配置文件中写入：</p><p>​    auto-aof-rewrite-min-size size</p><p>​     <strong>设置触发条件，当AOF文件体积超过设置的size时，则重写。size最小设置为64MB。</strong></p><p>​    auto-aof-rewrite-percentage percentage</p><p>​     <strong>AOF文件比上次文件 增长超过多少百分比则触发重写。</strong><br> ​</p><p>​   自动重写触发比对参数(运行指令info Persistence获取具体信息)</p><p>​    aof_current_size    文件当前大小</p><p>​    aof_base_size    设置文件基础大小</p><p>​   自动重写触发条件</p><p>​    aof_current_size &gt; auto-aof-rewrite-min-size</p><p>​      当前大小超过设定的值</p><p>​    aof_current_size - aof_base_size / aof_base_size &gt; rewrite-percentage</p><p>​      当前大小减去基础大小，再除以基础大小 得到的百分比超过设定的值</p><h4 id="重写流程" tabindex="-1"><a class="header-anchor" href="#重写流程" aria-hidden="true">#</a> <strong>重写流程</strong></h4><p>​ 1）bgrewriteaof触发重写，判断是否当前有bgsave或bgrewriteaof在运行，如果有，则等待该命令结束后再继续执行。</p><p>​ 2）主进程fork出子进程执行重写操作，保证主进程不会阻塞。</p><p>​ 3）子进程遍历redis内存中数据到临时文件，客户端的写请求同时写入aof_buf缓冲区和aof_rewrite_buf重写缓冲区，</p><p>​    保证原AOF文件完整以及新AOF文件生成期间的新的数据修改动作不会丢失。</p><p>​ 4）子进程写完新的AOF文件后，向主进程发信号，主进程更新统计信息。</p><p>​    主进程把aof_rewrite_buf中的数据写入到新的AOF文件。</p><p>​ 5）使用新的AOF文件覆盖旧的AOF文件，完成AOF重写。</p><p>​ <img src="'+n+'" alt="image-20230426075409671" loading="lazy"></p><p>​ 优点：</p><p>​   备份机制更稳健，丢失数据概率更低。</p><p>​   可读的日志文本，通过操作AOF文件，可以处理误操作。</p><p>​ 缺点：</p><p>​   比起RDB占用更多的磁盘空间。</p><p>​   恢复备份速度要慢。</p><p>​   每次读写都同步的话，有一定的性能压力。</p><p>​   存在个别Bug。</p><h2 id="对比" tabindex="-1"><a class="header-anchor" href="#对比" aria-hidden="true">#</a> 对比</h2><table><thead><tr><th></th><th><strong>RDB</strong></th><th><strong>AOF</strong></th></tr></thead><tbody><tr><td>持久化方式</td><td>定时对整个内存做快照</td><td>记录每一次执行的命令</td></tr><tr><td>占用存储空间</td><td>小</td><td>大</td></tr><tr><td>存储速度</td><td>慢</td><td>快</td></tr><tr><td>数据完整性</td><td>不完整，两次备份之间的数据会丢失</td><td>相对完整，取决于刷盘策略</td></tr><tr><td>文件大小</td><td>会有压缩，文件体积小</td><td>记录命令，文件体积很大</td></tr><tr><td>宕机恢复速度</td><td>很快</td><td>慢</td></tr><tr><td>数据恢复优先级</td><td>低，因为数据完整性不如AOF</td><td>高，因为数据完整性更高</td></tr><tr><td>系统资源占用</td><td>高，大量CPU和内存消耗</td><td>低，主要是磁盘IO资源 但AOF重写时会占用大量CPU和内存资源</td></tr><tr><td>使用场景</td><td>可以容忍数分钟的数据丢失，追求更快的启动速度</td><td>对数据安全性要求较高</td></tr></tbody></table><p><strong>RDB 比 AOF 优秀的地方 ：</strong></p><ol><li><p>RDB 文件存储的内容是经过压缩的二进制数据， 保存着某个时间点的数据集，文件很小，适合做数据的备份，灾难恢复。AOF 文件存储的是每一次写命令，类似于 MySQL 的 binlog 日志，通常会比 RDB 文件大很多。</p></li><li><p>当 AOF 变得太大时，Redis 能够在后台自动重写 AOF。新的 AOF 文件和原有的 AOF 文件所保存的数据库状态一样，但体积更小。Redis 7.0 版本之前，如果在重写期间有写入命令，AOF 可能会使用大量内存，重写期间到达的所有写入命令都会写入磁盘两次。</p></li><li><p>使用 RDB 文件恢复数据，直接解析还原数据即可，不需要一条一条地执行命令，速度非常快。而 AOF 则需要依次执行每个写命令，速度非常慢。也就是说，与 AOF 相比，恢复大数据集的时候，RDB 速度更快。</p></li></ol><p><strong>AOF 比 RDB 优秀的地方：</strong></p><ol><li><p>RDB 的数据安全性不如 AOF，没有办法实时或者秒级持久化数据。生成 RDB 文件的过程是比较繁重的， 虽然 BGSAVE 子进程写入 RDB 文件的工作不会阻塞主线程，但会对机器的 CPU 资源和内存资源产生影响。</p></li><li><p>AOF 支持秒级数据丢失(取决于 fsync 策略，如果是 everysec，最多丢失 1 秒的数据)，仅仅是追加命令到 AOF 文件，操作轻量。</p></li><li><p>RDB 文件是以特定的二进制格式保存的，并且在 Redis 版本演进中有多个版本的 RDB，所以存在老版本的 Redis 服务不兼容新版本的 RDB 格式的问题。</p></li></ol><h2 id="选择" tabindex="-1"><a class="header-anchor" href="#选择" aria-hidden="true">#</a> 选择</h2><ol><li>对数据非常敏感，建议使用默认的AOF持久化方案</li></ol><p>​   AOF持久化策略使用everysecond，每秒钟同步一次。</p><p>​   采取该策略时，redis仍可以保持很好的处理性能，当出现问题时，最多丢失0-1秒内的数据。</p><p>​   由于AOF文件存储体积较大，所以恢复速度较慢</p><ol start="2"><li>数据呈现阶段有效性，建议使用RDB持久化方案</li></ol><p>​   数据可以做到阶段内无丢失，且恢复速度较快，阶段点数据恢复通常采用RDB方案</p><ol start="3"><li>综合比对</li></ol><p>​   如果不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</p><p>​   如果能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</p><p>​   灾难恢复选用RDB</p><p>​   双保险策略，同时开启 RDB 和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量。</p>',174),g=[h];function c(b,f){return r(),a("div",null,g)}const A=e(l,[["render",c],["__file","持久化.html.vue"]]);export{A as default};
