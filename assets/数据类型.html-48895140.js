import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as r,a as p}from"./app-a89b456a.js";const a="/assets/image-20231102143950422-6634d1c3.png",s="/assets/image-20230426074939764-1698907462805-7-8873f310.png",i="/assets/image-20230426074952562-fffd02e3.png",n="/assets/image-20230426075001939-ee47674e.png",d="/assets/image-20230426075013212-aa6da9b1.png",o="/assets/image-20230426075021363-89bc59df.png",l="/assets/image-20230426075034492-8d100ad2.png",g="/assets/image-20230426075049043-bc3cc6ea.png",h="/assets/image-20230426075101436-5133584d.png",y="/assets/image-20230817102907795-3f732720.png",c="/assets/image-20230817133217747-af0d5d66.png",m="/assets/image-20230817135601052-869db0bb.png",k="/assets/image-20230817141420659-bbb99b04.png",u="/assets/image-20230817141238496-070e2c7b.png",b="/assets/image-20230817141332999-55d5e9e7.png",f="/assets/image-20230817141457261-c3ffc890.png",x="/assets/image-20230426075110956-d74e66b3.png",v="/assets/image-20230426075124782-7d518c7b.png",z={},_=p('<h2 id="常用数据类型" tabindex="-1"><a class="header-anchor" href="#常用数据类型" aria-hidden="true">#</a> 常用数据类型</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p><strong>redis自身是一个map，其中所有的数据都采用 key:value 的形式存储。</strong></p><p><strong>数据类型指的是存储的数据的类型，也就是value部分的类型，key部分永远都是字符串。</strong></p><figure><img src="'+a+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="数据库操作命令" tabindex="-1"><a class="header-anchor" href="#数据库操作命令" aria-hidden="true">#</a> <strong>数据库操作命令</strong></h4><table><thead><tr><th style="text-align:center;">命令</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center;">select id</td><td>切换数据库，id的值从0到15</td></tr><tr><td style="text-align:center;">mov key index</td><td>移动key到指定数据库中(必须保证目标数据库中不存在该值，且原数据库中有该值) 移动完成后，原数据库中该值消失</td></tr><tr><td style="text-align:center;">dbsize</td><td>查看当前数据库的key的数量</td></tr><tr><td style="text-align:center;">flushdb</td><td>清除当前数据库中的key</td></tr><tr><td style="text-align:center;">flushall</td><td>清除所有key</td></tr></tbody></table><h4 id="键-key" tabindex="-1"><a class="header-anchor" href="#键-key" aria-hidden="true">#</a> <strong>键(Key)</strong></h4><p>通用命令：</p><table><thead><tr><th style="text-align:center;">命令</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">set key value</td><td style="text-align:center;">设置key的值，如果key已经存在，则覆盖</td></tr><tr><td style="text-align:center;">get key</td><td style="text-align:center;">查询key的值，如果key不存在，则返回(nil)</td></tr><tr><td style="text-align:center;">keys *</td><td style="text-align:center;">查看当前库中的所有key，也可以使用正则表达式，查找符合表达式的key的个数</td></tr><tr><td style="text-align:center;">exists key</td><td style="text-align:center;">判断某个key是否存在，如果存在则返回1，不存在返回0</td></tr><tr><td style="text-align:center;">type key</td><td style="text-align:center;">查看key是什么类型</td></tr><tr><td style="text-align:center;">del key</td><td style="text-align:center;">删除指定的key</td></tr><tr><td style="text-align:center;">unlink key</td><td style="text-align:center;">根据value选择非阻塞删除，仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。</td></tr><tr><td style="text-align:center;">expire key 10</td><td style="text-align:center;">为指定的key设置过期时间，以秒为单位</td></tr><tr><td style="text-align:center;">ttl key</td><td style="text-align:center;">查看key还有多少秒过期，-1表示永不过期，-2表示已过期</td></tr><tr><td style="text-align:center;">getset key value</td><td style="text-align:center;">设置新值，并返回旧值</td></tr><tr><td style="text-align:center;">persist key</td><td style="text-align:center;">将key设置为永久有效</td></tr><tr><td style="text-align:center;">random key</td><td style="text-align:center;">随机获取一个key</td></tr><tr><td style="text-align:center;">rename key newkey</td><td style="text-align:center;">重命名，如果newkey已经存在，则会覆盖</td></tr><tr><td style="text-align:center;">sort</td><td style="text-align:center;">对所有key排序，但不改变原数据</td></tr></tbody></table><p><strong>key的设置约定：</strong></p><p>  表名:主键名:主键值:字段名</p><p>  例: set order:u_id:2942:name vkls</p><p>     set order:u_id:2942:age 20</p><p>  或: <code>set order:u_id:2942 {id:2942,name:vkls,age:20}</code></p><h3 id="字符串-string" tabindex="-1"><a class="header-anchor" href="#字符串-string" aria-hidden="true">#</a> 字符串(String)</h3><p><strong>String类型</strong></p><p>存储的数据：单个数据，最简单且最常用的数据存储类型</p><p>存储数据的格式：一个存储空间保存一个数据</p><p>存储内容：通常使用字符串，<strong>如果字符串以整数的形式表示，可以作为数字进行操作</strong></p><p><strong>命令：</strong></p><ol><li>set key value [EX seconds | PX milliseconds|KEEPTTL] [NX | XX] 命令中的其他参数</li></ol><p>​   NX：当数据库中key不存在时，可以将key-value添加到数据库</p><p>​   XX：当数据库中key存在时，可以将key-value添加到数据库，与NX参数互斥</p><p>​   EX：key的超时秒数，如果在规定时间内重新设置该值，则时间刷新。</p><p>​   PX：key的超时毫秒数，与EX互斥</p><p>  其他设置生命周期的方式：</p><p>     setex key seconds value    //设定key的生命周期，以秒为单位，等同于 set key value ex seconds</p><p>      例：setext num 100 3     //设置num的值为3，且存活100秒(如果在100秒中该值重新被设置，则数据刷新)</p><p>​     psetex key milliseconds value //以毫秒为单位</p><ol start="2"><li>添加/修改多个数据</li></ol><p>   mset key1 value1 key2 value2 ... ( m:multiple)</p><ol start="3"><li>获取多个数据</li></ol><p>   mget key1 key2 ...</p><ol start="4"><li>获取字符串长度</li></ol><p>​   strlen key</p><ol start="5"><li>追加信息到原始信息后部(如果原始信息不存在，则新建)，返回值为追加后的字符串长度</li></ol><p>​   append key value</p><ol start="6"><li>覆盖字符串，将key中从start索引开始的字符用value覆盖，索引从0开始</li></ol><p>​   setrange key start value</p><ol start="7"><li>获取子串，获取key中从start到end的字符(两边都包含)，索引从0开始</li></ol><p>​   getrange key start end</p><p><strong>String 作为数值进行操作：</strong></p><ol><li><p>string在redis内部存储默认就是一个字符串，<strong>当遇到增减类操作incr，decr时会转成数值型进行计算</strong>。</p></li><li><p><strong>redis所有的操作都是原子性的，采用单线程处理所有业务</strong>，命令是一个一个执行的，因此无需考虑并发带来的影响。</p></li><li><p>按数值进行操作的数据，如果原始数据不能转成数值，或超越了redis数值上限范围，将报错。</p></li><li><p>数值计算的最大范围(java中long类型的最大值）：9223372036854775807</p><p>数值增加操作：</p></li></ol><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>incr key</td><td>key的值加一，如果key不存在，则创建key，并赋值为1</td></tr><tr><td>incrby key increment</td><td>key的值增加increment (increment只能为整数)</td></tr><tr><td>incrbyfloat key increment</td><td>key的值增加increment (increment的值可以是小数，也可以是整数)</td></tr></tbody></table><p>   数值减少操作：</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>decr key</td><td>key的值减一，如果key不存在，则创建key，并赋值为-1</td></tr><tr><td>decrby key increment</td><td>key的值减少increment</td></tr></tbody></table><p><strong>底层实现</strong></p><p><strong>String的数据结构为简单动态字符串(Simple Dynamic String，缩写SDS)。是可以修改的字符串，内部结构实现上类似于Java的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。</strong></p><p>​ <img src="'+s+'" alt="image-20230426074939764" loading="lazy"></p><p>如图中所示，内部为当前字符串实际分配的空间capacity，一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，</p><p>如果超过1M，扩容时一次只会多扩1M的空间。<strong>需要注意的是字符串最大长度为512M</strong>。</p><h3 id="列表-list" tabindex="-1"><a class="header-anchor" href="#列表-list" aria-hidden="true">#</a> 列表(List)</h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> <strong>简介：</strong></h4><p>单键多值，Redis 列表是简单的字符串列表，按照插入顺序排序。</p><p>​ 可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><p>​ <strong>它的底层实际是个双向链表，对两端的操作性能很高，通过索引的方式操作中间的节点性能会较差。</strong></p><h4 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> <strong>常用命令：</strong></h4><p><strong>命令中，key就代表一个list的名称，list中可以存储多个值</strong></p><ol><li><p>添加/修改数据</p><p>lpush key value    从list左侧添加数据</p><p>rpush key value    从list右侧添加</p><p>lpush/rpush key value1 value2 value3 ....    从左边/右边插入多个值，以空格分隔。</p></li><li><p>获取数据</p></li></ol><p>   lrange key start stop</p><p>    从左侧获取数据，start 和stop为开始和结束的索引值，索引从0开始，如果stop越界，则返回start之后的所有数据，</p><p>    如果start和stop都越界或者start大于stop，则返回(empty array)</p><p>   lrange key 0 -1     获取所有值</p><p>   lindex key index    从列表左侧根据索引获取单个数据</p><p>   llen key     返回列表中数据的个数</p><p>   rpoplpush key1 key2   从列表key1右边拿出一个值，插入到key2的左边，并返回该值</p><ol start="3"><li>获取并移除数据</li></ol><p>​   lpop key [count]    返回左侧开始count个数据并移除，默认count为1</p><p>​   rpop key [count]    返回右侧开始count个数据并移除，默认count为1</p><ol start="4"><li>插入和更新数据</li></ol><p>​   linsert key before/after value newvalue    在value的前面或后面插入newvalue</p><p>​   lset key index newvalue    将列表中索引为index的数值更新为newvalue</p><ol start="5"><li>阻塞获取数据</li></ol><p>​   blpop key1 [key2] time 如果有数据，则立刻返回；如果没有数据，则等待time秒，time秒后依然没有数据，则返回(nil)</p><p>​   brpop key1 [key2] time   从右侧开始，...</p><ol start="6"><li>移除指定的数据</li></ol><p>​   lrem key count value    从左侧开始删除count个value</p><p>​    例：lrem list1 3 a    从左侧开始，删除3个a</p><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> <strong>注意事项：</strong></h4><p>​  <strong>1.list中保存的数据都是string类型的</strong>，数据总容量是有限的，最多2^32-1个元素(4294967295)。</p><p>​  2.list具有索引的概念，但是操作数据时通常以队列的形式进行入队出队操作，或以栈的形式进行入栈出栈操作</p><p>​  3.list可以对数据进行分页操作，通常第一页的信息来自于list，第2页及更多的信息通过数据库的形式加载</p><h4 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> <strong>数据结构：</strong></h4><p>​ 1.List的数据结构为快速链表quickList。</p><p>​ 2.首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也即是压缩列表。</p><p>​   它<strong>将所有的元素紧挨着一起存储，分配的是一块连续的内存</strong>。<strong>当数据量比较多的时候才会改成quicklist。</strong></p><p>​ 3.因为普通的链表需要的附加指针空间太大，会比较浪费空间。</p><p>​   比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针prev和next。</p><p>​   Redis将链表和ziplist结合起来组成了quicklist。也就是<strong>将多个ziplist使用双向指针串起来使用。</strong></p><p>​   这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</p><p>​ <img src="'+i+'" alt="image-20230426074952562" loading="lazy"></p><h3 id="集合-set" tabindex="-1"><a class="header-anchor" href="#集合-set" aria-hidden="true">#</a> 集合(Set)</h3><h4 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1" aria-hidden="true">#</a> <strong>简介：</strong></h4><p>​ Set对外提供的功能与list类似是一个列表的功能，特殊之处在于set是可以<strong>自动排重</strong>的。</p><p>​ 并且Set提供了判断某个成员是否在一个集合内的功能。</p><p>​ <strong>Set是String类型的无序集合。它底层其实是一个value为null的Hash表</strong>，所以添加、删除、查找的复杂度都是O(1)。</p><p>​ 与hash存储结构完全相同，仅存储键，不存储值（nil）。</p><p>​ <img src="'+n+'" alt="image-20230426075001939" loading="lazy"></p><h4 id="常用命令-1" tabindex="-1"><a class="header-anchor" href="#常用命令-1" aria-hidden="true">#</a> <strong>常用命令：</strong></h4><p>​ sadd key member1 [member2]    添加一个或多个数据，如果已经存在，则忽略</p><p>​ smembers key    获取全部数据</p><p>​ srem key member1 [member2]    删除集合中的一个或多个元素</p><p>​ scard key    返回该集合中的元素个数</p><p>​ sismember key member    判断集合中是否包含指定数据 如果存在返回1，不存在返回0</p><p>​ srandmember key [n]    随机取出n个值(原集合中的数据不变)，如果没有n选项，则默认为1</p><p>​ spop key    随机获取集合中的一个元素并移除</p><p>​ sinter key1 [key2]     求带个集合的交集</p><p>​ sunion key1 [key2]    求两个集合的并集</p><p>​ sdiff key1 [key2]       求key1减去key2的部分</p><p>​ sinterstore key3 key1 [key2]    将两个集合的交集存储到key3中</p><p>​ sunionstore key3 key1 [key2]    将两个集合的并集存储到key3中</p><p>​ sdiffstore key3 key1 [key2]    将key1减key2的差集存储到key3中</p><p>​ smove key1 key2 value    将key1中的value移动到key2中</p><p>注意：<strong>Set类型不允许数据重复，只有第一次创建时有效，再对该key进行赋值时无效</strong></p><h4 id="数据结构-1" tabindex="-1"><a class="header-anchor" href="#数据结构-1" aria-hidden="true">#</a> <strong>数据结构：</strong></h4><p><strong>Set的数据结构是dict字典，字典是用哈希表实现的。所有的value都指向同一个内部值。</strong></p><h3 id="哈希-hash" tabindex="-1"><a class="header-anchor" href="#哈希-hash" aria-hidden="true">#</a> 哈希(Hash)</h3><h4 id="简介-2" tabindex="-1"><a class="header-anchor" href="#简介-2" aria-hidden="true">#</a> <strong>简介：</strong></h4><p>Redis Hash 是一个键值对集合。</p><p>Redis Hash是一个String类型的field和value的映射表，Hash特别适合用于存储对象。</p><p>类似Java里面的Map&lt;String，Object&gt;，用户ID为查找的key，存储的value用户对象包含姓名，年龄，生日等信息，</p><p>​ 如果用普通的key/value结构来存储，主要有以下2种存储方式：</p><p>​ <img src="'+d+'" alt="image-20230426075013212" loading="lazy"></p><p><strong>通过 key(用户ID) + field(属性标签) 就可以操作对应属性数据了，既不需要重复存储数据，也不会带来序列化和并发修改控制问题。</strong></p><p>​ <img src="'+o+'" alt="image-20230426075021363" loading="lazy"></p><p>​</p><p>​ <img src="'+l+'" alt="image-20230426075034492" loading="lazy"></p><h4 id="常用命令-2" tabindex="-1"><a class="header-anchor" href="#常用命令-2" aria-hidden="true">#</a> <strong>常用命令：</strong></h4><p>​ hset key field value    给 key 集合中的 field 键赋值 value</p><p>​ hget key field1 [field2]   取出 key集合中的 field 字段对应的值</p><p>​ hmset key1 field1 value1 field2 value2 ...    批量设置hash的值</p><p>​ hexists key1 field    查看哈希表 key 中，给定域 field 是否存在。</p><p>​ hkeys key    列出该hash集合的所有field</p><p>​ hvals key    列出该hash集合的所有value</p><p>​ hincrby key field increment    为哈希表 key 中的字段 field 的值加上增量increment</p><p>​ hsetnx key field value    将哈希表 key 中的字段 field 的值设置为 value ，当且仅当字段 field 不存在时.</p><p>​ hdel key field1 [field2] ...    删除数据</p><p>​ hlen key    获取key中字段的个数</p><p><strong>注意事项：</strong></p><p>​ 1.<strong>Hash类型下的value只能存储字符串，不允许存储其他数据类型，不存在嵌套现象。如果数据未获取到，对应的值为（nil）</strong></p><p>​ 2.每个 Hash 可以存储 2^32-1 个键值对</p><p>​ 3.Hash类型十分贴近对象的数据存储形式，并且可以灵活添加删除对象属性。</p><p>​    但hash设计初衷不是为了存储大量对象而设计的，切记不可滥用，更不可以将Hash作为对象列表使用。</p><p>​ 4.hgetall操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问瓶颈。</p><h4 id="数据结构-2" tabindex="-1"><a class="header-anchor" href="#数据结构-2" aria-hidden="true">#</a> <strong>数据结构：</strong></h4><p>​ Hash类型对应的数据结构是两种：ziplist（压缩列表），hashtable（哈希表）。</p><p>​ 当field-value长度较短且个数较少时，使用ziplist，否则使用hashtable。</p><h3 id="有序集合-zset" tabindex="-1"><a class="header-anchor" href="#有序集合-zset" aria-hidden="true">#</a> 有序集合(Zset)</h3><h4 id="简介-3" tabindex="-1"><a class="header-anchor" href="#简介-3" aria-hidden="true">#</a> <strong>简介：</strong></h4><p>​ 有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。</p><p>​ <strong>但zset在set的存储结构基础上添加了可排序字段score。</strong> 集合中的成员是唯一的，但是score的值可以是重复的。</p><p>​ <img src="'+g+'" alt="image-20230426075049043" loading="lazy"></p><p>常用命令：</p><p>​ zadd key score1 member1 [score2 member]    添加数据</p><p>  例: zadd name 90 vkls 85 cly</p><p>​ zrange key start stop [withscores]      获取升序排列后的member [withscores]选项可显示数据</p><p>​ zrevrange key start stop [withscores]    获取降序排列后的member</p><p>​ zrem key member1 [member2...]        删除member</p><p>​ zincrby key increment member     为member的score加上增量</p><p>​ zcount key min max    统计分数在该区间内的元素个数</p><p>​ zrank key memeber    返回member对应的索引值(排序后，索引从0开始)</p><p>​ zscore key member    获得member的score值</p><p>​ zrangebyscore key min max [withscores] [limit]     获取符合条件的member，limit用于限定输出符合条件的member</p><p>  例:zrangebyscore scores 30 50 limit 0 3 withscores    获取scores中score的值在30-50之间的前三个member</p><p>​ zrevrangebyscore key max min [withscores]    从大到小 ...</p><p>​ zremrangebyrank key start stop    删除符合索引条件的member</p><p>​ zremrangebyscore key min max    删除符合score条件的member</p><p>​ zpopmax key [count]    按从大到小的顺序移除coun个值</p><p>​ zpopmin key [count]    按从小到大的顺序移除count个值</p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> <strong>注意：</strong></h4><p>​  1.min与max用于限定搜索查询的条件</p><p>​  2.start与stop用于限定查询范围，作用于索引，表示开始和结束索引</p><p>​  3.offset与count用于限定查询范围，作用于查询结果，表示开始位置和数据总量</p><p>​ zcard key    获取scores中的member总量</p><p>​ zcount key min max    符合条件的member数量</p><p>​ zinterstore key3 numkeys key1 [key2...]     将key1和key2中公共member的值相加存储到key3中</p><p>​ zunionstore key3 numkeys key1 [key2...]    将key1和key2中所有的memeber合并存储到key3中</p><p>​ <img src="'+h+'" alt="image-20230426075101436" loading="lazy"></p><h4 id="注意事项-1" tabindex="-1"><a class="header-anchor" href="#注意事项-1" aria-hidden="true">#</a> <strong>注意事项：</strong></h4><p>​ 1.score保存的数据存储空间是64位，如果是整数范围是-9007199254740992~9007199254740992</p><p>​ 2.score保存的数据也可以是一个双精度的double值，但由于双精度浮点数的特征，可能会丢失精度</p><p>​ 3.sorted_set 底层存储还是基于set结构的，因此数据不能重复。</p><p>​ 如果重复添加相同的数据，score值将被反复覆盖，保留最后一次修改的结果。</p><h4 id="数据结构-3" tabindex="-1"><a class="header-anchor" href="#数据结构-3" aria-hidden="true">#</a> <strong>数据结构：</strong></h4><p>有序集合（zset）同样使用了两种不同的存储结构，分别是 zipList(压缩列表)和 skipList(跳跃列表)，当 zset 满足以下条件时使用压缩列表：</p><p>​ 1.成员的数量小于128 个</p><p>​ 2.每个 member （成员）的字符串长度都小于 64 个字节。</p><h4 id="压缩列表-ziplist" tabindex="-1"><a class="header-anchor" href="#压缩列表-ziplist" aria-hidden="true">#</a> <strong>压缩列表(zipList)</strong></h4><img src="'+y+'" alt="image-20230817102907795" style="zoom:65%;"><p>每一部分在内存中都是紧密相邻的，并承担着不同的作用，介绍如下：</p><ul><li><p>zlbytes 一个无符号整数，表示当前 ziplist 占用的总字节数；</p></li><li><p>zltail ziplist中最后一个entry的偏移量. 用于快速定位最后一个entry, 以快速完成pop等操作</p></li><li><p>zllen 指ziplist中 entry 的数量。当 zllen 比 2^16-2 大时，需要完全遍历 entry 列表来获取 entry 的总数目。</p></li><li><p>entry 用来存放具体的数据项（score和member），长度不定，可以是字节数组或整数，entry 会根据成员的数量自动扩容。</p></li><li><p>zlend 是一个单字节的特殊值，其值全为F，等于 255，起到标识 ziplist 内存结束点的作用。</p><p>例：ZADD salary 3500.0 xh 3200.0 xm</p></li></ul><p>​ <img src="'+c+'" alt="image-20230817133217747" style="zoom:65%;"></p><p>​ 当 zset 使用压缩列表保存数据时，entry 的第一个节点保存 member，第二个节点保存 score。</p><p>​ 依次类推，集合中的所有成员最终会按照 score 从小到大排列。</p><p><strong>Entry结构：</strong></p><p>​ 1.一般结构 <code>&lt;prevlen&gt; &lt;encoding&gt; &lt;entry-data&gt;</code></p><p>​ <code>prevlen</code>：前一个entry的大小；</p><p>​ <code>encoding</code>：不同的情况下值不同，用于表示当前entry的类型和长度；</p><p>​ <code>entry-data</code>：真是用于存储entry表示的数据；</p><p>​ 2.在entry中存储的是int类型时，encoding和entry-data会合并在encoding中表示，此时没有entry-data字段；</p><p>​ redis中，在存储数据时，会先尝试将string转换成int存储，节省空间；</p><p>​ 此时entry结构：<code>&lt;prevlen&gt; &lt;encoding&gt;</code></p><p>​ <strong>prevlen编码</strong></p><p>​ 当前一个元素长度小于254（255用于zlend）的时候，prevlen长度为1个字节，值即为前一个entry的长度，如果长度大于等于254的时候，prevlen用5个字节表示，第一字节设置为254，后面4个字节存储一个小端的无符号整型，表示前一个entry的长度。</p><p>​ <strong>encoding编码</strong></p><p>​ encoding的长度和值根据保存的是int还是string，还有数据的长度而定；</p><p>​ 前两位用来表示类型，当为“11”时，表示entry存储的是int类型，其它表示存储的是string；</p><h4 id="跳跃表" tabindex="-1"><a class="header-anchor" href="#跳跃表" aria-hidden="true">#</a> <strong>跳跃表</strong></h4><p>跳跃列表（skipList）又称“跳表”是一种基于链表实现的随机化数据结构，其<strong>插入、删除、查找的时间复杂度均为 O(logN)。</strong></p><p>跳跃表的缺点就是<strong>需要的存储空间比较大，属于利用空间来换取时间的数据结构。</strong></p><p>特点：</p><ul><li><p>由许多层结构组成，每一层都是一个有序的链表。</p></li><li><p>每个节点包含两个指针，一个指向同一链表中的下一个节点，一个指向下一层的同一个节点，最底层 (Level 1) 的链表包含所有元素。</p></li><li><p>如果一个元素出现在 Level i 的链表中，则它在 Level i 之下的链表也都会出现，即，高层是底层的子集。</p></li></ul><p>​ <img src="'+m+'" alt="image-20230817135601052" style="zoom:60%;"></p><p>查找：</p><p>跳表的查找会从顶层链表的头部元素开始，然后遍历该链表，直到找到元素大于或等于目标元素的节点。</p><p>​ 如果当前元素正好等于目标，那么就直接返回它；从头结点开始，如果下一个元素小于目标元素，则走到下一个元素；</p><p>如果下一个元素大于目标元素，则从当前元素处垂直下降到下一层。</p><p>可以把查找的过程总结为一条二元表达式（下一个元素是否小于目标元素？下一个：下一层）</p><p>插入：</p><p>插入元素的时候，最底层是一定会插入的，至于上一层是否插入，则通过抛硬币的方式(随机)决定，如果为正，</p><p>则插入上一层，然后再次抛硬币，如果还是正，则再往上一层插入，如果为反，则该元素的插入到此结束。</p><p>假设原来有：</p><p>​ <img src="'+k+'" alt="image-20230817141420659" style="zoom:55%;"></p><p>现在插入元素33，先在底层插入：</p><p>​ <img src="'+u+'" alt="image-20230817141238496" style="zoom:55%;"></p><p>然后抛硬币，结果是反面，那么元素33的插入操作就结束了。</p><p>接下来，插入一个新元素55，首先在L1插入55，插入后如下图：</p><p>​ <img src="'+b+'" alt="image-20230817141332999" style="zoom:55%;"></p><img src="'+f+'" alt="image-20230817141457261" style="zoom:55%;"><p>​ 不可能无限的进行层数增长。除了根据一种随机算法得到的层数之外，为了不让层数过大，</p><p>​ 还会有一个最大层数MAX_LEVEL限制，随机算法生成的层数不得大于该值。</p><h2 id="新数据类型" tabindex="-1"><a class="header-anchor" href="#新数据类型" aria-hidden="true">#</a> 新数据类型</h2><h3 id="bitmaps" tabindex="-1"><a class="header-anchor" href="#bitmaps" aria-hidden="true">#</a> Bitmaps</h3><h4 id="简介-4" tabindex="-1"><a class="header-anchor" href="#简介-4" aria-hidden="true">#</a> <strong>简介：</strong></h4><p>合理地使用操作位能够有效地提高内存使用率和开发效率。</p><p>Redis提供了Bitmaps这个“数据类型”可以实现对位的操作：</p><p>​ （1）Bitmaps本身不是一种数据类型， 实际上它就是字符串（key-value），但是它可以对字符串的位进行操作。</p><p>​ （2）Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。</p><p>​ 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p><h4 id="操作" tabindex="-1"><a class="header-anchor" href="#操作" aria-hidden="true">#</a> <strong>操作:</strong></h4><p>​ getbit key offset    获取指定key对应偏移量上的bit值</p><p>​ setbit key offset value     设置指定key对应偏移量上的bit值，value只能是1或0，偏移量从0开始</p><p>​ bitcount key [start end]    统计key中指定范围内的1的个数</p><p>​                         范围包含start和end，单位为字节，即8位，且可以为负数，-1表示最后一位</p><p>​ bitop operation outkey key1 [key2]    对指定key按位进行逻辑运行，并将结果保存到outkey中</p><p>​                                   op 的取值有and、or、not、xor</p><p>​ bitpos key    查找bit数组中指定范围内第一个0或第一个1出现的位置，从左往右数</p><p>例：</p><p>​ <img src="'+x+'" alt="image-20230426075110956" loading="lazy"></p><h3 id="hyperloglog" tabindex="-1"><a class="header-anchor" href="#hyperloglog" aria-hidden="true">#</a> HyperLogLog</h3><h4 id="简介-5" tabindex="-1"><a class="header-anchor" href="#简介-5" aria-hidden="true">#</a> <strong>简介：</strong></h4><p><strong>基数：基数就是数据去重后元素个数。基数估计就是在误差可接受的范围内，快速计算基数。</strong></p><p>​ 例：{1,3,5,7,5,7,8}   基数集:{1,3,5,7,8}   基数:5</p><p>​ {1,1,1,1,4}   基数集:{1,4}   基数:2</p><p>Redis HyperLogLog 是用来做基数统计的算法，</p><p>HyperLogLog 的优点是，<strong>在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的。</strong></p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。</p><p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog <strong>不能返回输入的各个元素</strong>。</p><h4 id="常用命令-3" tabindex="-1"><a class="header-anchor" href="#常用命令-3" aria-hidden="true">#</a> <strong>常用命令：</strong></h4><p>​ pfadd key element [element...]    添加元素，如果添加完后key估计的近似基数发生变化，则返回1，否则返回0</p><p>​ pfcount key [key ...]    统计key的基数，也可以一起统计多个key的基数</p><p>​ pfmerge destkey key1 [key2...]    将一个key或多个key合并后的结果存储在destkey中</p><p>​ 例：</p><p>​ <img src="'+v+'" alt="image-20230426075124782" loading="lazy"></p><h4 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2" aria-hidden="true">#</a> <strong>注意事项：</strong></h4><p>​ 1.<strong>用于进行基数统计，不是集合，不保存数据，只记录数量而不是具体数据。</strong></p><p>​ 2.核心是基数估算算法，最终数值存在一定误差</p><p>​   误差范围：基数估计的结果是一个带有 0.81% 标准错误的近似值</p><p>​ 3.使用空间极小，每个hyperloglog key占用了12K的内存用于标记基数</p><p>​ 4.pfadd命令不是一次性分配12K内存使用，会随着基数的增加内存逐渐增大</p><p>​ 5.pfmerge命令合并后占用的存储空间为12K，无论合并之前数据量是多少</p><h3 id="geospatial" tabindex="-1"><a class="header-anchor" href="#geospatial" aria-hidden="true">#</a> Geospatial</h3><h4 id="简介-6" tabindex="-1"><a class="header-anchor" href="#简介-6" aria-hidden="true">#</a> <strong>简介：</strong></h4><p>GEO，Geographic，地理信息的缩写。该类型，就是元素的2维坐标，在地图上就是经纬度。</p><p>redis基于该类型，提供了经纬度设置，查询，范围查询，距离查询，经纬度Hash等常见操作。</p><h4 id="常用命令-4" tabindex="-1"><a class="header-anchor" href="#常用命令-4" aria-hidden="true">#</a> <strong>常用命令：</strong></h4><p>​ 1.geoadd key longitude latitude member1 [longitude latitude member2 ...]</p><p>​   作用：</p><p>​    将指定的地理空间位置(维度，经度，名称)添加到key中，可同时添加多个地理位置。</p><p>​   例：</p><p>​    geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shenzhen 116.38 39.90 beijing</p><p>​   注意：</p><p>​    两极无法直接添加，一般会下载城市数据，直接通过 Java 程序一次性导入。</p><p>​    有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度。</p><p>​    当坐标位置超出指定范围时，该命令将会返回一个错误。</p><p>​    已经添加的数据，是无法再次往里面添加的。</p><p>​ 2.geopos key member [member...]</p><p>​   获得指定地区的坐标值。</p><p>​   该命令返回一个数组，数组中的每个项都由两个元素组成：给定位置元素的经度和纬度。</p><p>​   当给定的位置元素不存在时，对应的数组项为空值。</p><p>​ 3.geodist key member1 member2 [unit]</p><p>​   计算两个地理位置之间的直线距离，如果有一个member不存在，则返回空值。</p><p>​   unit的取值为 m(米)，km(千米)，mi(英里)，ft(英尺)，默认为米</p><p>​ 4.georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count]</p><p>​   以给定的经纬度为中心，找到给定半径内的元素</p><p>​   参数：</p><p>​    withdish：在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。</p><p>​              距离的单位和用户给定的范围单位保持一致。</p><p>​    withcoord：将位置元素的经度和维度也一并返回。</p><p>​    withhash：以 52 位有符号整数的形式，返回位置元素经过原始 geohash 编码的有序集合分值。</p><p>​    count：显示前count个匹配到的元素。</p><p>​    asc: 根据中心的位置，按照从近到远的方式返回位置元素。</p><p>​    desc: 根据中心的位置，按照从远到近的方式返回位置元素。</p><p>​ 5.georadiusbymember key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</p><p>​   该命令和 georadius 命令一样， 都可以找出位于指定范围内的元素， 但是该函数的中心点由给定的位置元素决定。</p><p>​ 6.geohash key member [member ...]</p><p>  返回一个或多个位置元素的Geohash表示值</p><p>  该命令返回的geohash的位置与用户给定的元素的位置是一一对应的</p><p><strong>其底层是使用的Sorted Set，GEO 中存储的地理位置信息的经纬度数据通过 GeoHash 算法转换成了一个整数，这个整数作为 SortedSet 的 score(权重参数)使用。</strong></p>',310),L=[_];function S(w,H){return t(),r("div",null,L)}const B=e(z,[["render",S],["__file","数据类型.html.vue"]]);export{B as default};
