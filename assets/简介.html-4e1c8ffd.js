import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as i,b as l,a as p}from"./app-a89b456a.js";const n={},d=l("p",null,"Redis数据库简介。记录了Redis的应用、安装以及常用配置项。",-1),r=p(`<h2 id="nosql型数据库" tabindex="-1"><a class="header-anchor" href="#nosql型数据库" aria-hidden="true">#</a> NoSQL型数据库</h2><p>概述：</p><p>​ NoSQL(NoSQL = Not Only SQL)，即，&quot;不仅仅是SQL&quot;，泛指非关系型的数据库，主要针对的是键值、文档以及图形类型</p><p>的数据存储。并且，NoSQL 数据库天生支持分布式，数据冗余和数据分片等特性，<strong>旨在提供可扩展的高可用高性能数据存储解决方案。</strong></p><p>​ NoSQL 不依赖业务逻辑方式存储，而以简单的key-value模式存储。因此大大的增加了数据库的扩展能力。</p><p>特点：</p><p>​   不遵循SQL标准。</p><p>​   不支持ACID。</p><p>​   远超于SQL的性能。</p><p>NoSQL 数据库主要可以分为下面四种类型：</p><ul><li><p><strong>键值</strong> ：键值数据库是一种较简单的数据库，其中每个项目都包含键和值。这是极为灵活的 NoSQL 数据库类型，</p><p>因为应用可以完全控制 value 字段中存储的内容，没有任何限制。Redis 和 DynanoDB 是两款非常流行的键值数据库。</p></li><li><p><strong>文档</strong> ：文档数据库中的数据被存储在类似于 JSON（JavaScript 对象表示法）对象的文档中，非常清晰直观。</p><p>每个文档包含成对的字段和值。这些值通常可以是各种类型，包括字符串、数字、布尔值、数组或对象等，</p><p>并且它们的结构通常与开发者在代码中使用的对象保持一致。MongoDB 就是一款非常流行的文档数据库。</p></li><li><p><strong>图形</strong> ：图形数据库旨在轻松构建和运行与高度连接的数据集一起使用的应用程序。图形数据库的典型使用案例包括</p><p>社交网络、推荐引擎、欺诈检测和知识图形。Neo4j 和 Giraph 是两款非常流行的图形数据库。</p></li><li><p><strong>宽列</strong> ：宽列存储数据库非常适合需要存储大量的数据。Cassandra 和 HBase 是两款非常流行的宽列存储数据库。</p></li></ul><p>适用场景：</p><p>  对数据高并发的读写</p><p>  海量数据的读写</p><p>  数据高可扩展性</p><p>不适用场景：</p><p>​   需要事务支持</p><p>​   基于sql的结构化查询存储，处理复杂的关系，需要即时查询。</p><h3 id="redis简介" tabindex="-1"><a class="header-anchor" href="#redis简介" aria-hidden="true">#</a> Redis简介</h3><p>Redis是完全免费开源的，遵守BSD协议，是一个高性能(NOSQL)的key-value数据库。</p><p>Redis是一个开源的使用ANSI C语言编写，支持网络，可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API。</p><p><strong>特征：</strong></p><p>​ 1.数据间没有必然的关联关系</p><p>​ 2.内部采用单线程机制进行工作</p><p>​ 3.高性能</p><p>​ 4.多数据类型支持</p><p>​   string 字符串类型</p><p>​   list 列表类型</p><p>​   hash 散列类型</p><p>​   set 集合类型</p><p>​   sorted_set 有序集合类型</p><p>​ 5.持久化支持，可以进行数据灾难恢复</p><h2 id="应用" tabindex="-1"><a class="header-anchor" href="#应用" aria-hidden="true">#</a> 应用</h2><p>​ 1.为热点数据加速查询。如热点商品，热点新闻，热点资讯等高访问量信息。</p><p>​ 2.任务队列。如秒杀，抢购，购票排队等。</p><p>​ 3.即时信息查询。如各类排行榜，各类网站访问统计，公交到站信息等。</p><p>​ 4.时效性信息控制。如验证码控制，股票控制等。</p><p>​ 5.分布式数据共享。如分布式集群架构中的session分离</p><p>​ 6.消息队列</p><p>​ 7.分布式锁</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>1.安装gcc编译器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> centos-release-scl scl-utils-build

yum <span class="token function">install</span> <span class="token parameter variable">-y</span> devtoolset-8-toolchain

scl <span class="token builtin class-name">enable</span> devtoolset-8 <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.下载压缩包并解压</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> http://download.redis.io/releases/redis-6.2.1.tar.gz 

<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> redis-6.2.1.tar.gz
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.进入到redis目录并编译安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> redis-6.2.1

执行 <span class="token function">make</span> 命令进行编译

然后执行 <span class="token function">make</span> <span class="token function">install</span> 命令进行安装，默认安装在/usr/local/bin下
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.bin下的目录功能</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-benchmark：性能测试工具，可以在自己本子运行，看看自己本子性能如何

redis-check-aof：修复有问题的AOF文件

redis-check-dump：修复有问题的dump.rdb文件

redis-sentinel：Redis集群使用

redis-server：Redis服务器启动命令

redis-cli：客户端，操作入口
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5.进入到/opt/redis-6.2.1，修改配置文件redis.conf</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>将 daemonize no  改成  <span class="token function">yes</span>   <span class="token comment">#允许后台启动</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>6.回到 /usr/local/bin 中，执行redis-server</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>redis-server /opt/redis-6.2.1/redis.conf

<span class="token comment">#在当前目录下执行 redis-cli 可启动客户端</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7.关闭redis</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>.使用kill命令<span class="token punctuation">(</span>非正常关闭，数据易丢失<span class="token punctuation">)</span>

    <span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> redis
    
    <span class="token function">kill</span> <span class="token parameter variable">-9</span> PID 
        
<span class="token number">2</span>.正常关闭

   redis-cli <span class="token function">shutdown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h2><p>redis.conf 配置项说明如下:</p><ol><li>Redis默认不是以守护进程的方式运行，可通过该配置项修改</li></ol><p>​   daemonize yes     //将redis设置为守护进程，即，可以在后台运行</p><ol start="2"><li><p>当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过该配置项修改</p><p>pidfile /var/run/redis_6379.pid    #每个实例会产生一个不同的pid文件</p></li><li><p>指定Redis监听端口，默认端口为6379</p></li></ol><p>​   port 6379</p><ol start="4"><li>绑定的主机地址，默认情况 bind 127.0.0.1只能接受本机的访问请求；不写的情况下，无限制接受任何ip地址的访问。</li></ol><p>​   如果开启了protected-mode，那么在没有设定bind ip且没有设密码的情况下，Redis只允许接受本机的响应。</p><ol start="5"><li>当客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能(以秒为单位) ，即永不关闭。</li></ol><p>​   timeout 300</p><ol start="6"><li>指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为notice</li></ol><p>​   loglevel verbose</p><ol start="7"><li>日志记录方式，默认为标准输出</li></ol><p>​   如果配置Redis为守护进程方式运行，而又将日志记录方式配置为标准输出，则日志将会发送给/dev/null/logfile/stdout</p><ol start="8"><li>设置数据库的数量，默认使用的数据库id为0，可以使用<code>select &lt;num&gt;</code>命令在连接上指定数据库id</li></ol><p>​   databases 16</p><ol start="9"><li>指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</li></ol><p>​    <code>save &lt;seconds&gt; &lt;changes&gt;</code></p><p>​    Redis默认配置文件中提供了三个条件:</p><p>​     save 900 1 //表示900秒(15分钟)内有1个更改</p><p>​     save 300 10 //表示300秒（5分钟）内有10个更改</p><p>​     save 60 10000 //表示60秒内有10000个更改</p><ol start="10"><li>指定存储至本地数据库时是否压缩数据，默认为yes。</li></ol><p>​   Redis采用LZF(一种压缩算法)压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大</p><p>​   rdbcompression yes</p><ol start="11"><li>指定本地数据库文件名，默认值为dump.rdb</li></ol><p>​   dbfilename dump.rdb</p><ol start="12"><li>指定本地数据库存放目录</li></ol><p>​   dir ./</p><ol start="13"><li>设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</li></ol><p>​   <code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></p><ol start="14"><li>当master服务设置了密码保护时，slav服务连接master时需要密码</li></ol><p>​   <code>masterauth &lt;master-password&gt;</code></p><ol start="15"><li>设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过auth password 命令提供密码，默认关闭。</li></ol><p>​   requirepass foobared //如果设置密码，则将foobared改为想要设置的密码</p><ol start="16"><li>设置同一时间最大客户端连接数，默认为10000。</li></ol><p>​   Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数。</p><p>​   当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回 max number of clients reached 错误信息 。</p><p>​    maxclients 128     //如果设置为0，表示不作限制</p><ol start="17"><li>设置Redis可以使用的最大内存</li></ol><p>  1.Redis在启动时会把数据加载到内存中，达到最大内存后，会先尝试清除已到期或即将到期的Key，移除规则可以</p><p>    通过maxmemory-policy 配置项来指定。</p><p>​   2.当按此方法处理后，仍然到达设置的最大内存，将无法再进行写入操作，但仍然可以进行读取操作。</p><p>​   3.如果redis无法根据移除规则来移除内存中的数据，或者设置了“不允许移除”，那么redis则会针对那些需要申请内存的</p><p>​     指令返回错误信息，比如SET、LPUSH等。但是对于无内存申请的指令，仍然会正常响应，比如GET等。</p><p>​   4.Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p><p>​     <code>maxmemory &lt;bytes&gt;</code></p><ol start="18"><li>指定是否在每次更新操作后进行日志记录。</li></ol><p>​   Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</p><p>​   因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</p><p>​    appendonly no</p><ol start="19"><li>指定更新日志文件名，默认为appendonly.aof</li></ol><p>​   appendfilename appendonly.aof</p><ol start="20"><li>指定更新日志条件</li></ol><p>​   共有3个可选值：</p><p>​    no：表示等操作系统进行数据缓存同步到磁盘(快)</p><p>​    always：表示每次更新操作后手动调用fsync()将数据写到磁盘 (慢，安全)</p><p>​    everysec：表示每秒同步一次（折中，默认值）</p><p>​   appendfsync everysec</p><ol start="21"><li>指定是否启用虚拟内存机制，默认值为no</li></ol><p>​   VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中</p><p>​    vm-enabled no</p><ol start="22"><li>虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</li></ol><p>​   vm-swap-file /tmp/redis.swap</p><ol start="23"><li>将所有大于vm-max-memory的数据存入虚拟内存</li></ol><p>​   无论vm-max-memory设置多小，所有索引数据都是内存存储的(Redis的索引数据 就是keys)</p><p>​   也就是说，当vm-max-memory设置为0的时候， 其实是所有value都存在于磁盘。默认值为0</p><p>​   vm-max-memory 0</p><ol start="24"><li>Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，</li></ol><p>​   vm-page-size是要根据 存储的数据大小来设定的</p><p>​   建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很多大对象，则可以使用更大的page，</p><p>   如果不确定，就使用默认值 。</p><p>​   vm-page-size 32</p><ol start="25"><li>设置swap文件中的page数量，由于页表(一种表示页面空闲或使用的bitmap)是在放在内存中的，在磁盘上每8个pages将消耗1byte的内存。</li></ol><p>​   vm-pages 134217728</p><ol start="26"><li>设置访问swap文件的线程数</li></ol><p>​   最好不要超过机器的核数，如果设置为0，那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。</p><p>​   默认值为4</p><p>​   vm-max-threads 4</p><ol start="27"><li>设置在向客户端应答时，是否把较小的包合并为一个包发送。默认为开启。</li></ol><p>​   glueoutputbuf yes</p><ol start="28"><li>指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</li></ol><p>​   hash-max-zipmap-entries 64</p><p>​   hash-max-zipmap-value 512</p><ol start="29"><li>指定是否激活重置哈希，默认为开启。</li></ol><p>​   activerehashing yes</p><ol start="30"><li>指定包含其它的配置文件</li></ol><p>​   可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又可以拥有自己的特定配置文件。</p><p>​   include /path/to/local.conf</p><ol start="31"><li>设置本机访问保护模式，如果为yes，则只允许本机访问；如果设置为no，则任意ip可访问本机上的redis。</li></ol><p>​   protected-mode no</p><ol start="32"><li>对访问客户端的一种心跳检测，每隔n秒检测一次。</li></ol><p>​   单位为秒，如果设置为0，则不会进行Keepalive检测，建议设置成60。</p><p>​   tcp-keepalive 60</p><ol start="33"><li>maxmemory-policy</li></ol><p>​   volatile-lru：使用LRU算法移除key，只针对设置了过期时间的键；（最近最少使用）</p><p>​   allkeys-lru：在所有集合key中，使用LRU算法移除key</p><p>​   volatile-random：在过期集合中移除随机的key，只针对设置了过期时间的键</p><p>​   allkeys-random：在所有集合key中，移除随机key</p><p>​   volatile-ttl：移除那些TTL值最小的key，即那些最近要过期的key</p><p>​   noeviction：不进行移除。针对写操作等申请内存的操作，只是返回错误信息。</p><ol start="34"><li>maxmemory-samples</li></ol><p>​   设置样本数量，LRU算法和最小TTL算法都并非是精确的算法，而是估算值，所以可以设置样本的大小，</p><p>    redis默认会检查这么多个key并选择其中LRU的那个。一般设置为3到7，数值越小样本越不准确，但性能消耗越小。</p>`,159);function o(t,c){return s(),a("div",null,[d,i("  more "),r])}const u=e(n,[["render",o],["__file","简介.html.vue"]]);export{u as default};
