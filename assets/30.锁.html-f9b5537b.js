import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,f as t,a as s}from"./app-a89b456a.js";const p="/assets/image-20230426074421774-1698805439781-1-94344273.png",r="/assets/image-20230426074458796-1aecff41.png",d="/assets/image-20230426074510626-b9c3eb09.png",i="/assets/image-20230426074531450-ee47ff82.png",o="/assets/image-20230426074607659-00f1ff8e.png",l={},c=s(`<h1 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><strong>锁是计算机协调多个进程或线程并发访问某一资源的机制</strong>。</p><p>在数据库中，除传统的计算资源（CPU、RAM、I/O）的争用以外，数据也是一种供许多用户共享的资源。</p><p>如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。</p><p>从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><p>MySQL中的锁，按照锁的粒度分，分为以下三类：</p><p>​  全局锁：锁定数据库中的所有表。</p><p>​  表级锁：每次操作锁住整张表。</p><p>​  行级锁：每次操作锁住对应的行数据。</p><h2 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁" aria-hidden="true">#</a> 全局锁</h2><h3 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1" aria-hidden="true">#</a> 概述</h3><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML、DDL语句都将被阻塞。</p><p>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p>​ 加全局锁</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>flush <span class="token keyword">tables</span> <span class="token keyword">with</span> <span class="token keyword">read</span> <span class="token keyword">lock</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 数据备份</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token operator">-</span>uroot –p1234 student <span class="token operator">&gt;</span> student<span class="token punctuation">.</span><span class="token keyword">sql</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 释放锁</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">unlock</span> <span class="token keyword">tables</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><p>​ 数据库中加全局锁，是一个比较重的操作，存在以下问题：</p><p>​   如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆。</p><p>​   如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志（binlog），会导致主从延迟。</p><p>​ 在InnoDB引擎中，可以在备份时加上参数 --single-transaction 来完成不加锁的一致性数据备份。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysqldump <span class="token comment">--single-transaction -uroot –p123456 student &gt; student.sql </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="表级锁" tabindex="-1"><a class="header-anchor" href="#表级锁" aria-hidden="true">#</a> 表级锁</h2><h3 id="概述-2" tabindex="-1"><a class="header-anchor" href="#概述-2" aria-hidden="true">#</a> 概述</h3><p>​ 表级锁，每次操作锁住整张表。锁的粒度大，发生锁冲突的概率最高，并发度最低。</p><p>​ 应用在MyISAM、InnoDB等存储引擎中。</p><p>​ 对于表级锁，主要分为以下三类：</p><p>​  表锁</p><p>​  元数据锁（meta data lock，MDL）</p><p>​  意向锁</p><h3 id="表锁" tabindex="-1"><a class="header-anchor" href="#表锁" aria-hidden="true">#</a> 表锁</h3><p>对于表锁，分为两类：</p><p>​  表共享读锁（read lock）</p><p>​  表独占写锁（write lock）</p><p>语法：</p><p>​  加锁：lock tables 表名... read/write。</p><p>​  释放锁：unlock tables / 客户端断开连接 。</p><p>  <strong>读锁不会阻塞其他客户端的读操作，但是会阻塞写。写锁会阻塞其他客户端的读，也会阻塞其他客户端的写。</strong></p><h3 id="元数据锁" tabindex="-1"><a class="header-anchor" href="#元数据锁" aria-hidden="true">#</a> 元数据锁</h3><p>meta data lock , 元数据锁，简写MDL。</p><p><strong>这里的元数据，可以简单理解为就是一张表的表结构。 也就是说，某一张表涉及到未提交的事务时，是不能够修改这张表的表结构的。</strong></p><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。</p><p>MDL锁主要作用是维护表元数据的数据一致性，在表上有活动事务时，不可以对元数据进行写入操作。</p><p><strong>为了避免DML与DDL冲突，保证读写的正确性。</strong></p><p>在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁；当对表结构进行变更操作时，加MDL写锁。</p><h3 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁" aria-hidden="true">#</a> 意向锁</h3><p>意向锁是<strong>一种不与行级锁冲突的表级锁</strong>。未来的某个时刻，事务可能要加共享或者排它锁时，先提前声明一个意向。</p><h4 id="原因" tabindex="-1"><a class="header-anchor" href="#原因" aria-hidden="true">#</a> <strong>原因：</strong></h4><p>因为InnoDB是表锁和行锁共存的，如果一个事务A获取到了表中某一行的排他锁，但还未提交，这时候事务B请求获取同一个表的表共享锁，因为共享锁和排他锁是互斥的，因此事务B想对这个表加共享锁时，需要保证没有其他事务持有这个表的表排他锁，同时还要保证没有其他事务持有表中任意一行数据的排他锁。</p><p>​ 然后问题来了，如何判断表中的数据没有排他锁呢，一行一行遍历肯定是不行，性能太差了。</p><p>​ 这时，就需要用到一个叫做意向锁的东西来快速判断是否可以对某个表使用表锁，使得给数据表加表锁时不用检查每行数据是否加锁，<strong>即，使用意向锁来减少表锁的检查。</strong></p><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> <strong>分类</strong></h4><p>​ 意向共享锁(Intention Shared Lock，IS锁)</p><p>​   当事务准备在某些记录上加S锁时，加锁前必须先取得该表的 IS 锁。</p><p>​   与表锁共享锁(read)兼容，与表锁排他锁(write)互斥。</p><p>​ 意向排他锁(Intention Exclusive Lock，IX锁)</p><p>​   当事务准备在某条记录上加 X锁时，加锁之前必须先取得该表的 IX 锁。</p><p>​   与表锁共享锁(read)及排他锁(write)都互斥。</p><h4 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> <strong>原理</strong></h4><p>如果一个事务A获取到了某一行的排他锁，并未提交，这时候表上就有 意向排他锁 和这一行的 排他锁 。</p><p>这个时候事务B想要获取这个表的共享锁，此时因为检测到事务A持有了表的 意向排他锁 ，说明事务A必然持有某些行的排他锁，也就是说事务B对表的加锁请求需要阻塞等待，不再需要去检测表的每一行数据是否存在排他锁。</p><p>特点：</p><ol><li><p><strong>意向锁是由数据引擎自己维护的</strong>，用户无法手动操作，在为记录加共享/排他锁之前，InnoDB 会先获取该记录所在数据表的对应的意向锁。</p></li><li><p><strong>意向锁之间互相兼容，与行级的共享锁和排他锁也兼容</strong>，但意向锁与表级别的共享锁和表级别的排它锁互斥。</p></li></ol><img src="`+p+'" alt="image-20230426074421774" style="zoom:80%;"><p>​ <strong>一旦事务提交了，意向共享锁、意向排他锁，都会自动释放。</strong></p><h3 id="自增锁" tabindex="-1"><a class="header-anchor" href="#自增锁" aria-hidden="true">#</a> 自增锁</h3><p>auto_inc lock，自增锁是一种特殊的表级别锁。它是专门针对AUTO_INCREMENT类型的列，对于这种列，如果表中新增数据时就会去持有自增锁。</p><p>即，如果一个事务正在往表中插入记录，所有其他事务的插入必须等待，以便第一个事务插入的行是连续的主键值。</p><p>参数<code>innodb_autoinc_lock_mode</code>的取值：</p><p>​ 0：传统锁模式，使用表级AUTO_INC锁。一个事务的INSERT-LIKE语句在执行结束后释放AUTO_INC锁，而不是在事务结束后释放。</p><p>​ 1：连续锁模式，连续锁模式对于Simple inserts不会使用表级锁，而是使用一个轻量级锁来生成自增值。</p><p>​    因为InnoDB可以提前知道插入多少行数据。自增值生成阶段使用轻量级互斥锁来生成所有的值，而不是一直加锁</p><p>    直到插入完成。但对于bulk inserts类语句就会使用AUTO_INC表级锁，直到语句完成。</p><p>​ 2：交错锁模式，所有的 INSERT-LIKE 语句都不使用表级锁，而是使用轻量级互斥锁。</p><p><strong>注意</strong>：</p><p>​  INSERT-LIKE：指所有的插入语句，包括： INSERT、REPLACE、INSERT…SELECT、REPLACE…SELECT,LOAD DATA等。</p><p>​  Simple inserts：指在插入前就能确定插入行数的语句，包括：INSERT、REPLACE，不包含INSERT…ON DUPLICATE KEY</p><p>​ UPDATE这类语句。</p><p>​ Bulk inserts：指在插入前不能确定行数的语句，包括：INSERT … SELECT/REPLACE … SELECT/LOAD DATA。</p><h2 id="行级锁" tabindex="-1"><a class="header-anchor" href="#行级锁" aria-hidden="true">#</a> 行级锁</h2><h3 id="概述-3" tabindex="-1"><a class="header-anchor" href="#概述-3" aria-hidden="true">#</a> 概述</h3><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。</p><p>应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，<strong>行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。</strong></p><p><strong>行级锁和存储引擎有关，是在存储引擎层面实现的。</strong></p><p>对于行级锁，主要分为以下三类：</p><ol><li>行锁(Record Lock)：又叫记录锁，锁定单行记录的锁，防止其他事务对此行记录进行update和delete。在RC、RR隔离级别下都支持。<strong>行锁永远都是加在索引上的，即使一个表没有索引，InnoDB也会隐式的创建一个索引。</strong></li></ol><p>​ <img src="'+r+'" alt="image-20230426074458796" loading="lazy"></p><ol start="2"><li>间隙锁(Gap Lock)：锁定索引记录的间隙（不含该记录），确保索引记录间隙不变，</li></ol><p>​     防止其他事务在这个间隙进行insert操作，产生幻读。在RR隔离级别下使用。</p><p>​ <img src="'+d+'" alt="image-20230426074510626" loading="lazy"></p><ol start="3"><li><p>临键锁(Next-Key Lock)：行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。</p><p>主要目的是为了解决幻读问题。它的锁区间是前开后闭，在RR隔离级别下使用。</p></li></ol><p>​ <img src="'+i+'" alt="image-20230426074531450" loading="lazy"></p><h3 id="行锁" tabindex="-1"><a class="header-anchor" href="#行锁" aria-hidden="true">#</a> 行锁</h3><p>InnoDB实现了 以下两种类型的行锁：</p><p>​ 共享锁（S）：又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）</p><p>​ 排他锁（X）：又称写锁/独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。</p><p>​ 注意：<strong>排他锁指的是一个事务在一行数据加上排他锁后，其他事务不能再添加其他的锁。</strong></p><p>​ 比如，InnoDB中，<strong>select语句是默认不加任何锁的</strong>，如果一条记录被加了排他锁，虽然不能再加锁，但是可以使用普通select语句进行查询操作，因为select语句默认不加锁。</p><p>​ <img src="'+o+`" alt="image-20230426074607659" loading="lazy"></p><p>​ 常见的SQL语句，在执行时，所加的行锁如下：</p><table><thead><tr><th style="text-align:center;">SQL</th><th style="text-align:center;">行锁类型</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">insert ...</td><td style="text-align:center;">排他锁</td><td style="text-align:center;">自动加锁</td></tr><tr><td style="text-align:center;">update ...</td><td style="text-align:center;">排他锁</td><td style="text-align:center;">自动加锁   </td></tr><tr><td style="text-align:center;">delete ...</td><td style="text-align:center;">排他锁</td><td style="text-align:center;">自动加锁</td></tr><tr><td style="text-align:center;">select (正常)</td><td style="text-align:center;">不加任何锁</td><td style="text-align:center;">RC和RR时，默认不加锁，Serializable下会加锁</td></tr><tr><td style="text-align:center;">select ... lock in share mode  </td><td style="text-align:center;">共享锁</td><td style="text-align:center;">需要手动在select语句之后加 lock in share mode</td></tr><tr><td style="text-align:center;">select ... for update</td><td style="text-align:center;">排他锁</td><td style="text-align:center;">需要手动在select之后加for update</td></tr></tbody></table><p>默认情况下，InnoDB在 repeatable read事务隔离级别运行会使用 next-key 锁进行搜索和索引扫描，以防止幻读。</p><p>针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。</p><p><strong>InnoDB的行锁是针对于索引加的锁，如果不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁， 此时就会升级为表锁。</strong></p><p>使用：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 共享锁</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE</span> <span class="token keyword">MODE</span><span class="token punctuation">;</span>

<span class="token comment"># 排他锁</span>
<span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="间隙锁和临键锁" tabindex="-1"><a class="header-anchor" href="#间隙锁和临键锁" aria-hidden="true">#</a> 间隙锁和临键锁</h3><p>​ 默认情况下，InnoDB在 repeatable read事务隔离级别运行时会使用 next-key 锁进行搜索和索引扫描，以防止幻读。</p><p>​ 索引上的等值查询(唯一索引)，如果记录存在，则会优化为行锁；如果查询的记录不存在，则会优化为间隙锁 。</p><p>​ 索引上的等值查询(非唯一普通索引)，向右遍历到最后一个值不满足查询需求时，next-key lock 退化为间隙锁。</p><p>​ 索引上的范围查询(唯一索引)------会访问到不满足条件的第一个值为止。</p><p>​ 注意：间隙锁唯一目的是防止其他事务插入间隙。</p><p>       <strong>间隙锁可以共存，一个事务采用的间隙锁不会阻止另一个事务在同一间隙上采用间隙锁。</strong></p><h2 id="死锁和活锁" tabindex="-1"><a class="header-anchor" href="#死锁和活锁" aria-hidden="true">#</a> 死锁和活锁</h2><h3 id="活锁" tabindex="-1"><a class="header-anchor" href="#活锁" aria-hidden="true">#</a> 活锁</h3><p>定义：系统可能使某个事务永远处于等待状态，得不到封锁的机会，这种现象称为&quot;活锁&quot;(Live Lock)。</p><p>解决：采用 先来先服务 的策略</p><p>​    – 当多个事务请求封锁同一数据对象时，封锁子系统按请求封锁的先后次序对这些事务进行排队</p><p>​    – 该数据对象上的锁一旦释放，首先批准申请队列中第一个事务获得锁</p><h3 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁" aria-hidden="true">#</a> 死锁</h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> <strong>定义</strong></h4><p>  系统中有两个或两个以上的事务都处于等待状态，并且每个事务都在等待其中另一个事务解除封锁，</p><p>  它才能继续执行下去，结果造成任何一个事务都无法继续执行，这种现象称系统进入了&quot;死锁&quot;(Dead Lock)状态。</p><h4 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> <strong>解决</strong></h4><ol><li><p><strong>死锁的预防(数据库中不适用)</strong></p><p>预防死锁的发生就是要破坏产生死锁的条件，有一次封锁法和顺序封锁法。</p></li></ol><p>   <strong>1.一次封锁法：</strong></p><p>     <strong>一次封锁法要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行。</strong></p><p>​     存在的问题：</p><p>      1. 降低并发度</p><p>​       一次就将以后要用到的全部数据加锁，势必扩大了封锁的范围，从而降低了系统的并发度。</p><p>      2.难于事先精确确定封锁对象</p><p>        数据库中数据是不断变化的，原来不要求封锁的数据，在执行过程中可能会变成封锁对象，所以很难事先精确</p><p>        地确定每个事务所要封锁的数据对象。</p><p>   <strong>2.顺序封锁法</strong></p><p>     <strong>顺序封锁法是预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实行封锁。</strong></p><p>     存在的问题：</p><p>​       1.维护成本高</p><p>         数据库系统中可封锁的数据对象极其众多，并且随数据的插入、删除等操作而不断地变化，要维护这样极多</p><p>        而且变化的资源的封锁顺序非常困难，成本很高。</p><p>​       2.难于实现</p><p>​        事务的封锁请求可以随着事务的执行而动态地决定，很难事先确定每一个事务要封锁哪些对象，因此也就很难</p><p>        按规定的顺序去施加封锁。</p><ol start="2"><li><strong>死锁的诊断和解除</strong></li></ol><p>​   由DBMS 的并发控制子系统 定期检测 系统中是否存在死锁，一旦检测到死锁，就要设法解除。</p><p>​   检测死锁的方法：</p><p>​   1.超时法</p><p>​     <strong>如果一个事务的等待时间超过了规定的时限，就认为发生了死锁。</strong></p><p>​     优点：实现简单</p><p>​     缺点：有可能误判死锁，时限若设置得太长，死锁发生后不能及时发现</p><p>​   2.等待图法</p><p>​     用事务等待图动态反映所有事务的等待情况</p><p>​     事务等待图是一个有向图G=(T，U)，T为结点的集合，每个结点表示正运行的事务，U为边的集合，</p><p>      每条边表示事务等待的情况，若T1等待T2，则T1，T2之间划一条有向边，从T1指向T2。</p><p>​     <strong>并发控制子系统周期性地(比如每隔1min)检测事务等待图，如果发现图中存在回路，则表示系统中出现了死锁。</strong></p><p>​ <strong>解除死锁：</strong></p><p>​   选择一个处理死锁代价最小的事务，将其撤消，释放此事务持有的所有的锁，使其它事务能继续运行下去。</p>`,162);function h(g,u){return a(),n("div",null,[t(" permalink: /MySQL/原理/锁    "),c])}const b=e(l,[["render",h],["__file","30.锁.html.vue"]]);export{b as default};
