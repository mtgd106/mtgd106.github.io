import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as r,f as d,a as n}from"./app-a89b456a.js";const a={},l=n('<h3 id="正则表达式" tabindex="-1"><a class="header-anchor" href="#正则表达式" aria-hidden="true">#</a> 正则表达式</h3><p><strong>regular expression</strong></p><p><strong>引用元字符：</strong></p><table><thead><tr><th style="text-align:center;">字符</th><th style="text-align:center;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center;">^</td><td style="text-align:center;">匹配字符串开始的位置</td></tr><tr><td style="text-align:center;">$</td><td style="text-align:center;">匹配字符串的结束位置</td></tr><tr><td style="text-align:center;">.</td><td style="text-align:center;">匹配除 &quot;\\n&quot; 之外的任何单个字符</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">匹配前面的子表达式零次或多次</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">匹配前面的子表达式一次或多次</td></tr><tr><td style="text-align:center;">?</td><td style="text-align:center;">匹配前面的子表达式零次或一次</td></tr><tr><td style="text-align:center;">[...]</td><td style="text-align:center;">匹配括号中的任意一个字符。例如， &#39;[abc]&#39; 可以匹配 &quot;plain&quot; 中的 &#39;a&#39;。</td></tr><tr><td style="text-align:center;">[^...]</td><td style="text-align:center;">匹配不在括号中的其他字符。</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">可以在字符类中使用，来表示一个范围。例，[a-d]，可以匹配a或b或c或d</td></tr><tr><td style="text-align:center;">p1|p2|p3        </td><td style="text-align:center;">匹配 p1 或 p2 或 p3，在找到第一个匹配项时停止</td></tr><tr><td style="text-align:center;"><code>{n}</code></td><td style="text-align:center;">n为非负整数，匹配确定的n次</td></tr><tr><td style="text-align:center;"><code>{n,m}</code></td><td style="text-align:center;">m和n均为非负整数，n&lt;=m。最少匹配n次且最多匹配m次</td></tr><tr><td style="text-align:center;"><code>{n,}</code></td><td style="text-align:center;">匹配次数大于等于n</td></tr><tr><td style="text-align:center;">:</td><td style="text-align:center;">在字符集中使用冒号来指定子字符类。</td></tr></tbody></table><p><strong>匹配字符类：</strong></p><table><thead><tr><th>子字符类</th><th>描述</th></tr></thead><tbody><tr><td>[:alpha:]</td><td>匹配字符串中的大写和小写字母字符。例如，&#39;[0-9]{3}[[:alpha:]]{2}&#39; 匹配三个数字，后跟两个字母。</td></tr><tr><td>[:alnum:]</td><td>匹配字符串中的数字、大写和小写字母字符。例如，&#39;[[:alnum:]]+&#39; 匹配含有一个或多个字母和数字的字符串。</td></tr><tr><td>[:digit:]</td><td>匹配字符串中的数字。例如，&#39;[[:digit:]-]+&#39; 匹配含有一个或多个数字或横线的字符串。</td></tr><tr><td>[:lower:]</td><td>匹配字符串中的小写字母字符。例如，&#39;[[:lower:]]&#39; 不匹配 A，因为 A 为大写。</td></tr><tr><td>[:space:]</td><td>匹配单个空格 (&#39; &#39;)。</td></tr><tr><td>[:upper:]</td><td>匹配当前归类中的大写字母字符。例，&#39;[[:upper:]ab]&#39; 与以下其中一项匹配：任何大写字母、a 或 b。</td></tr><tr><td>[:whitespace:]</td><td>匹配一个空白字符，例如，空格、制表符、换页符和回车符。</td></tr><tr><td>[:ascii:]</td><td>匹配任何七位的 ASCII 字符（0 到 127 之间的顺序值）。</td></tr><tr><td>[:blank:]</td><td>匹配一个空白区或水平制表符。</td></tr><tr><td>[:cntrl:]</td><td>匹配顺序值小于 32 或字符值为 127 的 ASCII 字符（控制字符）。控制字符包括换行符、换页符、退格符等。</td></tr><tr><td>[:word:]</td><td>匹配字符串中的字母、数字或下划线字符。[[:word:]]等效于 [[:alnum:]_]。</td></tr><tr><td>[:punct:]</td><td>匹配其中一个字符： ! &quot; # $ % &amp; &#39; ( ) * + , - . / : ; &lt; = &gt; ? @ [ ] ^ _ ` {</td></tr><tr><td>[:graph:]</td><td>匹配打印字符。[[:graph:]]等效于[[:alnum:] [:punct:]]。</td></tr></tbody></table><p>例:</p><p>  1.在student表中，查询name字段是以&quot;ry&quot;结尾的记录</p><p>     select * from student where name regexp &#39;ry$&#39;;</p><p>  2.查询name字段包含a和y，且a和y之间只有一个字母的记录</p><p>     select * from student where name regexp &#39;a.y&#39;;</p><p>注意：</p><p>  1.使用正则表达式进行匹配时，要使用<strong>regexp</strong>关键字，且regexp子句总是返回0(没有匹配到)或1(匹配到了)。</p><p>  2.MySQL的正则表达式匹配不区分大小写(即，大写和小写都匹配)。为区分大小写，可以使用binary关键字。</p><p>     例：where name regexp binary &#39;^A&#39;；</p><p>  3.使用双反斜杠来引用具有特殊含义的字符</p><p>  4.[a-z0-9] 表示包含所有的小写字母和数字；[a-zA-Z] 表示匹配所有字母。</p>',17);function c(s,p){return e(),r("div",null,[d(" permalink: /MySQL/基础语法/正则表达式  "),l])}const g=t(a,[["render",c],["__file","80.正则表达式.html.vue"]]);export{g as default};
