const t=JSON.parse('{"key":"v-000df129","path":"/posts/interview/Java%E9%83%A8%E5%88%86/Java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86.html","title":"Java中的代理","lang":"zh-CN","frontmatter":{"title":"Java中的代理","author":{"name":"北斗星司"},"category":["面试题"],"tag":["Java"],"date":"2023-04-22T10:08:32.000Z","icon":"file","description":"Java代理模式 作用 使用代理对象来代替对真实对象的访问，这样可以在不修改原目标对象的前提下，提供额外的操作，扩展目标对象的功能 主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后可以增加一些自定义的操作。 静态代理 静态代理中，对目标对象的每个方法的增强都是手动完成的，非常不灵活(比如接口一旦新增加方法，目标对象和 代理对象都要进行修改)且麻烦(需要对每个目标类都单独写一个代理类)。","head":[["meta",{"property":"og:url","content":"https://mtgd106.github.io/posts/interview/Java%E9%83%A8%E5%88%86/Java%E4%B8%AD%E7%9A%84%E4%BB%A3%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"北斗星司"}],["meta",{"property":"og:title","content":"Java中的代理"}],["meta",{"property":"og:description","content":"Java代理模式 作用 使用代理对象来代替对真实对象的访问，这样可以在不修改原目标对象的前提下，提供额外的操作，扩展目标对象的功能 主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后可以增加一些自定义的操作。 静态代理 静态代理中，对目标对象的每个方法的增强都是手动完成的，非常不灵活(比如接口一旦新增加方法，目标对象和 代理对象都要进行修改)且麻烦(需要对每个目标类都单独写一个代理类)。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-06T06:59:59.000Z"}],["meta",{"property":"article:author","content":"北斗星司"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2023-04-22T10:08:32.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-06T06:59:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java中的代理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-22T10:08:32.000Z\\",\\"dateModified\\":\\"2023-11-06T06:59:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"北斗星司\\"}]}"]]},"headers":[{"level":2,"title":"Java代理模式","slug":"java代理模式","link":"#java代理模式","children":[{"level":3,"title":"作用","slug":"作用","link":"#作用","children":[]},{"level":3,"title":"静态代理","slug":"静态代理","link":"#静态代理","children":[]},{"level":3,"title":"动态代理","slug":"动态代理","link":"#动态代理","children":[]},{"level":3,"title":"对比","slug":"对比","link":"#对比","children":[]}]}],"git":{"createdTime":1699253999000,"updatedTime":1699253999000,"contributors":[{"name":"mtgd106","email":"1487722388@qq.com","commits":1}]},"readingTime":{"minutes":9.65,"words":1931},"filePathRelative":"posts/interview/Java部分/Java中的代理.md","localizedDate":"2023年4月22日","excerpt":"<h2> Java代理模式</h2>\\n<h3> 作用</h3>\\n<p><strong>使用代理对象来代替对真实对象的访问，这样可以在不修改原目标对象的前提下，提供额外的操作，扩展目标对象的功能</strong></p>\\n<p><strong>主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后可以增加一些自定义的操作。</strong></p>\\n<h3> 静态代理</h3>\\n<p>静态代理中，<strong>对目标对象的每个方法的增强都是手动完成的</strong>，非常不灵活(比如接口一旦新增加方法，目标对象和</p>\\n<p>代理对象都要进行修改)且麻烦(<strong>需要对每个目标类都单独写一个代理类</strong>)。</p>","copyright":{"author":"北斗星司"},"autoDesc":true}');export{t as data};
