import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,f as t,a as s}from"./app-a89b456a.js";const o="/assets/image-20230426100314333-bc721243.png",p="/assets/collection-7-a9a49e87.png",c="/assets/collection-8-43014dac.png",d="/assets/collection-14-4636206d.png",i="/assets/hashmap-interview-03-591fba12.png",r="/assets/image-20230606201117428-d97c2d72.png",l="/assets/collection-16-f13be074.jpg",u="/assets/collection-20-ec14f815.png",h="/assets/image-20230815113713617-05663f40.png",g="/assets/image-20230815113813883-c8d60d21.png",k="/assets/image-20230426100346755-c41beeb2.png",m="/assets/image-20230815114233919-cdc0d9d5.png",y={},b=s('<h2 id="继承关系" tabindex="-1"><a class="header-anchor" href="#继承关系" aria-hidden="true">#</a> 继承关系</h2><figure><img src="'+o+'" alt="image-20230426100314333" tabindex="0" loading="lazy"><figcaption>image-20230426100314333</figcaption></figure><h2 id="底层数据结构" tabindex="-1"><a class="header-anchor" href="#底层数据结构" aria-hidden="true">#</a> 底层数据结构</h2><h4 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> <strong>List</strong></h4><ul><li><p><code>ArrayList</code>： Object[] 数组，允许存入null元素</p></li><li><p><code>Vector</code>：Object[] 数组</p></li><li><p><code>LinkedList</code>： 双向链表(<strong>JDK1.6 之前为双向循环链表，JDK1.7 取消了循环</strong>)</p></li></ul><h4 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> <strong>Set</strong></h4><p><code> HashSet</code>(无序，唯一)： 基于 <code>HashMap</code> 实现的，底层采用 <code>HashMap</code> 来保存元素</p><p><code>LinkedHashSet</code>： <code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，并且其内部是通过 <code>LinkedHashMap</code> 来实现的。</p><p>    有点类似于 <code>LinkedHashMap</code> 其内部是基于 <code>HashMap</code> 实现一样。</p><p><code>TreeSet</code>(有序，唯一)： 红黑树(自平衡的排序二叉树)</p><h4 id="queue" tabindex="-1"><a class="header-anchor" href="#queue" aria-hidden="true">#</a> <strong>Queue</strong></h4><ul><li><p><code>PriorityQueue</code>： Object[]数组来实现二叉堆</p></li><li><p><code>ArrayQueue</code>： Object[] 数组 + 双指针</p></li></ul><h4 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> <strong>Map</strong></h4><ul><li><p>HashMap：</p><p>JDK1.8 之前 <code>HashMap</code> 由数组+链表组成，数组是 <code>HashMap</code> 的主体，链表则是为了解决哈希冲突(&quot;拉链法&quot;)。</p><p>JDK1.8 以后在解决哈希冲突时有了较大的变化，<strong>当链表长度大于阈值(默认为 8)且当前数组的长度大于 64时，</strong></p><p><strong>会将链表转化为红黑树，以减少搜索时间。如果数组长度小于64，则会进行扩容。</strong></p></li><li><p>LinkedHashMap：</p><p><code>LinkedHashMap</code> 继承自 <code>HashMap</code>，所以它的底层仍然是基于拉链式的散列结构，即，由数组和链表或红黑树组成。</p><p>另外，<code>LinkedHashMap</code> 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。</p><p>同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。</p></li><li><p>Hashtable： 数组+链表组成的，数组是 Hashtable 的主体，链表则是为了解决哈希冲突。</p></li><li><p>TreeMap： 红黑树(自平衡的排序二叉树)</p></li></ul><h2 id="collection" tabindex="-1"><a class="header-anchor" href="#collection" aria-hidden="true">#</a> Collection</h2><h3 id="list实现类" tabindex="-1"><a class="header-anchor" href="#list实现类" aria-hidden="true">#</a> List实现类</h3><p><strong>1.ArrayList 和 Vector 的区别</strong></p><ul><li><p><code>ArrayList</code> 是 <code>List</code> 的主要实现类，底层使用 <code>Object[]</code>存储，适用于频繁的查找工作，线程不安全 ；</p></li><li><p><code>Vector</code> 是 <code>List</code> 的古老实现类，底层使用<code>Object[]</code> 存储，是线程安全的；</p></li></ul><p><strong>2.ArrayList 与 LinkedList 区别</strong></p><ul><li><p><strong>是否保证线程安全：</strong> <code>ArrayList</code> 和 <code>LinkedList</code> 都是不同步的，也就是不保证线程安全；</p></li><li><p><strong>底层数据结构：</strong> <code>ArrayList</code> 底层使用的是 <strong><code>Object</code> 数组</strong>；<code>LinkedList</code> 底层使用的是 <strong>双向链表</strong></p></li><li><p>插入和删除是否受元素位置的影响：</p><ul><li><p><code>ArrayList</code> 采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。 比如：执行<code>add(E e)</code>方法时，</p><p><code>ArrayList</code> 会默认将指定的元素追加到此列表的末尾，这种情况时间复杂度就是 O(1)。</p><p>但是如果要<strong>在指定位置 i 插入和删除元素的话</strong>(<code>add(int index, E element)</code>)<strong>时间复杂度就为 O(n-i)。</strong></p><p>因为在进行上述操作的时候，集合中第 i 和第 i 个元素之后的(n-i)个元素都要向后/向前移动一位。</p></li><li><p><code>LinkedList</code> 采用链表存储，所以，如果是在头尾插入或者删除元素，则不受元素位置的影响</p><p>(<code>add(E e)</code>、<code>addFirst(E e)</code>、<code>addLast(E e)</code>、<code>removeFirst()</code> 、 <code>removeLast()</code>)，时间复杂度为 O(1)，</p><p>如果是要<strong>在指定位置插入和删除元素</strong>的话(<code>add(int index, E element)</code>，<code>remove(Object o)</code>)， <strong>时间复杂度为 O(n)</strong></p><p><strong>因为需要先移动到指定位置再插入</strong>。</p></li></ul></li><li><p><strong>是否支持快速随机访问：</strong> ArrayList(实现了RandomAccess接口)支持高效的随机元素访问，LinkedList 不支持。</p><p>​   快速随机访问就是通过元素的序号快速获取元素对象(对应于<code>get(int index)</code>方法)。</p></li><li><p><strong>内存空间占用：</strong></p><p>ArrayList 的空间浪费主要体现在在 list 列表的结尾会预留一定的容量空间，而 LinkedList 的空间花费则体现在</p><p>它的每一个元素都需要消耗比 ArrayList 更多的空间(因为要存放直接后继和直接前驱以及数据)</p></li></ul><p><strong>3.ArrayList的扩容机制</strong></p><p>  ArrayList是基于数组的集合，数组的容量是在定义的时候确定的，如果数组满了，再插入，就会发生溢出。</p><p>  所以在插入时候，会先检查是否需要扩容，如果当前容量+1超过数组长度，就会进行扩容。</p><p>  ArrayList的扩容是创建一个<strong>1.5倍</strong>的新数组，然后把原数组的值拷贝过去。</p><p><strong>4.快速失败(fail-fast)和安全失败(fail-safe)</strong></p><p> <strong>快速失败(fail—fast)：</strong> 快速失败是Java集合的一种错误检测机制</p><ul><li><p>在用迭代器遍历一个集合对象时，如果线程A遍历过程中，线程B对集合对象的内容进行了修改(增加、删除、修改)，</p><p>则会抛出Concurrent Modification Exception。</p></li><li><p>原理：迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 <code>modCount</code> 变量。集合在被遍历期间，</p><p>如果内容发生变化，就会改变<code>modCount</code>的值。每当迭代器使用hashNext()/next()遍历下一个元素之前，</p><p>都会检测modCount变量是否为expectedmodCount值，是的话就返回遍历；否则抛出异常，终止遍历。</p></li><li><p>注意：这里异常的抛出条件是检测到 modCount != expectedmodCount 这个条件。如果集合发生变化时，</p><p>  将modCount值刚好又设置为了expectedmodCount值，则异常不会抛出。</p><p>  因此，不能依赖于这个异常是否抛出而进行并发操作的编程，这个异常只建议用于检测并发修改的bug。</p></li></ul><p> <strong>安全失败(fail—safe)</strong></p><ul><li><p>采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是<strong>先复制原有集合内容，在拷贝的集合上进行遍历</strong>。</p></li><li><p>原理：由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发Concurrent Modification Exception。</p></li><li><p>缺点：虽然避免了Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，</p><p>​   即：<strong>迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</strong></p></li></ul><h4 id="_5-copyonwritearraylist" tabindex="-1"><a class="header-anchor" href="#_5-copyonwritearraylist" aria-hidden="true">#</a> <strong>5.CopyOnWriteArrayList</strong></h4><p>CopyOnWriteArrayList是线程安全版的ArrayList。</p><p>CopyOnWriteArrayList采用了一种读写分离的并发策略，容器允许并发读，读操作是无锁的，性能较高。</p><p>在进行写操作(比如添加一个元素)时，会<strong>先将当前容器复制一份，然后在新副本上执行写操作</strong>，<strong>结束之后再将原容器的引用指向新容器。</strong></p><p>​ <img src="'+p+`" alt="CopyOnWriteArrayList原理" style="zoom:62%;"></p><h3 id="set实现类" tabindex="-1"><a class="header-anchor" href="#set实现类" aria-hidden="true">#</a> Set实现类</h3><h4 id="_1-comparable-和-comparator-的区别" tabindex="-1"><a class="header-anchor" href="#_1-comparable-和-comparator-的区别" aria-hidden="true">#</a> <strong>1.Comparable 和 Comparator 的区别</strong></h4><ul><li><p><code>Comparable</code> 接口出自java.lang包，它有一个 <code>compareTo(Object obj)</code>方法用来排序</p></li><li><p><code>Comparator</code> 接口出自 java.util 包，它有一个<code>compare(Object obj1, Object obj2)</code>方法用来排序</p></li></ul><p>例：重写 compareTo 方法实现按年龄来排序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * T重写compareTo方法实现按年龄来排序
     */</span>
    <span class="token comment">//大于时返回1，则按升序排列；如果大于时返回-1，则按降序排列</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Person</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&gt;</span> o<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">&lt;</span> o<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-hashset、linkedhashset-和-treeset-三者的异同" tabindex="-1"><a class="header-anchor" href="#_2-hashset、linkedhashset-和-treeset-三者的异同" aria-hidden="true">#</a> <strong>2.HashSet、LinkedHashSet 和 TreeSet 三者的异同</strong></h4><ul><li><p><code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code> 都是 <code>Set</code> 接口的实现类，都能保证元素唯一，并且<strong>都是线程不安全的</strong>。</p></li><li><p><code>HashSet</code>、<code>LinkedHashSet</code> 和 <code>TreeSet</code> 的主要区别在于底层数据结构不同。</p><p><code>HashSet</code> 的底层数据结构是哈希表(基于 <code>HashMap</code> 实现)。</p><p><code>LinkedHashSet</code> 的底层数据结构是链表和哈希表，元素的插入和取出顺序满足 FIFO。</p><p><code>TreeSet</code> 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。</p></li><li><p>底层数据结构的不同又导致这三者的应用场景不同。</p><p>HashSet用于不需要保证元素插入和取出顺序的场景，LinkedHashSet用于保证元素的插入和取出顺序满足FIFO的场景，</p><p>TreeSet用于支持对元素自定义排序规则的场景。</p></li></ul><h3 id="queue-1" tabindex="-1"><a class="header-anchor" href="#queue-1" aria-hidden="true">#</a> Queue</h3><h4 id="_1-queue-与-deque-的区别" tabindex="-1"><a class="header-anchor" href="#_1-queue-与-deque-的区别" aria-hidden="true">#</a> <strong>1.Queue 与 Deque 的区别</strong></h4><ul><li><p><code>Queue</code> 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 <strong>先进先出(FIFO)</strong> 规则。</p><p><code>Queue</code> 扩展了 <code>Collection</code> 的接口，根据 <strong>因为容量问题而导致操作失败后处理方式的不同</strong> 可以分为两类方法：</p><p>一种在操作失败后会抛出异常，另一种则会返回特殊值。</p></li></ul><table><thead><tr><th style="text-align:center;">Queue 接口</th><th style="text-align:center;">抛出异常</th><th style="text-align:center;">返回特殊值</th></tr></thead><tbody><tr><td style="text-align:center;">插入队尾</td><td style="text-align:center;">add(E e)</td><td style="text-align:center;">offer(E e)</td></tr><tr><td style="text-align:center;">删除队首</td><td style="text-align:center;">remove()</td><td style="text-align:center;">poll()</td></tr><tr><td style="text-align:center;">查询队首元素</td><td style="text-align:center;">element()</td><td style="text-align:center;">peek()</td></tr></tbody></table><ul><li><p><strong><code>Deque</code> 是双端队列，在队列的两端均可以插入或删除元素。</strong></p><p><code>Deque</code> 扩展了 <code>Queue</code> 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：</p></li></ul><table><thead><tr><th style="text-align:center;">Deque接口</th><th style="text-align:center;">抛出异常</th><th style="text-align:center;">返回特殊值</th></tr></thead><tbody><tr><td style="text-align:center;">插入队首</td><td style="text-align:center;">addFirst(E e)</td><td style="text-align:center;">offerFirst(E e)</td></tr><tr><td style="text-align:center;">插入队尾</td><td style="text-align:center;">addLast(E e)</td><td style="text-align:center;">offerLast(E e)</td></tr><tr><td style="text-align:center;">删除队首</td><td style="text-align:center;">removeFirst()</td><td style="text-align:center;">pollFirst()</td></tr><tr><td style="text-align:center;">删除队尾</td><td style="text-align:center;">removeLast()</td><td style="text-align:center;">pollLast()</td></tr><tr><td style="text-align:center;">查询队首元素</td><td style="text-align:center;">getFirst()</td><td style="text-align:center;">peekFirst()</td></tr><tr><td style="text-align:center;">查询队尾元素</td><td style="text-align:center;">getLast()</td><td style="text-align:center;">peekLast()</td></tr></tbody></table><p><code>Deque</code> 还提供有 <code>push()</code> 和 <code>pop()</code> 等其他方法，可用于模拟栈。</p><h4 id="_2-arraydeque-与-linkedlist-的区别" tabindex="-1"><a class="header-anchor" href="#_2-arraydeque-与-linkedlist-的区别" aria-hidden="true">#</a> <strong>2.ArrayDeque 与 LinkedList 的区别</strong></h4><p><code>ArrayDeque</code> 和 <code>LinkedList</code> 都实现了 <code>Deque</code> 接口，两者都具有队列的功能。</p><ul><li><p><code>ArrayDeque</code> 是基于可变长的数组和双指针来实现，而 <code>LinkedList</code> 则通过链表来实现。</p></li><li><p><code>ArrayDeque</code> 不支持存储 <code>NULL</code> 数据，但 <code>LinkedList</code> 支持。</p></li><li><p><code>ArrayDeque</code> 插入时可能存在扩容过程， 不过均摊后的插入操作依然为 O(1)。</p><p>虽然 <code>LinkedList</code> 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。</p></li></ul><p>从性能的角度上，选用 <code>ArrayDeque</code> 来实现队列要比 <code>LinkedList</code> 更好。此外，<code>ArrayDeque</code> 也可以用于实现栈。</p><h4 id="_3-priorityqueue" tabindex="-1"><a class="header-anchor" href="#_3-priorityqueue" aria-hidden="true">#</a> <strong>3.PriorityQueue</strong></h4><p><code>PriorityQueue</code> 与 <code>Queue</code> 的区别在于元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。</p><p>其相关的一些要点：</p><ul><li><p><code>PriorityQueue</code> 利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据</p></li><li><p><code>PriorityQueue</code> 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。</p></li><li><p><code>PriorityQueue</code> 是非线程安全的，且不支持存储 <code>NULL</code> 和 <code>non-comparable</code> 的对象。</p></li><li><p><code>PriorityQueue</code> 默认是小顶堆，但可以接收一个 <code>Comparator</code> 作为构造参数，从而来自定义元素优先级的判定。</p></li></ul><h2 id="map-1" tabindex="-1"><a class="header-anchor" href="#map-1" aria-hidden="true">#</a> Map</h2><h3 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> HashMap</h3><h4 id="_1-hashmap-和-hashtable-的区别" tabindex="-1"><a class="header-anchor" href="#_1-hashmap-和-hashtable-的区别" aria-hidden="true">#</a> <strong>1.HashMap 和 Hashtable 的区别</strong></h4><ul><li><p>线程是否安全：</p><p><code>HashMap</code> 是非线程安全的，<code>Hashtable</code> 是线程安全的，</p><p>因为 <code>Hashtable</code> 内部的方法基本都经过<code>synchronized</code> 修饰。(如果要保证线程安全的话就使用 <code>ConcurrentHashMap</code> )；</p></li><li><p>效率： 因为线程安全的问题，<code>HashMap</code> 要比 <code>Hashtable</code> 效率高一点。</p></li><li><p>对 Null key 和 Null value 的支持：</p><p>​ HashMap 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；</p><p>​ Hashtable 不允许有 null 键和 null 值，否则会抛出 <code>NullPointerException</code>。</p></li><li><p>初始容量大小和每次扩充容量大小的不同 ：</p><p>① 创建时如果不指定容量初始值，Hashtable 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。</p><p>​    <strong>HashMap 默认的初始化大小为 16，之后每次扩充，容量变为原来的 2 倍。</strong></p><p>② 创建时如果给定了容量初始值，那么 Hashtable 会直接使用给定的大小， HashMap 会将其扩充为 2 的幂次方大小，</p><p>​    (<code>HashMap</code> 中的<code>tableSizeFor()</code>方法实现这个功能，例，tableSizeFor(10) = 16，tableSizeFor(20) = 32)。</p><p>​    <strong>即， HashMap 总是使用 2 的幂作为哈希表的大小。</strong></p></li><li><p><strong>底层数据结构：</strong></p><p>JDK1.8 以后的 <code>HashMap</code> 在解决哈希冲突时有了较大的变化，当链表长度大于阈值(默认为 8)时，将链表转化为红黑树。</p><img src="`+c+'" alt="jdk1.8 hashmap数据结构示意图" style="zoom:67%;"><p>其中，桶数组是用来存储数据元素，链表是用来解决冲突，红黑树是为了提高查询的效率。</p><ul><li><p>数据元素通过映射关系，也就是散列函数，映射到桶数组对应索引的位置</p></li><li><p>如果发生冲突，从冲突的位置拉一个链表，插入冲突的元素</p></li><li><p>如果链表长度&gt;=8 &amp; 数组长度&gt;=64，链表转为红黑树</p></li><li><p>如果链表长度大于8，但数组长度小于64，则先将数组进行扩容</p></li><li><p>如果红黑树节点个数&lt;=6 ，则再次转回为链表</p></li></ul></li></ul><h4 id="_2-hashmap-和-hashset-区别" tabindex="-1"><a class="header-anchor" href="#_2-hashmap-和-hashset-区别" aria-hidden="true">#</a> <strong>2.HashMap 和 HashSet 区别</strong></h4><p><code>HashSet</code> 底层就是基于 <code>HashMap</code> 实现的。</p><p><code>HashSet</code> 的源码非常非常少，因为除了 <code>clone()</code>、<code>writeObject()</code>、<code>readObject()</code>是<code>HashSet</code> 不得不自己实现之外，其他方法都是直接调用 <code>HashMap</code> 中的方法。</p><table><thead><tr><th style="text-align:center;">HashMap</th><th style="text-align:center;">HashSet</th></tr></thead><tbody><tr><td style="text-align:center;">实现了 Map 接口</td><td style="text-align:center;">实现 Set 接口</td></tr><tr><td style="text-align:center;">存储键值对</td><td style="text-align:center;">仅存储对象</td></tr><tr><td style="text-align:center;">调用 put()向 map 中添加元素</td><td style="text-align:center;">调用 add()方法向 Set中添加元素</td></tr><tr><td style="text-align:center;">HashMap使用键(Key)计算 hashcode</td><td style="text-align:center;">HashSet使用成员对象来计算 hashcode值，对于两个对象来说 hashcode 可能相同，所以equals()方法用来判断对象的相等性</td></tr></tbody></table><h4 id="_3-hashmap查找元素及插入元素" tabindex="-1"><a class="header-anchor" href="#_3-hashmap查找元素及插入元素" aria-hidden="true">#</a> <strong>3.HashMap查找元素及插入元素</strong></h4><p>查找元素：</p><p>​ <img src="'+d+'" alt="HashMap查找流程图" style="zoom:80%;"></p><p>​ 插入元素：</p><p>​ <img src="'+i+`" alt="img" loading="lazy"></p><h4 id="_4-hashmap的哈希函数" tabindex="-1"><a class="header-anchor" href="#_4-hashmap的哈希函数" aria-hidden="true">#</a> <strong>4.HashMap的哈希函数</strong></h4><p><strong>哈希值的计算过程</strong></p><p>​   HashMap的哈希函数是先拿到 key 的hashcode，是一个32位的int类型的数值，然后让hashcode的高16位和低16位</p><p>​    进行异或操作。这么设计是为了降低哈希碰撞的概率。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             
  <span class="token keyword">int</span> h<span class="token punctuation">;</span>        
      
  <span class="token comment">// key的hashCode和key的hashCode右移16位做异或运算              </span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>存储下标的计算过程</strong></p><p>​ key.hashCode() 函数调用的是key键值类型自带的哈希函数，返回 int 型散列值。</p><p>​ int 值范围为 <strong>-2147483648~2147483647</strong>，加起来大概 40 亿的映射空间。只要哈希函数映射得比较均匀松散，一般应用</p><p>​ 是很难出现碰撞的。但问题是一个 40 亿长度的数组，内存是放不下的。</p><p>​ 假如 HashMap 数组的初始大小才 16，就需要<strong>对数组的长度进行取模运算，得到的余数才能用来访问数组下标</strong>。</p><p>​ 源码中<strong>模运算就是把散列值和 (数组长度 - 1) 做一个 &quot;<code>&amp;</code>&quot; 操作</strong>，位运算比取余 % 运算要快，并且结果是相同的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">indexFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     
  <span class="token keyword">return</span> h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也是 HashMap 的数组长度要取 2 的整数幂的原因。因为这样(数组长度 - 1)正好相当于一个 “低位掩码”。</p><p><strong>与 操作的结果就是散列值的高位全部归零，只保留低位值，用来做数组下标访问。</strong></p><p>​ 以初始长度 16 为例，16-1=15。2 进制表示是<code> 0000 0000 0000 0000 0000 0000 0000 1111</code>。</p><p>​ 和某个散列值做 <code>与</code> 操作如下，结果就是截取了最低的四位值。</p><p>​ <img src="`+r+'" alt="image-20230606201117428" style="zoom:100%;"></p><p>但是这样就算散列值分布再松散，要是只取最后几位的话，碰撞也会很严重。这时候就要用到 <code>扰动函数</code> 了。</p><p>​ <img src="'+l+'" alt="扰动函数示意图" loading="lazy"></p><p>右移 16 位，正好是 32bit 的一半，自己的高半区和低半区做异或，就是为了混合原始哈希码的高位和低位，以此来加大低位的随机性。而且混合后的低位掺杂了高位的部分特征，这样高位的信息也被变相保留下来。</p><h4 id="_5-哈希冲突的解决方法" tabindex="-1"><a class="header-anchor" href="#_5-哈希冲突的解决方法" aria-hidden="true">#</a> <strong>5.哈希冲突的解决方法</strong></h4><ol><li>链地址法</li></ol><p>​   在冲突的位置拉一个链表，把冲突的元素放进去。</p><ol start="2"><li>开放定址法</li></ol><p>​   开放定址法就是从冲突的位置再接着往下找，给冲突元素找个空位。</p><p>​   找到空闲位置的方法也有很多种：</p><p>​    线行探查法: 从冲突的位置开始，依次判断下一个位置是否空闲，直至找到空闲位置</p><p>​    平方探查法: 从冲突的位置x开始，第一次增加<code>1^2</code>个位置，第二次增加<code>2^2</code>…，直至找到空闲的位置</p><ol start="3"><li>再哈希法</li></ol><p>​   换种哈希函数，重新计算冲突元素的地址。</p><ol start="4"><li>建立公共溢出区</li></ol><p>​   将哈希表分为公共表和溢出表，当溢出发生时，将所有溢出数据统一放到溢出区。</p><p>​ <img src="'+u+'" alt="开放定址法" style="zoom:80%;"></p><h4 id="_6-hashmap的线程安全问题" tabindex="-1"><a class="header-anchor" href="#_6-hashmap的线程安全问题" aria-hidden="true">#</a> <strong>6.HashMap的线程安全问题</strong></h4><p>HashMap不是线程安全的，可能会发生这些问题：</p><ul><li><p><strong>多线程下扩容死循环</strong>。JDK1.7 中的 HashMap 使用头插法插入元素，在多线程的环境下，扩容的时候有可能导致</p><p>环形链表的出现，形成死循环。因此，<strong>JDK1.8 使用尾插法插入元素</strong>，在扩容时会保持链表元素原本的顺序，不会出现环形链表的问题。</p></li><li><p><strong>多线程下的put操作可能导致元素的丢失</strong>。多线程同时执行 put 操作，如果计算出来的索引位置是相同的，</p><p>就会造成前一个 key 被后一个 key 覆盖，从而导致元素的丢失。此问题在 JDK 1.7 和 JDK 1.8 中都存在。</p></li><li><p><strong>put 和 get操作并发时，可能导致get到的数据为null</strong>。线程 1 执行 put 时，因为元素个数超出 threshold</p><p>而导致 rehash，线程 2 此时执行get操作，有可能导致这个问题，因为此时元素还没有转移到新的表中。</p><p>这个问题在 JDK 1.7 和 JDK 1.8 中都存在。</p><p><strong>rehash：Hash表在扩容之后，会将原来的对象重新计算下标然后分配到新的数组中。</strong></p></li></ul><p><strong>解决：</strong></p><p>Java 中有 HashTable、Collections.synchronizedMap、以及 ConcurrentHashMap 可以实现线程安全的 Map。</p><ul><li><p>HashTable 是直接在操作方法上加 synchronized 关键字，锁住整个table数组，粒度比较大；</p></li><li><p>Collections.synchronizedMap 是使用 Collections 集合工具的内部类，通过传入Map封装出一个SynchronizedMap对象</p><p>内部定义了一个对象锁，方法内通过对象锁实现；</p></li><li><p>ConcurrentHashMap 在jdk1.7中使用分段锁，在jdk1.8中使用CAS+synchronized。</p></li></ul><h4 id="_7-加载因子" tabindex="-1"><a class="header-anchor" href="#_7-加载因子" aria-hidden="true">#</a> <strong>7.加载因子</strong></h4><p>哈希表这样的数据结构容易产生两个问题：</p><ul><li><p>数组的容量过小，经过哈希计算后的下标，容易出现冲突；</p></li><li><p>数组的容量过大，导致空间利用率不高。</p></li></ul><p>加载因子是用来表示 HashMap 中数据的填满程度：<strong>加载因子 = 填入哈希表中的数据个数 / 哈希表的长度</strong></p><p>这就意味着：</p><ul><li><p>加载因子越小，填充的数据就越少，哈希冲突的几率就减少了，但浪费了空间，而且还会提高扩容的触发几率；</p></li><li><p>加载因子越大，填充的数据就越多，空间利用率就高，但哈希冲突的几率就变大了。</p></li></ul><p>HashMap 是通过拉链法来解决哈希冲突的，为了减少冲突发生的概率，当 HashMap 的数组长度达到一个<strong>临界值</strong>的时候，</p><p>就会触发扩容，扩容后会将之前小数组中的元素转移到大数组中，这是一个相当耗时的操作。</p><p>这个临界值由什么来确定呢？</p><blockquote><p>临界值 = 初始容量 * 加载因子</p></blockquote><p>例，一开始，HashMap 的容量是 16，加载因子是 0.75，即，当 容量达到 16*0.75=12 时，会触发扩容机制。</p><h4 id="_8-计算key的hashcode" tabindex="-1"><a class="header-anchor" href="#_8-计算key的hashcode" aria-hidden="true">#</a> <strong>8.计算key的hashcode</strong></h4><p>计算键的哈希码(HashCode)是实现哈希表的关键步骤，可以使用以下方法来计算：</p><ol><li><p>对于基本数据类型：</p><ul><li><p>对于整数类型，直接将该整数作为哈希码。</p></li><li><p>对于浮点数类型，可以使用Float.floatToIntBits(floatValue)或 Double.doubleToLongBits(doubleValue)方法来获取位级的表示，并将其作为哈希码。</p></li><li><p>对于字符类型，可以使用charAt(0)方法获取字符对应的ASCII码作为哈希码。</p></li></ul></li><li><p>对于引用类型：</p><ul><li><p>对于字符串类型，可以使用String类提供的hashCode()方法来获取哈希码。</p></li><li><p>对于其他引用类型，如果类重写了hashCode()方法，则可以直接调用该方法获取哈希码。</p><p>​ 否则，将该引用类型的内存地址作为哈希码。</p></li></ul></li><li><p>自定义类：</p><ul><li><p>如果是自定义类，通常需要重写hashCode()方法。在hashCode()方法中，可以根据类的属性计算哈希码。</p></li><li><p>通常会基于类的每个属性计算哈希码，并结合异或、加法等运算来不断累加结果，以产生唯一的哈希码。</p><p><strong>确保具有不同属性的对象生成不同的哈希码，以避免冲突。</strong></p></li></ul></li></ol><p>哈希码应该满足以下要求：</p><ul><li><p>对于相同的对象，始终返回相同的哈希码。</p></li><li><p>对于不同的对象，如果可能的话，应该返回不同的哈希码，以减少哈希冲突的概率。</p></li><li><p>哈希码应该在整个哈希表的范围内分布均匀，以获取更好的性能。</p></li></ul><h3 id="concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap" aria-hidden="true">#</a> ConcurrentHashMap</h3><p><strong>底层数据结构：</strong></p><p>   JDK1.7 的 <code>ConcurrentHashMap</code> 底层采用 <strong>分段的数组+链表</strong> 实现，JDK1.8 采用的数据结构跟 HashMap1.8的结构一样，</p><p>   数组+链表/红黑二叉树。</p><p><strong>实现线程安全的方式：</strong></p><ul><li><p>在 JDK1.7 的时候，<code>ConcurrentHashMap</code> 对整个桶数组进行了分割分段(<code>Segment</code>，分段锁)，每一把锁只锁容器</p><p>中的一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。</p><p>首先将数据分为一段一段(这个“段”就是 <code>Segment</code>)的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。</p><p><strong>ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成</strong>。</p><p><code>Segment</code> 继承了 <code>ReentrantLock</code>，所以 <code>Segment</code> 是一种可重入锁，扮演锁的角色。<code>HashEntry</code> 用于存储键值对数据。</p><p>一个 <code>ConcurrentHashMap</code> 里包含一个 <code>Segment</code> 数组，<code>Segment</code> 的个数一旦<strong>初始化就不能改变</strong>。</p><p><code>Segment</code> 数组的大小默认是16，也就是说默认可以同时支持 16 个线程并发写。</p><p>​</p><p>​ <img src="'+h+'" alt="image-20230815113713617" style="zoom:90%;"></p></li></ul><p>​ <img src="'+g+'" alt="image-20230815113813883" style="zoom:45%;"></p><ul><li><p>到了 JDK1.8 的时候，<code>ConcurrentHashMap</code> 已经抛弃了 <code>Segment</code> 的概念，而是直接用 <code>Node</code> 数组+链表+红黑树的</p><p>数据结构来实现，并发控制使用 synchronized 和 CAS 来操作。整个看起来就像是优化过且线程安全的 <code>HashMap</code>。</p></li></ul><p>​</p><p>​</p><p>​ <img src="'+k+'" alt="image-20230426100346755" loading="lazy"></p><p>​ <img src="'+m+'" alt="image-20230815114233919" style="zoom:45%;"></p><p>​ <code>ConcurrentHashMap</code> 取消了 <code>Segment</code> 分段锁，采用 <code>Node + CAS + synchronized</code> 来保证并发安全。</p><p>​ 数据结构跟 <code>HashMap</code> 1.8 的结构类似，数组+链表/红黑二叉树。</p><p><strong>为什么是线程安全的</strong></p><p>ConcurrentHashMap是线程安全的，因为它使用了锁分离技术，即将一个大的锁分成多个小的锁，每个小的锁只锁定</p><p>一个桶(bucket)或一组桶，不同的线程可以同时访问不同的桶或一组桶，从而提高了并发性能。</p><p>此外，ConcurrentHashMap还使用了CAS(Compare andSwap)算法来保证线程安全，CAS是一种无锁算法，可以避免锁的竞争，提高并发性能。</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h3><ol><li><p>不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对</p><p>Iterator 对象加锁。foreach 语法底层其实还是依赖 <code>Iterator</code> 。不过， <code>remove/add</code> 操作直接调用的是集合自己的</p><p>方法，而不是 <code>Iterator</code> 的 <code>remove/add</code>方法。这就导致 <code>Iterator</code> 发现自己有元素被 <code>remove/add</code> ，会抛出一个</p></li></ol><p>​  <code>ConcurrentModificationException</code> 来提示用户发生了并发修改异常。这就是单线程状态下产生的 <strong>fail-fast 机制</strong>。</p><ol start="2"><li><p><strong>判断所有集合内部的元素是否为空，使用 <code>isEmpty()</code> 方法，而不是 <code>size()==0</code> 的方式。</strong></p></li><li><p><strong>使用集合转数组的方法，必须使用集合的 <code>toArray(T[] array)</code>，传入的是类型完全一致、长度为 0 的空数组</strong></p></li><li><p>使用工具类 <code>Arrays.asList()</code> 把数组转换成集合时，不能使用其修改集合相关的方法， 它的 <code>add/remove/clear</code> 方法会抛出 <code>UnsupportedOperationException</code> 异常。</p></li></ol>',146);function v(x,H){return a(),n("div",null,[t("permalink: /面试/Java/集合框架  "),b])}const _=e(y,[["render",v],["__file","集合框架.html.vue"]]);export{_ as default};
