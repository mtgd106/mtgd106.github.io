const n=JSON.parse('{"key":"v-7770a1ed","path":"/posts/interview/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","title":"单例模式","lang":"zh-CN","frontmatter":{"title":"单例模式","author":{"name":"北斗星司"},"category":["面试题"],"tag":["设计模式"],"date":"2023-04-22T10:08:32.000Z","icon":"file","description":"单例模式的实现 饿汉式(静态变量方式) 优点：写法比较简单，在类装载的时候就完成了实例化。不存在线程安全问题。 缺点：在类装载的时候就完成了实例化，没有达到Lazy Loading 的效果。       如果从始至终从未使用过这个实例，会造成内存的浪费。 结论：这种方法可以使用，但可能会造成内存浪费。 class Singleton1 { //1. 构造器私有化, 禁止外部进行new操作 private Singleton1() { } //2.本类内部创建对象实例 private final static Singleton1 instance = new Singleton1(); //3. 提供一个公有的静态方法，返回实例对象 public static Singleton1 getInstance() { return instance; } }","head":[["meta",{"property":"og:url","content":"https://mtgd106.github.io/posts/interview/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"北斗星司"}],["meta",{"property":"og:title","content":"单例模式"}],["meta",{"property":"og:description","content":"单例模式的实现 饿汉式(静态变量方式) 优点：写法比较简单，在类装载的时候就完成了实例化。不存在线程安全问题。 缺点：在类装载的时候就完成了实例化，没有达到Lazy Loading 的效果。       如果从始至终从未使用过这个实例，会造成内存的浪费。 结论：这种方法可以使用，但可能会造成内存浪费。 class Singleton1 { //1. 构造器私有化, 禁止外部进行new操作 private Singleton1() { } //2.本类内部创建对象实例 private final static Singleton1 instance = new Singleton1(); //3. 提供一个公有的静态方法，返回实例对象 public static Singleton1 getInstance() { return instance; } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-06T06:59:59.000Z"}],["meta",{"property":"article:author","content":"北斗星司"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2023-04-22T10:08:32.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-06T06:59:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"单例模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-22T10:08:32.000Z\\",\\"dateModified\\":\\"2023-11-06T06:59:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"北斗星司\\"}]}"]]},"headers":[{"level":2,"title":"单例模式的实现","slug":"单例模式的实现","link":"#单例模式的实现","children":[{"level":3,"title":"饿汉式(静态变量方式)","slug":"饿汉式-静态变量方式","link":"#饿汉式-静态变量方式","children":[]},{"level":3,"title":"饿汉式(静态代码块方式)","slug":"饿汉式-静态代码块方式","link":"#饿汉式-静态代码块方式","children":[]},{"level":3,"title":"枚举类型","slug":"枚举类型","link":"#枚举类型","children":[]},{"level":3,"title":"懒汉式(线程不安全)","slug":"懒汉式-线程不安全","link":"#懒汉式-线程不安全","children":[]},{"level":3,"title":"懒汉式(线程安全)","slug":"懒汉式-线程安全","link":"#懒汉式-线程安全","children":[]},{"level":3,"title":"懒汉式(线程安全)","slug":"懒汉式-线程安全-1","link":"#懒汉式-线程安全-1","children":[]},{"level":3,"title":"双重检查锁","slug":"双重检查锁","link":"#双重检查锁","children":[]},{"level":3,"title":"静态内部类","slug":"静态内部类","link":"#静态内部类","children":[]}]}],"git":{"createdTime":1699253999000,"updatedTime":1699253999000,"contributors":[{"name":"mtgd106","email":"1487722388@qq.com","commits":1}]},"readingTime":{"minutes":4.7,"words":940},"filePathRelative":"posts/interview/单例模式.md","localizedDate":"2023年4月22日","excerpt":"<h2> 单例模式的实现</h2>\\n<h3> 饿汉式(静态变量方式)</h3>\\n<p>优点：写法比较简单，在类装载的时候就完成了实例化。不存在线程安全问题。</p>\\n<p>缺点：在类装载的时候就完成了实例化，没有达到Lazy Loading 的效果。</p>\\n<p>      如果从始至终从未使用过这个实例，会造成内存的浪费。</p>\\n<p>结论：这种方法可以使用，但可能会造成内存浪费。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Singleton1</span> <span class=\\"token punctuation\\">{</span>\\n    \\n    <span class=\\"token comment\\">//1. 构造器私有化, 禁止外部进行new操作</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Singleton1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">//2.本类内部创建对象实例</span>\\n    <span class=\\"token keyword\\">private</span> <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Singleton1</span> instance <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Singleton1</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">//3. 提供一个公有的静态方法，返回实例对象</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token class-name\\">Singleton1</span> <span class=\\"token function\\">getInstance</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> instance<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"北斗星司"},"autoDesc":true}');export{n as data};
