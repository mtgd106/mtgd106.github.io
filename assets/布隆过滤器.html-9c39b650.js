import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as p,a as t}from"./app-a89b456a.js";const e="/assets/image-20230721162640378-c497563c.png",o={},c=t('<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>布隆过滤器(Bloom Filter)可以看作是<strong>由二进制向量(或者说位数组)和一系列随机映射函数(哈希函数)两部分组成的数据结构</strong></p><p>相比于 List、Map、Set 等数据结构，它<strong>占用空间更少并且效率更高，但缺点是其返回的结果是概率性的，不是非常准确</strong>。</p><p>理论情况下<strong>添加到集合中的元素越多，误报的可能性就越大</strong>。并且，<strong>存放在布隆过滤器的数据不容易删除</strong>。</p><p>Bloom Filter 会使用一个较大的 bit 数组来保存所有的数据，数组中的每个元素都只占用 1 bit ，并且每个元素只能是</p><p>  0 或者 1 (代表 false 或者 true），这也是 Bloom Filter 节省内存的核心所在。</p><p>即，<strong>可用它来检索元素是否在给定的大集合中。</strong></p><p><strong>优点：</strong></p><p>  时间复杂度低，增加和查询元素的时间复杂为O(N)，(N为哈希函数的个数)</p><p>  保密性强，布隆过滤器不存储元素本身</p><p>  存储空间小</p><p><strong>缺点：</strong></p><p>  有一定的误判率，但是可以通过调整参数来降低</p><p>  无法获取元素本身</p><p>  很难删除元素</p><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>当一个元素加入布隆过滤器中的时候，会进行如下操作：</p><ol><li><p>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值(有几个哈希函数得到几个哈希值)。</p></li><li><p>根据得到的哈希值，在位数组中把对应下标的值置为 1。</p></li></ol><p>当需要判断一个元素是否存在于布隆过滤器中的时候，会进行如下操作：</p><ol><li><p>对给定元素再次进行相同的哈希计算；</p></li><li><p>得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，说明该元素存在，如果有一个值不为 1，说明该元素不存在。</p></li></ol><p>​ <img src="'+e+`" alt="" loading="lazy"></p><p>如图所示，当要将字符串加入到布隆过滤器中时，该字符串首先由多个哈希函数生成不同的哈希值，然后将对应的位数组</p><p>  的下标置为 1(当位数组初始化时，所有位置均为 0)。当第二次存储相同字符串时，因为先前的对应位置已设置为 1，</p><p>  所以很容易知道此值已经存在（去重非常方便）。</p><p>如果我们需要判断某个字符串是否在布隆过滤器中时，只需要对给定字符串再次进行相同的哈希计算，得到值之后</p><p>  判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，</p><p>  说明该元素不在布隆过滤器中。</p><p><strong>不同的字符串可能哈希出来的位置相同，这种情况可以适当增加位数组大小或者调整哈希函数。</strong></p><p>综上，可以得出：<strong>布隆过滤器说某个元素存在，小概率会误判；如果说某个元素不存在，那么这个元素一定不存在。</strong></p><p><strong>空间计算：</strong></p><p>在布隆过滤器增加元素之前，首先需要初始化布隆过滤器的空间，也就是二进制数组，除此之外还需要计算Hash函数的个数。</p><p>布隆过滤器提供了两个参数，分别是预计加入元素的大小n，运行的错误率f。</p><p>布隆过滤器中有算法会根据这两个参数计算出二进制数组的大小l，以及Hash函数的个数k。</p><p>它们之间的关系比较简单：</p><p>   错误率越低，位数组越长，空间占用较大</p><p>   错误率越低，Hash函数越多，计算耗时较长</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h2><ol><li><p>判断给定数据是否存在：</p><p>比如判断一个数字是否存在于包含大量数字的数字集中(数字集很大)、 防止缓存穿透(判断请求的数据是否存在)、</p><p>邮箱的垃圾邮件过滤(判断一个邮件地址是否在垃圾邮件列表中)、黑名单功能(判断一个IP地址或手机号码是否在</p><p>黑名单中)等等。</p></li><li><p>去重</p><p>比如爬给定网址的时候对已经爬取过的 URL 去重、对巨量的 QQ号/订单号去重。</p><p>去重场景也需要用到判断给定数据是否存在，因此布隆过滤器主要是为了解决海量数据的存在性问题。</p></li></ol><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><h3 id="java手动实现" tabindex="-1"><a class="header-anchor" href="#java手动实现" aria-hidden="true">#</a> Java手动实现</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">BitSet</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBloomFilter</span> <span class="token punctuation">{</span>

  <span class="token comment">//位数组的大小</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DEFAULT_SIZE</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">;</span>
    
  <span class="token comment">//通过这个数组可以创建 6 个不同的哈希函数</span>
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">SEEDS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">//位数组。数组中的元素只能是 0 或者 1</span>
  <span class="token keyword">private</span> <span class="token class-name">BitSet</span> bits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//存放包含 hash 函数的类的数组  SimpleHash是一个自定义类</span>
  <span class="token keyword">private</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">[</span><span class="token punctuation">]</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">[</span><span class="token constant">SEEDS</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">//初始化多个包含 hash 函数的类的数组，每个类中的 hash 函数都不一样 </span>
  <span class="token keyword">public</span> <span class="token class-name">MyBloomFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token comment">// 初始化多个不同的 Hash 函数    </span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">SEEDS</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
      func<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_SIZE</span><span class="token punctuation">,</span> <span class="token constant">SEEDS</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
    <span class="token punctuation">}</span>   
  <span class="token punctuation">}</span>

  <span class="token comment">//添加元素到位数组  </span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SimpleHash</span> f <span class="token operator">:</span> func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
      bits<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>    
  <span class="token punctuation">}</span>

  <span class="token comment">//判断指定元素是否存在于位数组 </span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token keyword">boolean</span> ret <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SimpleHash</span> f <span class="token operator">:</span> func<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
      ret <span class="token operator">=</span> ret <span class="token operator">&amp;&amp;</span> bits<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
    <span class="token punctuation">}</span>        
    <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>

  <span class="token comment">//静态内部类。用于 hash 操作 </span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SimpleHash</span> <span class="token punctuation">{</span>
        
    <span class="token keyword">private</span> <span class="token keyword">int</span> cap<span class="token punctuation">;</span>
        
    <span class="token keyword">private</span> <span class="token keyword">int</span> seed<span class="token punctuation">;</span>
        
    <span class="token keyword">public</span> <span class="token class-name">SimpleHash</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">,</span> <span class="token keyword">int</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
      <span class="token keyword">this</span><span class="token punctuation">.</span>cap <span class="token operator">=</span> cap<span class="token punctuation">;</span>
            
      <span class="token keyword">this</span><span class="token punctuation">.</span>seed <span class="token operator">=</span> seed<span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>
        
    <span class="token comment">//计算 hash 值   </span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
      <span class="token keyword">int</span> h<span class="token punctuation">;</span>
            
      <span class="token keyword">return</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>seed <span class="token operator">*</span> <span class="token punctuation">(</span>cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
    <span class="token punctuation">}</span>    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用谷歌guava包" tabindex="-1"><a class="header-anchor" href="#使用谷歌guava包" aria-hidden="true">#</a> 使用谷歌guava包</h3><ol><li>引入pom依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>29.0-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>测试代码</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>vkls<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span>
 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">BloomFilter</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>hash<span class="token punctuation">.</span></span><span class="token class-name">Funnels</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilterTest</span> <span class="token punctuation">{</span>
     
  <span class="token doc-comment comment">/** 预计插入的数据 */</span>    
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> expectedInsertions <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>
    
  <span class="token doc-comment comment">/** 误判率 */</span>    
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> fpp <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>
    
  <span class="token doc-comment comment">/** 创建布隆过滤器 */</span>    
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Funnels</span><span class="token punctuation">.</span><span class="token function">integerFunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                                                                       expectedInsertions<span class="token punctuation">,</span> fpp<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token comment">//插入1千万个数据  数字0-1千万-1        </span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> expectedInsertions<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
      bloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>
         
    <span class="token comment">//用1千万个数据测试误判率  数字1千万到2千万-1        </span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> expectedInsertions<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> expectedInsertions <span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                
        count<span class="token operator">++</span><span class="token punctuation">;</span>            
      <span class="token punctuation">}</span>        
    <span class="token punctuation">}</span>        
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一共误判了：&quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><p>构造一个BloomFilter对象有四个参数：</p><p>​   Funnel funnel：数据类型，由Funnels类指定即可</p><p>​   long expectedInsertions：预期插入的值的数量</p><p>​   fpp：错误率</p><p>​   BloomFilter.Strategy：hash算法</p><ul><li><p>当预计插入的值的数量不变时，偏差值fpp越小，位数组越大，hash函数的个数越多</p></li><li><p>当偏差值不变时，预计插入的中的数量越大，位数组越大，hash函数并没有变化</p></li></ul><h2 id="redis中的过滤器" tabindex="-1"><a class="header-anchor" href="#redis中的过滤器" aria-hidden="true">#</a> Redis中的过滤器</h2><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h3><p>bf.add key item    添加一个元素到过滤器中，如果过滤器不存在则创建过滤器， 添加成功返回1</p><p>​   例：bf.add name vkls    name为过滤器名称</p><p>bf.madd key item1 item2    添加多个元素到过滤器中</p><p>​   例：bf.madd name vkls mtgd</p><p>bf.exists key item    判断一个元素是否存在于过滤器中，存在则返回1，不存在返回0</p><p>bf.mexists key item1 item2    判断多个元素是否存在于过滤器中 ，存在的返回1，不存在的返回0</p><p>bf.reserve {key} {error_rate} {capacity} [EXPANSION expansion]</p><p>​   key：布隆过滤器的名称</p><p>​   error_rate : 期望的误报率。该值必须介于 0 到 1 之间。</p><p>    例如，对于期望的误报率 0.1％（1000 中为 1），error_rate 应该设置为 0.001。</p><p>      该数字越接近零，则每个项目的内存消耗越大，并且每个操作的 CPU 使用率越高。</p><p>​   capacity: 过滤器的容量。当实际存储的元素个数超过该值之后，性能将开始下降。实际的降级将取决于超出限制的程度</p><p>           随着过滤器元素数量呈指数增长，性能将线性下降。</p><p>  可选参数：</p><p>​     expansion：如果创建了一个新的子过滤器，则其大小将是当前过滤器的大小乘以<code>expansion</code>。默认扩展值为 2。</p><p>​       这意味着每个后续子过滤器将是前一个子过滤器的两倍.</p><h3 id="java中使用redis布隆过滤器" tabindex="-1"><a class="header-anchor" href="#java中使用redis布隆过滤器" aria-hidden="true">#</a> Java中使用Redis布隆过滤器</h3><ol><li>引入pom依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.16.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>编写测试代码</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span></span><span class="token class-name">Redisson</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RBloomFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">RedissonClient</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">Config</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisBloomFilterTest</span> <span class="token punctuation">{</span>
 
    
  <span class="token doc-comment comment">/** 预计插入的数据 */</span>    
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> expectedInsertions <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>
    
  <span class="token doc-comment comment">/** 误判率 */</span>    
  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Double</span> fpp <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>
     
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token comment">// Redis连接配置，无密码        </span>
    <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://192.168.211.108:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token comment">// config.useSingleServer().setPassword(&quot;123456&quot;);        </span>
    <span class="token comment">// 初始化布隆过滤器        </span>
    <span class="token class-name">RedissonClient</span> client <span class="token operator">=</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token class-name">RBloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span>expectedInsertions<span class="token punctuation">,</span> fpp<span class="token punctuation">)</span><span class="token punctuation">;</span>
         
    <span class="token comment">// 布隆过滤器增加元素        </span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> expectedInsertions<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
      bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>
         
    <span class="token comment">// 统计元素        </span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> expectedInsertions<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> expectedInsertions<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                
        count<span class="token operator">++</span><span class="token punctuation">;</span>            
      <span class="token punctuation">}</span>       
    <span class="token punctuation">}</span>        
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;误判次数&quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,76);function l(i,u){return s(),a("div",null,[p(" permalink: /面试/数据结构/    "),c])}const d=n(o,[["render",l],["__file","布隆过滤器.html.vue"]]);export{d as default};
