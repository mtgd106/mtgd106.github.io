import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,f as e,a as t}from"./app-a89b456a.js";const p={},l=t(`<h2 id="sql支持的数据类型" tabindex="-1"><a class="header-anchor" href="#sql支持的数据类型" aria-hidden="true">#</a> SQL支持的数据类型</h2><h3 id="_1-整数" tabindex="-1"><a class="header-anchor" href="#_1-整数" aria-hidden="true">#</a> 1.整数</h3><p>    bigint：用8个字节来存储正负数，范围：-2^63 到 2^63 -1</p><p>    int：用4个字节来存储正负数，范围：-2^31 到 2^31 -1</p><p>    smallint：用2 个字节来存储正负数，范围：-2^15 到 2^15 -1</p><p>    tinyint：用1字节来存储正整数，范围：0 到 2^8-1</p><p>    bit：值只能是0或1，当输入0以外的其他值时，系统均默认为是1</p><h3 id="_2-精确数值数据" tabindex="-1"><a class="header-anchor" href="#_2-精确数值数据" aria-hidden="true">#</a> 2.精确数值数据</h3><p>    decimal：存储从 -10^38+1 到 10^38-1 固定精度和范围的数据；必须指定范围和精度。例如，decimal(10,2)</p><h3 id="_3-浮点数值数据" tabindex="-1"><a class="header-anchor" href="#_3-浮点数值数据" aria-hidden="true">#</a> 3.浮点数值数据</h3><p>    float：用4个字节存储数据，最多可为53位</p><p>    double：用8个字节存储数据</p><h3 id="_4-字符串数据" tabindex="-1"><a class="header-anchor" href="#_4-字符串数据" aria-hidden="true">#</a> 4.字符串数据</h3><p>    char：char(n) 固定的、长度为n个字符的字符串，不足的长度用空格补上</p><p>    varchar：varchar(n) 可变的、最长长度为n个字符的字符串，如果有多余的空格则去掉</p><h3 id="_5-日期时间类型" tabindex="-1"><a class="header-anchor" href="#_5-日期时间类型" aria-hidden="true">#</a> 5.日期时间类型</h3><table><thead><tr><th>    类型         </th><th>大 小</th><th>范围</th><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>    DATE</td><td>3</td><td>1000-01-01 至 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>    TIME</td><td>3</td><td>-838:59:59 至 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>    YEAR</td><td>1</td><td>1901 至 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>    DATETIME</td><td>8</td><td>1000-01-01 00:00:00 至 9999-12-31 23:59:59   </td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>   TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01 至 2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="sql语句" tabindex="-1"><a class="header-anchor" href="#sql语句" aria-hidden="true">#</a> SQL语句</h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><p>DDL：Date Definition Language            数据定义语言，用来定义数据对象(数据库，表，字段)</p><p>DML：Data Manipulation Language     数据操作语言，用来对数据表中的数据进行增删改</p><p>DCL：Data Control Language                数据控制语言，用来创建数据库用户，控制数据库的访问权限</p><p>DQL：Data Query Language                  数据查询语言，用来查询数据表中的记录</p><h3 id="ddl" tabindex="-1"><a class="header-anchor" href="#ddl" aria-hidden="true">#</a> DDL</h3><h4 id="数据库操作" tabindex="-1"><a class="header-anchor" href="#数据库操作" aria-hidden="true">#</a> <strong>数据库操作</strong></h4><p>1.查询所有数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.创建数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token punctuation">[</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token punctuation">]</span> 数据库名 <span class="token punctuation">[</span><span class="token keyword">default</span> <span class="token keyword">charset</span> 字符集<span class="token punctuation">]</span>  <span class="token punctuation">[</span><span class="token keyword">collate</span> 排序规则<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.删除数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">database</span> <span class="token punctuation">[</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">]</span>  数据库名 <span class="token punctuation">;</span>   <span class="token comment">#如果删除一个不存在的数据库，将会报错。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>4.切换/使用数据库</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">use</span>  数据库名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="表结构操作" tabindex="-1"><a class="header-anchor" href="#表结构操作" aria-hidden="true">#</a> <strong>表结构操作</strong></h4><p><strong>1.创建与查询</strong></p><p>1.1查询当前数据库中的所有表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span>  <span class="token keyword">tables</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.2查看某个表的结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">desc</span>  表名<span class="token punctuation">;</span>    <span class="token comment">#可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信息。   </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.3查询指定表的建表语句</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span>  <span class="token keyword">create</span>  <span class="token keyword">table</span>  表名<span class="token punctuation">;</span>   <span class="token comment">#在建表时未指定的参数也可以查出，结果是数据库的默认值。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>1.4创建表结构</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>

    字段<span class="token number">1</span> 字段<span class="token number">1</span>类型 <span class="token punctuation">[</span> <span class="token keyword">comment</span> 字段<span class="token number">1</span>注释 <span class="token punctuation">]</span><span class="token punctuation">,</span>

    字段<span class="token number">2</span> 字段<span class="token number">2</span>类型 <span class="token punctuation">[</span><span class="token keyword">comment</span> 字段<span class="token number">2</span>注释 <span class="token punctuation">]</span><span class="token punctuation">,</span>

    字段<span class="token number">3</span> 字段<span class="token number">3</span>类型 <span class="token punctuation">[</span><span class="token keyword">comment</span> 字段<span class="token number">3</span>注释 <span class="token punctuation">]</span><span class="token punctuation">,</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    字段n 字段n类型 <span class="token punctuation">[</span><span class="token keyword">comment</span> 字段n注释 <span class="token punctuation">]</span>

<span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">comment</span> 表注释 <span class="token punctuation">]</span> <span class="token punctuation">;</span>    <span class="token comment">#最后一个字段后面没有逗号</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.修改与删除</strong></p><p>​ 2.1修改表名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">rename</span> <span class="token keyword">to</span> 新表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 2.2删除表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token punctuation">[</span><span class="token keyword">if</span> <span class="token keyword">exists</span><span class="token punctuation">]</span> 表名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 2.3删除指定表，并重新创建该表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">truncate</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span>     <span class="token comment">#在删除表的时候，表中的全部数据也都会被删除。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 2.4添加字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> 字段名 类型 <span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">comment</span> 注释 <span class="token punctuation">]</span> <span class="token punctuation">[</span> 约束 <span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 2.5修改某字段的数据类型</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span>  表名  <span class="token keyword">modify</span>  字段名 新数据类型 <span class="token punctuation">(</span>长度<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 2.6修改字段名和字段类型</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 change 旧字段名 新字段名 类型 <span class="token punctuation">(</span>长度<span class="token punctuation">)</span> <span class="token punctuation">[</span> <span class="token keyword">COMMENT</span> 注释 <span class="token punctuation">]</span> <span class="token punctuation">[</span> 约束 <span class="token punctuation">]</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 2.7删除字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">drop</span> 字段名<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dml" tabindex="-1"><a class="header-anchor" href="#dml" aria-hidden="true">#</a> DML</h3><h4 id="_1-添加数据" tabindex="-1"><a class="header-anchor" href="#_1-添加数据" aria-hidden="true">#</a> <strong>1.添加数据</strong></h4><p>1.1给指定字段添加数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span>  表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 1.2给所有字段添加数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名 <span class="token keyword">values</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">#如果添加的数据包含所有字段的话字段名称可以省略</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 1.3批量添加数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span>  表名 <span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span> 字段名<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span>  表名 <span class="token keyword">values</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span> 值<span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ <strong>注意事项:</strong></p><p>​    1.插入数据时，指定的字段顺序与给定的值的顺序是<strong>一一对应</strong>的</p><p>​    2.插入时，<strong>指定的字段名的顺序可以与表定义中的顺序不一致</strong></p><p>​    3.如果只指定部分属性列，则插入的记录在其余属性列上取NULL</p><p>​    4.字符串和日期型数据应该包含在引号中。</p><p>​    5.插入的数据大小，应该在字段的规定范围内。</p><h4 id="_2-修改数据" tabindex="-1"><a class="header-anchor" href="#_2-修改数据" aria-hidden="true">#</a> <strong>2.修改数据</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span>  表名 <span class="token keyword">set</span> 字段名<span class="token number">1</span> <span class="token operator">=</span> 值<span class="token number">1</span> <span class="token punctuation">,</span> 字段名<span class="token number">2</span> <span class="token operator">=</span> 值<span class="token number">2</span> <span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">[</span> <span class="token keyword">where</span> 条件 <span class="token punctuation">]</span> <span class="token punctuation">;</span>  
<span class="token comment">#没有where子句表示修改所有的记录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</span>

<span class="token comment">#修改id为1的数据, 将name修改为小昭, gender修改为 女</span>
 
 <span class="token keyword">update</span> employee <span class="token keyword">set</span> name <span class="token operator">=</span> <span class="token string">&#39;小昭&#39;</span> <span class="token punctuation">,</span> gender <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> 

<span class="token comment">#将所有的员工入职日期修改为 2028-01-01</span>
 
 <span class="token keyword">update</span> employee <span class="token keyword">set</span> entrydate <span class="token operator">=</span> <span class="token string">&#39;2028-01-01&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-删除数据" tabindex="-1"><a class="header-anchor" href="#_3-删除数据" aria-hidden="true">#</a> <strong>3.删除数据</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span> <span class="token keyword">where</span> 条件 <span class="token punctuation">]</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想要限制删除的行数，则可以使用limit子句，但要配合order by 子句使用，否则删除的可能不是预期的数据。</p><p>例：</p><p>​   1.删除gender为女的员工</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> gender <span class="token operator">=</span> <span class="token string">&#39;女&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​    2.删除所有员工</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ <strong>注意事项：</strong></p><p>​   1.delete语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数据。</p><p>​   2.delete语句不能删除某一个字段的值，但可以使用update，将该字段值置为null即可。</p><h3 id="dql" tabindex="-1"><a class="header-anchor" href="#dql" aria-hidden="true">#</a> DQL</h3><h4 id="分类-1" tabindex="-1"><a class="header-anchor" href="#分类-1" aria-hidden="true">#</a> <strong>分类:</strong></h4><p>    基本查询（不带任何条件）</p><p>    条件查询（where）</p><p>    聚合函数（count、max、min、avg、sum）</p><p>    分组查询（group by）</p><p>    排序查询（order by）</p><p>    分页查询（limit）</p><h4 id="基础查询" tabindex="-1"><a class="header-anchor" href="#基础查询" aria-hidden="true">#</a> <strong>基础查询</strong></h4><p>在基本查询的DQL语句中，不带任何的查询条件，查询的语法如下：</p><p>1.查询多个字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段<span class="token number">1</span><span class="token punctuation">,</span> 字段<span class="token number">2</span><span class="token punctuation">,</span> 字段<span class="token number">3</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>  表名 <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.查询结果中将字段设置为其他名称</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>  字段<span class="token number">1</span> <span class="token punctuation">[</span> <span class="token keyword">as</span> 别名<span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token punctuation">[</span> <span class="token keyword">as</span> 别名<span class="token number">2</span> <span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>  表名<span class="token punctuation">;</span> 

<span class="token keyword">select</span>  字段<span class="token number">1</span> <span class="token punctuation">[</span> 别名<span class="token number">1</span> <span class="token punctuation">]</span> <span class="token punctuation">,</span> 字段<span class="token number">2</span> <span class="token punctuation">[</span> 别名<span class="token number">2</span> <span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span>  表名<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.去除重复记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">distinct</span>  字段列表  <span class="token keyword">from</span>  表名<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>distinct注意事项：</strong></p><p>​ 1.如果列具有null值，并且对该列使用distinct子句，MySQL将保留一个null值，</p><p>     因为distinct子句将所有null值视为相同的值。</p><p>​ 2.在与聚合函数结合使用时，MySQL在<strong>将聚合函数应用于结果集之前删除重复的行</strong>。</p><p> 例：要计算美国客户的唯一state列的值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 

    <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> state<span class="token punctuation">)</span>
    
<span class="token keyword">from</span>

    customers
    
<span class="token keyword">where</span>

    country <span class="token operator">=</span> <span class="token string">&#39;USA&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 3.如果要将distinct子句与limit子句一起使用，MySQL会在查找到limit子句中指定的行数时立即停止。</p><p>​    即，如果想要查询三条数据，但三条数据中有两条是重复的，则结果就会只显示两条数据，不会再继续查找。</p><p>​ 4.distinct还可以根据多个字段的组合来进行去重操作，确保多个字段的组合是唯一的：</p><p>​    使用：distinct 字段1,字段2,字段3,...</p><h4 id="条件查询" tabindex="-1"><a class="header-anchor" href="#条件查询" aria-hidden="true">#</a> <strong>条件查询</strong></h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 条件列表 <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>条件：</p><p>常用的比较运算符：</p><table><thead><tr><th style="text-align:left;">比较运算符</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;">&gt;</td><td style="text-align:left;">大于</td></tr><tr><td style="text-align:left;">&gt;=</td><td style="text-align:left;">大于等于</td></tr><tr><td style="text-align:left;">&lt;</td><td style="text-align:left;">小于</td></tr><tr><td style="text-align:left;">&lt;=</td><td style="text-align:left;">小于等于</td></tr><tr><td style="text-align:left;">=</td><td style="text-align:left;">等于</td></tr><tr><td style="text-align:left;">&lt;&gt; 或 !=</td><td style="text-align:left;">不等于</td></tr><tr><td style="text-align:left;">between x and y   </td><td style="text-align:left;">在某个范围内（包含最小值、最大值）</td></tr><tr><td style="text-align:left;">in(a,b,c...)</td><td style="text-align:left;">选择一个in之后的列表中的值，多选一</td></tr><tr><td style="text-align:left;">like &#39;占位符&#39;</td><td style="text-align:left;">模糊匹配，<strong>下划线_匹配单个任意字符, %匹配任意个任意字符</strong>，只在where子句中使用</td></tr><tr><td style="text-align:left;">is null</td><td style="text-align:left;">要求字段为null</td></tr><tr><td style="text-align:left;">is not null</td><td style="text-align:left;">要求字段不为null</td></tr></tbody></table><p>常用逻辑运算符：</p><table><thead><tr><th style="text-align:left;">逻辑运算符</th><th style="text-align:left;">功能</th></tr></thead><tbody><tr><td style="text-align:left;">and 或 &amp;&amp;</td><td style="text-align:left;">并且（多个条件同时成立）</td></tr><tr><td style="text-align:left;">or 或 ||</td><td style="text-align:left;">或者（多个条件任意一个成立）</td></tr><tr><td style="text-align:left;">not 或 !</td><td style="text-align:left;">非，不是</td></tr></tbody></table><p>多字段使用in查询</p><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>c1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">#该语法也支持子查询:</span>
 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t <span class="token keyword">where</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> n<span class="token punctuation">.</span>a<span class="token punctuation">,</span>n<span class="token punctuation">.</span>c <span class="token keyword">from</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 例：</p><p>​   1.查询有身份证号的员工信息------非空</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> idcard <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>    <span class="token comment">#is not null  代表非空</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​    2.查询年龄不等于30的员工的信息-----不等于</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#等价写法</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">!=</span> <span class="token number">88</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&lt;&gt;</span> <span class="token number">88</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​    3.查询年龄在25岁(包含) 到 30岁(包含)之间的员工信息-----指定范围</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#等价写法</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&gt;=</span> <span class="token number">25</span> <span class="token operator">&amp;&amp;</span> age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&gt;=</span> <span class="token number">25</span> <span class="token operator">and</span> age <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">between</span> <span class="token number">25</span> <span class="token operator">and</span> <span class="token number">30</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​    4.查询年龄等于18 或 20 或 40 的员工信息-----多选一</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">#等价写法</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token operator">or</span> age <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">or</span> age <span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​    5.查询姓名为两个字的员工的信息-----匹配字符</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;__&#39;</span><span class="token punctuation">;</span>    <span class="token comment">#使用like关键字，下划线匹配单个任意字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​    6.查询身份证号最后一位是X的员工信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> idcard <span class="token operator">like</span> <span class="token string">&#39;%X&#39;</span><span class="token punctuation">;</span>   <span class="token comment"># %匹配任意个任意字符</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> idcard <span class="token operator">like</span> <span class="token string">&#39;_________________X&#39;</span><span class="token punctuation">;</span>  <span class="token comment">#下划线匹配单个字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>     7.查询身份证第四位是4且最后一位是0的员工</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> idcard <span class="token operator">like</span> <span class="token string">&#39;___4%0&#39;</span><span class="token punctuation">;</span>  
<span class="token comment">#三个下划线匹配三个任意字符，第四位是4，然后匹配任意个字符，最后一位是			  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> <strong>聚合函数</strong></h4><p>   <strong>将一列数据作为一个整体，进行纵向计算。</strong></p><p>   即，计算表中记录的总数、计算某个字段列下数据的总和，以及计算表中某个字段下的最大值、最小值或者平均值。</p><p>   <strong>也可以对SQL语句的返回结果使用这些函数。</strong></p><table><thead><tr><th>函数       </th><th>作用                </th></tr></thead><tbody><tr><td>     avg()                  </td><td>             返回某列的平均值  </td></tr><tr><td>     count()</td><td>             返回某列的行数                              </td></tr><tr><td>     max()</td><td>             返回某列的最大值</td></tr><tr><td>     min()</td><td>             返回某列的最小值</td></tr><tr><td>     sum()</td><td>             返回某列的和</td></tr></tbody></table><p>  语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code> <span class="token keyword">select</span>  聚合函数<span class="token punctuation">(</span>字段列表<span class="token punctuation">)</span>  <span class="token keyword">from</span>  表名 <span class="token punctuation">;</span>   <span class="token comment">#NULL值不参与所有聚合函数的运算。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  1.count( )函数</p><p>​     统计数据表中包含的记录的总数，或者统计返回的查询结果中的数据总行数。</p><p>​     count(*) 计算表中的总行数，不管某列是否有数值或者为空行</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> stu_num <span class="token keyword">from</span> students<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​      count(字段名) 计算指定字段下总的行数，计算时将忽略空值的行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span>idcard<span class="token punctuation">)</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>  <span class="token comment">#统计的是idcard字段不为null的记录数</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  2.sum( )函数</p><p>​     返回指定列的总和</p><p>​     统计西安地区员工的年龄之和</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> workaddress <span class="token operator">=</span> <span class="token string">&#39;西安&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​     可以与group by一起使用，来计算每个分组的总和</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span>  <span class="token comment">#将员工按照性别分组，并计算每组员工的年龄总和</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  3.avg( )函数</p><p>​     通过计算返回的行数和每一行数据的和，求得指定字段下数据的平均值。</p><p>​     可以与group by一起使用，来计算每个分组的平均值。</p><p>​     avg函数会忽略值为null的行。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">as</span> 年龄 <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span>  
<span class="token comment">#计算每组员工的年龄平均值，并将查询字段显示为&#39;年龄&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>    4.max( )和min( )</p><p>       返回指定字段中的最大值和最小值，都可以联合group by进行使用</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">as</span> 年龄 <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>        也可以对字符串类型的数据进行比较，按照ASCII码的大小进行比较。</p><h4 id="分组查询" tabindex="-1"><a class="header-anchor" href="#分组查询" aria-hidden="true">#</a> <strong>分组查询</strong></h4><p>1.语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token punctuation">[</span> <span class="token keyword">where</span> 条件 <span class="token punctuation">]</span> <span class="token keyword">group</span> <span class="token keyword">by</span> 分组字段名 <span class="token punctuation">[</span> <span class="token keyword">having</span> 分组后过滤条件 <span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.where与having的区别</p><p>​   执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组，</p><p>       且<strong>where后面不能使用聚合函数</strong>；而having是分组之后再对结果进行过滤。</p><p>​       即，<strong>where过滤掉的是记录，having过滤掉的是分组。</strong></p><p>​   判断条件不同：where不能对聚合函数进行判断，而having可以。</p><p>​   注意：</p><p>​       1.<strong>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。</strong></p><p>​       2.<strong>执行顺序：where &gt; group by &gt; 聚合函数 &gt; having 。</strong></p><p>​       3.<strong>支持多字段分组, 具体语法为 : group by columnA,columnB</strong></p><p>  例：</p><p>​     1.根据性别分组 , 统计男性员工 和 女性员工的平均年龄</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> gender<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> gender <span class="token punctuation">;</span>   
<span class="token comment">#查询的字段为gender和聚合函数   gender为分组字段  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>​      2.查询年龄小于45的员工 , 并根据工作地址分组 , 获取员工数量大于等于3的工作地址</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> wordaddress <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> address_count <span class="token keyword">from</span> emp <span class="token keyword">where</span> age<span class="token operator">&lt;</span><span class="token number">45</span> 
<span class="token keyword">group</span> <span class="token keyword">by</span> workaddress <span class="token keyword">having</span>  address_count<span class="token operator">&gt;=</span><span class="token number">3</span>
   
<span class="token comment">#先执行where语句过滤掉一部分数据，然后执行group by语句，将剩下的数据按照wordaddress分组,再执行聚合函数，</span>

<span class="token comment">#计算出每个分组中数据的总行数，将结果赋给address_count,最后执行having语句，过滤掉数据总行数小于3的分组。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​      3.统计各个工作地址上班的男性及女性员工的数量-----使用多字段分组</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> workaddress<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">&#39;数量&#39;</span> <span class="token keyword">from</span> emp <span class="token keyword">group</span> <span class="token keyword">by</span> gender<span class="token punctuation">,</span>workaddress<span class="token punctuation">;</span>

<span class="token comment">/*
 使用多字段分组，因为gender在前，所以分组结果是先按gender将员工分成两个大组，
 
  然后在两个大组中按照workaddress的不同再将两个大组分成多个小组。
  
结果:
gender   workaddress    数量
 女	      上海			     1
 女		    北京					 4
 女		    天津					 1
 女		    西安					 1
 男	      上海					 2
 男		    北京		 			 4
 男		    江苏					 2
 男		    西安					 1
 
如果是select workaddress, gender, count(*) &#39;数量&#39; from emp group by workaddress,gender; 那么结果是:

workaddress   gender     数量
   上海	      	女					1
   上海		  		男					2
   北京		  		女					4
   北京		  		男					4
   天津		  		女					1
   江苏		  		男					2
   西安		  		女					1
   西安	  	  	男					1

即，先按照workaddress的不同分成大组，然后按照gender的不同再分成小组。

selec后面两个词的顺序影响的是展示结果的顺序。

*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="排序查询" tabindex="-1"><a class="header-anchor" href="#排序查询" aria-hidden="true">#</a> <strong>排序查询</strong></h4><p>1.语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span>  字段列表 <span class="token keyword">from</span>  表名 <span class="token keyword">order</span> <span class="token keyword">by</span> 字段<span class="token number">1</span> 排序方式<span class="token number">1</span> <span class="token punctuation">,</span> 字段<span class="token number">2</span> 排序方式<span class="token number">2</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.排序方式</p><p>​   ASC：升序（默认值）</p><p>​   DESC：降序</p><p>3.注意事项</p><p>​   • 如果是升序, 可以不指定排序方式 ;</p><p>​   • 如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序，以此类推 ;</p><p>​   例：</p><p>     1.根据年龄对公司的员工进行升序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>      2.根据入职时间, 对员工进行降序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> entrydate <span class="token keyword">desc</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​     3.根据年龄对公司的员工进行升序排序 , 如果年龄相同 , 再按照入职时间进行降序排序</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">order</span> <span class="token keyword">by</span> age <span class="token keyword">asc</span> <span class="token punctuation">,</span> entrydate <span class="token keyword">desc</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="分页查询" tabindex="-1"><a class="header-anchor" href="#分页查询" aria-hidden="true">#</a> <strong>分页查询</strong></h4><p>1.语法</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span> 起始索引<span class="token punctuation">,</span> 查询记录数 <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意事项：</p><p>​   <strong>• 起始索引从0开始，起始索引 = （查询页码 - 1）* 每页显示记录数。</strong></p><p>​   <strong>• 分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</strong></p><p>​   <strong>• 如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 查询记录数。</strong></p><p>例：</p><p>​ 查询第2页员工数据, 每页展示10条记录 ---- 则，第2页的起始索引为：(页码-1)*页展示记录数=10。</p><p>   即，第1页的记录索引为0-9。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">;</span> 

<span class="token comment">#应该是先确定每页要展示几条记录，然后根据想查看第几页的数据，通过公式计算出起始索引，最后得到完整的SQL语句。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dcl" tabindex="-1"><a class="header-anchor" href="#dcl" aria-hidden="true">#</a> DCL</h3><h4 id="管理用户" tabindex="-1"><a class="header-anchor" href="#管理用户" aria-hidden="true">#</a> <strong>管理用户</strong></h4><p> 1.查询用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  查询结果中， Host代表当前用户访问的主机, 如果为localhost, 代表只能够在当前本机访问，不可以远程访问。</p><p>​   User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一个用户。</p><p> 2.创建用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  3.修改用户密码</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> identified <span class="token keyword">with</span> mysql_native_password <span class="token keyword">by</span> <span class="token string">&#39;新密码&#39;</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>   4.删除用户</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意事项：</p><p>   1.在MySQL中需要通过用户名@主机名的方式，来唯一标识一个用户。</p><p>   2.主机名可以使用 % 通配。</p><p>   3.这类SQL开发人员操作的比较少，主要是DBA（ Database Administrator 数据库管理员）使用。</p><p>例：</p><p>  1.创建用户vkls, 只能够在当前主机localhost访问, 密码123456;</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">&#39;vkls&#39;</span><span class="token variable">@&#39;localhost&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>   2.创建用户mtgd, 可以在任意主机访问该数据库, 密码123456;</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">&#39;mtgd&#39;</span><span class="token variable">@&#39;%&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>   <span class="token comment">#可以使用通配符%表示任意主机</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="权限控制" tabindex="-1"><a class="header-anchor" href="#权限控制" aria-hidden="true">#</a> <strong>权限控制</strong></h4><table><thead><tr><th style="text-align:left;">权限</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">ALL, ALL PRIVILEGES                          </td><td style="text-align:left;">所有权限                                     </td></tr><tr><td style="text-align:left;">SELECT</td><td style="text-align:left;">查询数据</td></tr><tr><td style="text-align:left;">INSERT</td><td style="text-align:left;">插入数据</td></tr><tr><td style="text-align:left;">UPDATE</td><td style="text-align:left;">修改数据</td></tr><tr><td style="text-align:left;">DELETE</td><td style="text-align:left;">删除数据</td></tr><tr><td style="text-align:left;">ALTER</td><td style="text-align:left;">修改表</td></tr><tr><td style="text-align:left;">DROP</td><td style="text-align:left;">删除数据库/表/视图</td></tr><tr><td style="text-align:left;">CREATE</td><td style="text-align:left;">创建数据库/表</td></tr></tbody></table><h5 id="_1-grant关键字" tabindex="-1"><a class="header-anchor" href="#_1-grant关键字" aria-hidden="true">#</a> <strong>1.grant关键字</strong></h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> privilege<span class="token punctuation">,</span><span class="token punctuation">[</span>privilege<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ON</span> privilege_level

<span class="token keyword">TO</span> <span class="token keyword">user</span> <span class="token punctuation">[</span>IDENTIFIED <span class="token keyword">BY</span> password<span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token keyword">REQUIRE</span> tsl_option<span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token punctuation">[</span>GRANT_OPTION <span class="token operator">|</span> resource_option<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  1.在<code>GRANT</code>关键字后指定一个或多个权限。如果授予用户多个权限，则每个权限由逗号分隔。</p><p>  2.<code>ON privilege_level</code> 确定权限应用级别。</p><p>​     MySQL 支持 global（<code>*.*</code>），database（<code>database.*</code>），table（<code>database.table</code>）和列级别。</p><p>​     如果使用列权限级别，则必须在每个权限之后指定一个或多个逗号分隔的列表。</p><p>  3.<code>user</code> 是要授予权限的用户。如果用户已存在，则<code>GRANT</code>语句将修改其权限。否则，<code>GRANT</code>语句将创建一个新用户。</p><p>​     可选子句<code>IDENTIFIED BY</code>允许为用户设置新的密码。</p><p>  4.<code>REQUIRE tsl_option</code>指定用户是否必须通过 SSL，X059 等安全连接方式连接到数据库服务器。</p><p>  5.可选 <code>WITH GRANT OPTION</code> 子句允许您授予其他用户或从其他用户中删除您拥有的权限。</p><p>     可以使用<code>WITH</code>子句分配 MySQL 数据库服务器的资源，例如，设置用户每小时可以使用的连接数或语句数。</p><h5 id="_2-revoke关键字" tabindex="-1"><a class="header-anchor" href="#_2-revoke关键字" aria-hidden="true">#</a> <strong>2.revoke关键字</strong></h5><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REVOKE</span>  privilege_type <span class="token punctuation">[</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">]</span>
    
        <span class="token punctuation">[</span><span class="token punctuation">,</span> priv_type <span class="token punctuation">[</span><span class="token punctuation">(</span>column_list<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
<span class="token keyword">ON</span> <span class="token punctuation">[</span>object_type<span class="token punctuation">]</span> privilege_level
    
<span class="token keyword">FROM</span> <span class="token keyword">user</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">user</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>在 <code>REVOKE</code> 关键字后面指定要从用户撤消的权限列表。需要用逗号分隔权限。</p></li><li><p>在 <code>ON</code> 子句中指定要撤销的权限的级别。</p></li><li><p>在 <code>FROM</code> 子句中指定要撤销哪些用户的权限。</p><p><code>GRANT</code> 和 <code>REVOKE</code> 可在几个层次上控制访问权限：</p></li></ol><ul><li>整个服务器，使用 <code>GRANT ALL</code> 和 <code>REVOKE ALL</code>；</li><li>整个数据库，使用 <code>ON database.*</code>；</li><li>特定的表，使用 <code>ON database.table</code>；</li><li>特定的列；</li><li>特定的存储过程</li></ul><p><strong> 3.查询权限</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>  4.授予权限</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">grant</span> 权限列表 <span class="token keyword">on</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">to</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>  5.撤销权限</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">revoke</span> 权限列表 <span class="token keyword">on</span> 数据库名<span class="token punctuation">.</span>表名 <span class="token keyword">from</span> <span class="token string">&#39;用户名&#39;</span><span class="token variable">@&#39;主机名&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意事项：</p><p>​ • <strong>多个权限之间，使用逗号分隔</strong></p><p>​ • <strong>授权时， 数据库名和表名可以使用 * 进行通配，代表所有。</strong></p><p>例:</p><p>  1.查询 &#39;vkls&#39;@&#39;%&#39; 用户的权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">&#39;vkls&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​   2.授予 &#39;vkls&#39;@&#39;%&#39; 用户core数据库所有表的查询和插入权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span> <span class="token keyword">on</span> core<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">&#39;vkls&#39;</span><span class="token variable">@&#39;%&#39;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​   3.撤销 &#39;vkls&#39;@&#39;%&#39; 用户的core数据库的所有权限</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> core<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;vkls&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,267);function o(c,d){return n(),a("div",null,[e(" permalink: /MySQL/基础语法/数据类型和SQL语句  "),l])}const u=s(p,[["render",o],["__file","10.数据类型和SQL语句.html.vue"]]);export{u as default};
