import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t,a as e}from"./app-a89b456a.js";const p="/assets/image-20230424153344726-e1ef0bb3.png",o="/assets/javase-23-1698737527767-1-2163ca0a.png",c={},i=e('<h2 id="异常类" tabindex="-1"><a class="header-anchor" href="#异常类" aria-hidden="true">#</a> 异常类</h2><p>​ <img src="'+p+'" alt="image-20230424153344726" loading="lazy"></p><h3 id="exception和error的区别" tabindex="-1"><a class="header-anchor" href="#exception和error的区别" aria-hidden="true">#</a> Exception和Error的区别</h3><p>在 Java 中，所有的异常都有一个共同的祖先： <code>java.lang</code> 包中的 <code>Throwable</code> 类。</p><p><code>Throwable</code> 类有两个重要的子类：</p><ul><li><p><strong><code>Exception</code></strong>：程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</p></li><li><p><strong><code>Error</code></strong>：Error 属于程序无法处理的错误 ，也可以通过 <code>catch</code> 来进行捕获，但不建议通过<code>catch</code>捕获 。</p><p>  例如， Java 虚拟机运行错误(<code>Virtual MachineError</code>)、虚拟机内存不够错误(<code>OutOfMemoryError</code>)、</p><p>  类定义错误(<code>NoClassDefFoundError</code>)等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p></li></ul><p><strong>Checked Exception 和 Unchecked Exception</strong></p><p>  Checked Exception 即 受检查异常 ，又称为编译期异常，Java 代码在编译过程中，如果受检查异常没有被</p><p>  <code>catch</code>或者<code>throws</code> 关键字处理的话，就没办法通过编译。</p><p>  常见的有IOException、ClassNotFoundException、SQLException、FileNotFountException...</p><p>​ <strong>除了RuntimeException 及其子类以外，其他的 Exception 类及其子类都属于受检查异常。</strong></p><p> Unchecked Exception 即 <strong>不受检查异常</strong> ，Java 代码在编译过程中 ，即使不处理不受检查异常也可以正常通过编译。</p><p><code> RuntimeException</code> (存放在java.lang 包中)及其子类都统称为非受检查异常，常见的有：</p><ul><li><p><code>NullPointerException</code>(空指针异常)</p></li><li><p><code>IllegalArgumentException</code>(参数异常 比如，方法传入参数类型错误)</p></li><li><p><code>NumberFormatException</code>（字符串转换为数字格式异常，<code>IllegalArgumentException</code>的子类）</p></li><li><p><code>ArrayIndexOutOfBoundsException</code>（数组越界异常）</p></li><li><p><code>ClassCastException</code>（类型转换异常）</p></li><li><p><code>ArithmeticException</code>（算术运算异常）</p></li><li><p><code>SecurityException</code> （安全异常比如权限不够）</p></li></ul><h3 id="throwable-类常用方法" tabindex="-1"><a class="header-anchor" href="#throwable-类常用方法" aria-hidden="true">#</a> Throwable 类常用方法</h3><ul><li><p><code>String getMessage()</code>： 返回异常发生时的简要描述</p></li><li><p><code>String toString()</code>： 返回异常发生时的详细信息</p></li><li><p><code>String getLocalizedMessage()</code>： 返回异常对象的本地化信息。使用 <code>Throwable</code> 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 <code>getMessage()</code>返回的结果相同。</p></li><li><p><code>void printStackTrace()</code>： 在控制台上打印 <code>Throwable</code> 对象封装的异常信息。</p></li></ul><h3 id="异常的处理" tabindex="-1"><a class="header-anchor" href="#异常的处理" aria-hidden="true">#</a> 异常的处理</h3><img src="'+o+`" alt="异常处理" style="zoom:80%;"><p>​</p><ol><li><strong>throws 用在方法上，后面跟的是异常类，可以跟多个；而 throw 用在方法内，后面跟的是异常对象。</strong></li></ol><p>​  1.使用throws声明抛出异常的思路是，当前方法不知道如何处理这种类型的异常，该异常应该由上一级调用者处理；</p><p>​    如果main方法也不知道如何处理这种类型的异常，也可以使用throws声明抛出异常，该异常将交给JVM处理。</p><p>​    JVM对异常的处理方法是，打印异常的跟踪栈信息，并中止程序运行。</p><p>  2.当Java运行时接收到开发者自行抛出的异常时，同样会中止当前的执行流，跳到该异常对应的catch块，由该catch块来处理该异常。</p><p>    即，不管是系统自动抛出的异常，还是程序员手动抛出的异常，Java运行时环境对异常的处理没有差别。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
            
        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token keyword">int</span> c<span class="token operator">=</span>a<span class="token operator">/</span>b<span class="token punctuation">;</span>
            
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">&quot;除数不能为0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的两个数相除的结果是&quot;</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未知异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p><strong>try catch 捕获异常</strong></p><p>在 catch 语句块中捕获发生的异常，并进行处理。</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
            
  <span class="token comment">//包含可能会出现异常的代码以及声明异常的方法</span>
        
<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ExceptionName1</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token comment">//当产生ExceptionName1异常时的处理措施</span>

<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ExceptionName2</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token comment">//当产生ExceptionName2异常时的处理措施</span>
    
<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                                                       
            
  <span class="token comment">//可选，无论是否捕捉到异常都会执行</span>
        
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三个语句块的问题：</p><ol><li><p>try、catch、finally三个语句块均不能单独使用，三者可以组成 try...catch...finally、try...catch、try...finally三种结构，</p><p>catch语句可以有一个或多个，finally语句最多一个。</p></li><li><p>try、catch、finally三个代码块中变量的作用域为代码块内部，分别独立而不能相互访问。</p><p>如果要在三个块中都可以访问，则需要将变量定义到这些块的外面。</p></li><li><p><strong>有多个catch块的时候，只会匹配其中一个异常类然后执行该catch块中的代码，而不会再执行其它的catch块，</strong></p><p><strong>且匹配catch语句的顺序为从上到下(即，书写顺序)，也有可能所有的catch块都没有被执行。</strong></p></li><li><p><strong>先Catch子类异常再Catch父类异常，即，先小后大。</strong></p></li></ol><p>例1：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
   <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    
       <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    
       <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    
       <span class="token keyword">int</span> c<span class="token operator">=</span>a<span class="token operator">/</span>b<span class="token punctuation">;</span>
                    
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的两个数相除的结果是&quot;</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    
       
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                  
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数组越界，运行时参数不够&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数字格式异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;算术异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//父类异常放在后面    </span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未知异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
   <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
<span class="token comment">//先Catch子类异常再Catch父类异常，如果把Exception e 放在前面，则具体的异常信息就无法知道了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在Java7之前，每个catch块只能捕获一个异常，Java7之后，每个catch块可以捕获多种类型的异常。</strong></p><p>例2：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
            
        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
        <span class="token keyword">int</span> c<span class="token operator">=</span>a<span class="token operator">/</span>b<span class="token punctuation">;</span>
            
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的两个数相除的结果是&quot;</span><span class="token operator">+</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
     <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IndexOutOfBoundsException</span> <span class="token operator">|</span> <span class="token class-name">NumberFormatException</span> <span class="token operator">|</span> <span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数组越界，数字格式异常，算术异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
     <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;未知异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化" aria-hidden="true">#</a> 序列化</h2><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h3><ul><li><strong>序列化</strong>： 将数据结构或对象转换成二进制字节流的过程</li><li><strong>反序列化</strong>：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程</li></ul><p>序列化和反序列化常见应用场景：</p><ul><li><p>对象在进行<strong>网络传输</strong>（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；</p></li><li><p>将对象<strong>存储到文件</strong>之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；</p></li><li><p>将对象<strong>存储到数据库</strong>（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；</p></li><li><p>将对象<strong>存储到内存</strong>之前需要进行序列化，从内存中读取出来之后需要进行反序列化。</p><p><strong>序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。</strong></p></li></ul><p><strong>对应的网络协议</strong></p><p>OSI 七层协议模型中，表示层做的事情主要就是对应用层的用户数据进行处理转换为二进制流。反过来的话，就是将二进制流转换成应用层的用户数据。就是对应的序列化和反序列化。</p><h3 id="常见的序列化协议" tabindex="-1"><a class="header-anchor" href="#常见的序列化协议" aria-hidden="true">#</a> 常见的序列化协议</h3><p>JDK 自带的序列化方式一般不会用 ，因为序列化效率低并且存在安全问题。</p><p>​ 比较常用的序列化协议有 Hessian、Kryo、Protobuf、ProtoStuff，这些都是基于二进制的序列化协议。</p><p>​ 像 JSON 和 XML 这种属于文本类序列化方式。虽然可读性比较好，但是性能较差，一般不会选择。</p><h4 id="jdk自带" tabindex="-1"><a class="header-anchor" href="#jdk自带" aria-hidden="true">#</a> <strong>JDK自带</strong></h4><p>JDK 自带的序列化，只需实现 <code>java.io.Serializable</code>接口即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcRequest</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1905122041950251207L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> requestId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> interfaceName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> methodName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameters<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramTypes<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">RpcMessageTypeEnum</span> rpcMessageTypeEnum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="serialversionuid-作用" tabindex="-1"><a class="header-anchor" href="#serialversionuid-作用" aria-hidden="true">#</a> <strong>serialVersionUID 作用</strong></h5><p>​ 序列化号 <code>serialVersionUID</code> 属于版本控制的作用。</p><p>​ 反序列化时，会检查 <code>serialVersionUID</code> 是否和当前类的 <code>serialVersionUID</code> 一致。</p><p>​ 如果 <code>serialVersionUID</code> 不一致则会抛出 <code>InvalidClassException</code> 异常。强烈推荐每个序列化类都手动指定其</p><p>​ <code>serialVersionUID</code>，如果不手动指定，那么编译器会动态生成默认的 <code>serialVersionUID</code>。</p><h5 id="static修饰的变量" tabindex="-1"><a class="header-anchor" href="#static修饰的变量" aria-hidden="true">#</a> <strong>static修饰的变量</strong></h5><p>​ <code>static</code> 修饰的变量是静态变量，位于方法区，本身是不会被序列化的。 <code>static</code> 变量是属于类的而不是对象。</p><p>​ 反序列之后，<code>static</code> 变量的值就像是默认赋予给了对象一样，看着就像是 <code>static</code> 变量被序列化，实际只是假象。</p><h5 id="transient" tabindex="-1"><a class="header-anchor" href="#transient" aria-hidden="true">#</a> <strong>transient</strong></h5><p>​ 作用：对象实例中用此关键字修饰的的变量不会被序列化；当对象被反序列化时，被 <code>transient</code> 修饰的变量值不会被序列化和恢复。</p><p>​ 关于 <code>transient</code> 还有几点注意：</p><ul><li><code>transient</code> 只能修饰变量，不能修饰类和方法。</li><li><code>transient</code> 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 <code>int</code> 类型，那么反序列后结果就是 <code>0</code>。</li><li><code>static</code> 变量因为不属于任何对象，所以无论有没有 <code>transient</code> 关键字修饰，均不会被序列化。</li></ul><p><strong>不推荐的原因</strong></p><p>​ <strong>不支持跨语言调用</strong>：如果调用的是其他语言开发的服务的时候就不支持了。</p><p>​ <strong>性能差</strong>：相比于其他序列化框架性能更低，主要原因是序列化之后的字节数组体积较大，导致传输成本加大。</p><p>​ <strong>存在安全问题</strong>：序列化和反序列化本身并不存在问题。但当输入的反序列化的数据可被用户控制，那么攻击者即可通过构造恶意输入让反序列化产生非预期的对象，在此过程中执行构造的任意代码。</p><h4 id="kryo" tabindex="-1"><a class="header-anchor" href="#kryo" aria-hidden="true">#</a> <strong>Kryo</strong></h4><p>Kryo 是一个高性能的序列化/反序列化工具，由于其变长存储特性并使用了字节码生成机制，拥有较高的运行速度和较小的字节码体积。</p><p>另外，Kryo 已经是一种非常成熟的序列化实现了，已经在 Twitter、Groupon、Yahoo 以及多个著名开源项目（如 Hive、Storm）中广泛的使用。</p><h4 id="protobuf" tabindex="-1"><a class="header-anchor" href="#protobuf" aria-hidden="true">#</a> <strong>Protobuf</strong></h4><p>Protobuf 出自于 Google，性能还比较优秀，也支持多种语言，同时还是跨平台的。</p><p>就是在使用中过于繁琐，因为需要自己定义 IDL 文件和生成对应的序列化代码。这样虽然不灵活，但是，另一方面导致 protobuf 没有序列化漏洞的风险。Protobuf 包含序列化格式的定义、各种语言的库以及一个 IDL 编译器。</p><p>正常情况下需要定义 proto 文件，然后使用 IDL 编译器编译成需要的语言。</p>`,72);function l(u,r){return s(),a("div",null,[t(" permalink: /面试/Java/异常和序列化  "),i])}const v=n(c,[["render",l],["__file","异常和序列化.html.vue"]]);export{v as default};
