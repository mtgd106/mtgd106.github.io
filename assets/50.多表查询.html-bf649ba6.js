import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as l,f as c,b as s,d as n,e as i,a}from"./app-a89b456a.js";const r="/assets/image-20230426072714171-06fb8cf6.png",d="/assets/image-20230426072734131-7a8f53b3.png",u="/assets/image-20230426072755868-ea660224.png",k="/assets/image-20230426072908457-fa9f03e9.png",m="/assets/image-20230426072855371-0d076428.png",v="/assets/image-20230426073213330-0dbaebe1.png",y="/assets/image-20230426073221799-e34fb0ce.png",g="/assets/image-20230426073235184-6ee5270c.png",w="/assets/image-20230426073246220-457789e1.png",b={},h=a('<h2 id="多表关系" tabindex="-1"><a class="header-anchor" href="#多表关系" aria-hidden="true">#</a> 多表关系</h2><h3 id="一对多" tabindex="-1"><a class="header-anchor" href="#一对多" aria-hidden="true">#</a> 一对多</h3><p>​ 案例: 部门 与 员工的关系</p><p>​ 关系: 一个部门对应多个员工，一个员工对应一个部门</p><p>​ 实现: 在多的一方建立外键，指向一的一方的主键</p><p>​ <img src="'+r+'" alt="image-20230426072714171" loading="lazy"></p><h3 id="多对多" tabindex="-1"><a class="header-anchor" href="#多对多" aria-hidden="true">#</a> 多对多</h3><p>​ 案例: 学生 与 课程的关系</p><p>​ 关系: 一个学生可以选修多门课程，一门课程也可以供多个学生选择</p><p>​ 实现: 建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><p>​ <img src="'+d+`" alt="image-20230426072734131" loading="lazy"></p><p>​</p><p>对应的SQL脚本：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>
    
	id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">comment</span> <span class="token string">&#39;主键ID&#39;</span><span class="token punctuation">,</span>
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;姓名&#39;</span><span class="token punctuation">,</span>
	<span class="token keyword">no</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;学号&#39;</span>
    
<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;学生表&#39;</span><span class="token punctuation">;</span>
	
<span class="token keyword">insert</span> <span class="token keyword">into</span> student <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&#39;黛绮丝&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2000100101&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&#39;谢逊&#39;</span><span class="token punctuation">,</span>
                                                        
	<span class="token string">&#39;2000100102&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&#39;殷天正&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2000100103&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&#39;韦一笑&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2000100104&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">create</span> <span class="token keyword">table</span> course<span class="token punctuation">(</span>
    
	id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">comment</span> <span class="token string">&#39;主键ID&#39;</span><span class="token punctuation">,</span>
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;课程名称&#39;</span>
    
<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;课程表&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> course <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Java&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&#39;PHP&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token boolean">null</span> <span class="token punctuation">,</span> <span class="token string">&#39;MySQL&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span> <span class="token string">&#39;Hadoop&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">create</span> <span class="token keyword">table</span> student_course<span class="token punctuation">(</span>
    
	id <span class="token keyword">int</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;主键&#39;</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>
	studentid <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;学生ID&#39;</span><span class="token punctuation">,</span>
	courseid <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;课程ID&#39;</span><span class="token punctuation">,</span>
	<span class="token keyword">constraint</span> fk_courseid <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>courseid<span class="token punctuation">)</span> <span class="token keyword">references</span> course <span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token keyword">constraint</span> fk_studentid <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>studentid<span class="token punctuation">)</span> <span class="token keyword">references</span> student <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
    
<span class="token punctuation">)</span><span class="token keyword">comment</span> <span class="token string">&#39;学生课程中间表&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">insert</span> <span class="token keyword">into</span> student_course <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>，
    <span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一对一" tabindex="-1"><a class="header-anchor" href="#一对一" aria-hidden="true">#</a> 一对一</h3><p>​ 案例：用户 与 用户详情的关系</p><p>​ 关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</p><p>​ 实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(unique)</p><p>​ <img src="`+u+`" alt="image-20230426072755868" loading="lazy"></p><h2 id="查询分类" tabindex="-1"><a class="header-anchor" href="#查询分类" aria-hidden="true">#</a> 查询分类</h2><h3 id="内连接" tabindex="-1"><a class="header-anchor" href="#内连接" aria-hidden="true">#</a> 内连接</h3><p><strong>查询两张表的交集部分</strong></p><p>隐式内连接</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token punctuation">,</span> 表<span class="token number">2</span> <span class="token keyword">where</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显式内连接</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token punctuation">[</span> <span class="token keyword">inner</span> <span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 连接条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><p>   查询每一个员工的姓名 , 及关联的部门的名称 (隐式内连接实现)</p><p>   表结构：emp , dept</p>`,29),q={href:"http://dept.id",target:"_blank",rel:"noopener noreferrer"},f=a(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> emp<span class="token punctuation">.</span>name <span class="token punctuation">,</span> dept<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp <span class="token punctuation">,</span> dept <span class="token keyword">where</span> emp<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>id <span class="token punctuation">;</span>

<span class="token comment">-- 为每一张表起别名,简化SQL编写</span>

<span class="token comment">-- 一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段。</span>

<span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span>d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp e <span class="token punctuation">,</span> dept d <span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>   查询每一个员工的姓名 , 及关联的部门的名称 (显式内连接实现)</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp e <span class="token keyword">inner</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

<span class="token comment">-- 为每一张表起别名,简化SQL编写</span>
<span class="token keyword">select</span> e<span class="token punctuation">.</span>name<span class="token punctuation">,</span> d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp e <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 作用：<strong>将两个表中能够相对应的部分展示出来</strong></p><p>​ 例：</p><p>​ <img src="`+k+'" alt="image-20230426072908457" loading="lazy"></p><p>​</p><p>​ <img src="'+m+`" alt="image-20230426072855371" loading="lazy"></p><p>查询出用户所拥有的银行卡：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> person <span class="token keyword">inner</span> <span class="token keyword">join</span> card <span class="token keyword">on</span> person<span class="token punctuation">.</span>cardId<span class="token operator">=</span>card<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><p>​ <img src="`+v+`" alt="image-20230426073213330" loading="lazy"></p><p>​ 因为王五拥有的6号卡在第二张表中没有记录，所以查询结果中没有王五的信息，即，内连接查询出两张表的共同部分。</p><h3 id="外连接" tabindex="-1"><a class="header-anchor" href="#外连接" aria-hidden="true">#</a> 外连接</h3><h4 id="左外连接" tabindex="-1"><a class="header-anchor" href="#左外连接" aria-hidden="true">#</a> 左外连接</h4><p>查询左表所有数据，以及两张表交集部分数据。</p><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">left</span> <span class="token punctuation">[</span> <span class="token keyword">outer</span> <span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>在on 条件之后还可以再跟where子句，且where后的条件最后执行。</strong></p><p>作用：<strong>以表1为准，将表2中能与表1对应的部分显示出来，没有对应的补NULL(表1的数据全部取出)</strong></p><p>例：</p><p>   以上一节中的两张表为数据表，使用左连接查询用户及用户所拥有的卡</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from person left join card on person.cardId=card.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>   结果：</p><p>​ <img src="`+y+`" alt="image-20230426073221799" loading="lazy"></p><p>​ <strong>王五的id和姓名能够查出(即，能够展示出左表的所有信息)，但6号卡在第二张表中没有记录，所以以null代替。</strong></p><h4 id="右外连接" tabindex="-1"><a class="header-anchor" href="#右外连接" aria-hidden="true">#</a> 右外连接</h4><p>查询右表所有数据，以及两张表交集部分数据</p><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表<span class="token number">1</span> <span class="token keyword">right</span> <span class="token punctuation">[</span> <span class="token keyword">outer</span> <span class="token punctuation">]</span> <span class="token keyword">join</span> 表<span class="token number">2</span> <span class="token keyword">on</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>作用：<strong>以表2为准,将表1中能与表2对应的部分显示出来,没有对应的补NULL(表2的数据全部取出)</strong></p><p>例1</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> person <span class="token keyword">right</span> <span class="token keyword">join</span> card <span class="token keyword">on</span> person<span class="token punctuation">.</span>cardId<span class="token operator">=</span>card<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果：</p><p>​ <img src="`+g+`" alt="image-20230426073235184" loading="lazy"></p><p>例2</p><p>   查询emp表的所有数据, 和对应的部门信息。</p><p>   由于需求中提到，要查询emp的所有数据，所以是不能内连接查询的，需要考虑使用外连接查询。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp e <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

<span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp e <span class="token keyword">left</span> <span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>   ①A inner join B：取交集</p><p>   ②A left join B：取A全部，如果B没有对应的值，则为null</p><p>   ③A right join B：取B全部，如果A没有对应的值，则为null</p><p>   ④A full outer join B：取并集，如果彼此没有对应的值为null</p><p>​ <img src="`+w+`" alt="image-20230426073246220" style="zoom:80%;"></p><h2 id="自连接" tabindex="-1"><a class="header-anchor" href="#自连接" aria-hidden="true">#</a> 自连接</h2><h3 id="自连接查询" tabindex="-1"><a class="header-anchor" href="#自连接查询" aria-hidden="true">#</a> 自连接查询</h3><p>自己连接自己，也就是把一张表连接查询多次。</p><p>对于自连接查询，可以是内连接查询，也可以是外连接查询。</p><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表A 别名A <span class="token keyword">join</span> 表A 别名B <span class="token keyword">ON</span> 条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例：</p><p>   查询员工及其所属领导的名字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">.</span>name<span class="token punctuation">,</span>b<span class="token punctuation">.</span>name <span class="token keyword">from</span> emp a<span class="token punctuation">,</span>emp b <span class="token keyword">where</span> a<span class="token punctuation">.</span>managerid <span class="token operator">=</span> b<span class="token punctuation">.</span>id<span class="token punctuation">;</span> 

<span class="token comment">-- 在自连接查询中，必须要为表起别名，要不然不清楚所指定的条件、返回的字段，到底是哪一张表的字段。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="联合查询" tabindex="-1"><a class="header-anchor" href="#联合查询" aria-hidden="true">#</a> 联合查询</h3><p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。</p><p>语法：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表A <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">union</span> <span class="token punctuation">[</span> <span class="token keyword">ALL</span> <span class="token punctuation">]</span>

<span class="token keyword">select</span> 字段列表 <span class="token keyword">from</span> 表B <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>   <strong>1.对于联合查询的多张表，表的列数和列的顺序必须保持一致，列的字段类型也必须保持一致。</strong></p><p>   <strong>2.union all 会将全部的数据直接合并在一起，union 会对合并之后的数据去重。</strong></p><p>   <strong>3.如果多条查询语句查询出来的结果，字段数量不一致，在进行union/union all联合查询时，将会报错</strong></p><p>   4.union会将查询之后的行垂直放在一起，join是将查询之后行水平放在一起。</p><p>​ 例：</p><p>   将薪资低于 5000 的员工 , 和 年龄大于 50 岁的员工全部查询出来。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary <span class="token operator">&lt;</span> <span class="token number">5000</span>

<span class="token keyword">union</span> <span class="token keyword">all</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> age <span class="token operator">&gt;</span> <span class="token number">50</span><span class="token punctuation">;</span>

<span class="token comment">#union all查询出来的结果，仅仅进行简单的合并，并未去重，如果使用union，则会对结果进行去重</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p><h2 id="子查询" tabindex="-1"><a class="header-anchor" href="#子查询" aria-hidden="true">#</a> 子查询</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>​ SQL语句中嵌套select语句，称为嵌套查询，又称子查询。</p><p>​ 即，将一个 <code>select</code> 查询（子查询）的结果作为另一个 SQL 语句（主查询）的数据来源或者判断条件。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t1 <span class="token keyword">where</span> column1 <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> column1 <span class="token keyword">from</span> t2 <span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>子查询可以嵌入 <code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 语句中，也可以和 <code>=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>IN</code>、<code>BETWEEN</code>、<code>EXISTS</code> 等运算符一起使用。</p><p>分类：</p><p>  根据子查询结果不同，分为：</p><p>     A. 标量子查询（子查询结果为单个值）</p><p>     B. 列子查询(子查询结果为一列)</p><p>     C. 行子查询(子查询结果为一行)</p><p>     D. 表子查询(子查询结果为多行多列)</p><p>  根据子查询位置，分为：</p><p>     A. where之后</p><p>     B. from之后</p><p>     C. select之后</p><h3 id="标量子查询" tabindex="-1"><a class="header-anchor" href="#标量子查询" aria-hidden="true">#</a> 标量子查询</h3><p><strong>子查询返回的结果是单个值（数字、字符串、日期等），是最简单的形式</strong>，这种子查询称为标量子查询。</p><p>常用的操作符：=    &lt;&gt;    &gt;    &gt;=    &lt;    &lt;=</p><p>例：</p><p>  A. 查询 &quot;销售部&quot; 的所有员工信息</p><p>    完成这个需求时，我们可以将需求分解为两步：</p><p>    ①查询 &quot;销售部&quot; 部门ID</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;销售部&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>    ②根据 &quot;销售部&quot; 部门ID, 查询员工信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;销售部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  B.查询在 &quot;方东白&quot; 入职之后的员工信息</p><p>    ①查询 方东白 的入职日期</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> entrydate <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;方东白&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>    ②查询指定入职日期之后入职的员工信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> entrydate <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">select</span> entrydate <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;方东白&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="列子查询" tabindex="-1"><a class="header-anchor" href="#列子查询" aria-hidden="true">#</a> 列子查询</h3><p><strong>子查询返回的结果是一列（可以是多行）</strong>，这种子查询称为列子查询。</p><p>常用的操作符：in、not in、 any、some、all</p><table><thead><tr><th style="text-align:left;">操作符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">in         </td><td style="text-align:left;">在指定的集合范围内，多选一</td></tr><tr><td style="text-align:left;">not in</td><td style="text-align:left;">不在指定的集合范围内</td></tr><tr><td style="text-align:left;">any</td><td style="text-align:left;">子查询返回列表中，有任意一个满足即可</td></tr><tr><td style="text-align:left;">some</td><td style="text-align:left;">与any等同，使用some的地方都可以使用any</td></tr><tr><td style="text-align:left;">all</td><td style="text-align:left;">子查询返回列表的所有值都必须满足</td></tr></tbody></table><p>例：</p><p>  A. 查询 &quot;销售部&quot; 和 &quot;市场部&quot; 的所有员工信息-----使用in操作符</p><p>    ①查询 &quot;销售部&quot; 和 &quot;市场部&quot; 的部门ID</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;销售部&#39;</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">&#39;市场部&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>    ②根据部门ID, 查询员工信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;销售部&#39;</span> <span class="token operator">or</span>  name <span class="token operator">=</span> <span class="token string">&#39;市场部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  B. 查询比 财务部 所有人工资都高的员工信息-----使用all操作符</p><p>    ①查询所有 财务部 人员工资</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询财务部门的id</span>
<span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;财务部&#39;</span><span class="token punctuation">;</span>   

<span class="token comment">-- 查询财务部分所有人员的工资  子查询的返回结果是单个值，是标量子查询，使用 = 操作符</span>
<span class="token keyword">select</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;财务部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>    ②查询比 财务部 所有人工资都高的员工信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary <span class="token operator">&gt;</span> <span class="token keyword">all</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span>
                                      
										<span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;财务部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  C. 查询比研发部其中任意一人工资高的员工信息-----使用any操作符</p><p>    ①查询研发部所有人工资</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;研发部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>    ②比研发部其中任意一人工资高的员工信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> salary <span class="token operator">&gt;</span> <span class="token keyword">any</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept_id <span class="token operator">=</span>

                                      <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> dept <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;研发部&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="行子查询" tabindex="-1"><a class="header-anchor" href="#行子查询" aria-hidden="true">#</a> 行子查询</h3><p><strong>查询返回的结果是一行(可以是多列)，</strong> 这种子查询称为行子查询。</p><p>常用的操作符：= 、&lt;&gt; 、in、not in</p><p>例：</p><p>  A. 查询与 &quot;张无忌&quot; 的薪资及直属领导相同的员工信息 ;</p><p>    ①查询 &quot;张无忌&quot; 的薪资及直属领导</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> salary<span class="token punctuation">,</span> managerid <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张无忌&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>    ②查询与 &quot;张无忌&quot; 的薪资及直属领导相同的员工信息 ;</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token punctuation">(</span>salary<span class="token punctuation">,</span>managerid<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">select</span> salary<span class="token punctuation">,</span> managerid <span class="token keyword">from</span> emp 
                                              
                                               <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张无忌&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="表子查询" tabindex="-1"><a class="header-anchor" href="#表子查询" aria-hidden="true">#</a> 表子查询</h3><p>​ <strong>查询返回的结果是多行多列</strong>，这种子查询称为表子查询。</p><p>​ 常用的操作符：in</p><p>​ 例：</p><p>  A. 查询与 &quot;鹿杖客&quot; , &quot;宋远桥&quot; 的职位和薪资相同的员工信息</p><p>    ①查询 &quot;鹿杖客&quot; , &quot;宋远桥&quot; 的职位和薪资</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> job<span class="token punctuation">,</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;鹿杖客&#39;</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">&#39;宋远桥&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>    ②查询与 &quot;鹿杖客&quot; , &quot;宋远桥&quot; 的职位和薪资相同的员工信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 子查询的返回结果为两组值，两行两列。所以，where之后的job和salary分别等于这两组值</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> <span class="token punctuation">(</span>job<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token operator">in</span> <span class="token punctuation">(</span> <span class="token keyword">select</span> job<span class="token punctuation">,</span> salary <span class="token keyword">from</span> emp <span class="token keyword">where</span> name <span class="token operator">=</span>

                                         <span class="token string">&#39;鹿杖客&#39;</span> <span class="token operator">or</span> name <span class="token operator">=</span> <span class="token string">&#39;宋远桥&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  B. 查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息 , 及其部门信息</p><p>    ①查询入职日期是 &quot;2006-01-01&quot; 之后的员工信息</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> entrydate <span class="token operator">&gt;</span> <span class="token string">&#39;2006-01-01&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>    ②查询这部分员工, 对应的部门信息;</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 可以将子查询的返回结果看做一张表，给表起个别名为e，e.*即为入职日期在06年之后的员工的信息</span>

<span class="token keyword">select</span> e<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">,</span> d<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> entrydate <span class="token operator">&gt;</span> <span class="token string">&#39;2006-01-01&#39;</span><span class="token punctuation">)</span> e <span class="token keyword">left</span>

			<span class="token keyword">join</span> dept d <span class="token keyword">on</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">.</span>id <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>`,142);function x(_,j){const e=t("ExternalLinkIcon");return o(),l("div",null,[c(" permalink: /MySQL/基础语法/多表查询  "),h,s("p",null,[n("   连接条件：emp.dept_id = "),s("a",q,[n("dept.id"),i(e)])]),f])}const L=p(b,[["render",x],["__file","50.多表查询.html.vue"]]);export{L as default};
