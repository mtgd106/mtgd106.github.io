const e=JSON.parse('{"key":"v-f11435b0","path":"/posts/note/Docker/%E6%95%B0%E6%8D%AE%E5%8D%B7.html","title":"数据卷","lang":"zh-CN","frontmatter":{"title":"数据卷","author":{"name":"北斗星司"},"category":["运维"],"tag":["Docker"],"date":"2023-07-13T15:08:32.000Z","icon":"file","description":"数据卷 问题 容器与数据耦合的问题 不便于修改，当我们要修改Nginx的html内容时，需要进入容器内部修改，很不方便。 数据不可复用，在容器内的修改对外是不可见的。所有修改对新创建的容器是不可复用的。 升级维护困难，数据在容器内，如果要升级容器必然删除旧容器，所有数据都跟着删除了。 定义 Docker容器产生的数据，如果不通过docker commit命令生成新的镜像，使得数据做为镜像的一部分保存下来， 那么当容器删除后，数据自然也就没有了。为了能保存数据，在docker中可以使用数据卷。 卷(volume)就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过UnionFS。","head":[["meta",{"property":"og:url","content":"https://mtgd106.github.io/posts/note/Docker/%E6%95%B0%E6%8D%AE%E5%8D%B7.html"}],["meta",{"property":"og:site_name","content":"北斗星司"}],["meta",{"property":"og:title","content":"数据卷"}],["meta",{"property":"og:description","content":"数据卷 问题 容器与数据耦合的问题 不便于修改，当我们要修改Nginx的html内容时，需要进入容器内部修改，很不方便。 数据不可复用，在容器内的修改对外是不可见的。所有修改对新创建的容器是不可复用的。 升级维护困难，数据在容器内，如果要升级容器必然删除旧容器，所有数据都跟着删除了。 定义 Docker容器产生的数据，如果不通过docker commit命令生成新的镜像，使得数据做为镜像的一部分保存下来， 那么当容器删除后，数据自然也就没有了。为了能保存数据，在docker中可以使用数据卷。 卷(volume)就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过UnionFS。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-06T06:59:59.000Z"}],["meta",{"property":"article:author","content":"北斗星司"}],["meta",{"property":"article:tag","content":"Docker"}],["meta",{"property":"article:published_time","content":"2023-07-13T15:08:32.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-06T06:59:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据卷\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-13T15:08:32.000Z\\",\\"dateModified\\":\\"2023-11-06T06:59:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"北斗星司\\"}]}"]]},"headers":[{"level":2,"title":"数据卷","slug":"数据卷","link":"#数据卷","children":[{"level":3,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"数据卷操作","slug":"数据卷操作","link":"#数据卷操作","children":[]},{"level":3,"title":"添加数据卷","slug":"添加数据卷","link":"#添加数据卷","children":[]},{"level":3,"title":"数据卷容器","slug":"数据卷容器","link":"#数据卷容器","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":1699253999000,"updatedTime":1699253999000,"contributors":[{"name":"mtgd106","email":"1487722388@qq.com","commits":1}]},"readingTime":{"minutes":5.28,"words":1055},"filePathRelative":"posts/note/Docker/数据卷.md","localizedDate":"2023年7月13日","excerpt":"<h2> 数据卷</h2>\\n<h3> 问题</h3>\\n<p><strong>容器与数据耦合的问题</strong></p>\\n<ol>\\n<li>\\n<p>不便于修改，当我们要修改Nginx的html内容时，需要进入容器内部修改，很不方便。</p>\\n</li>\\n<li>\\n<p>数据不可复用，在容器内的修改对外是不可见的。所有修改对新创建的容器是不可复用的。</p>\\n</li>\\n<li>\\n<p>升级维护困难，数据在容器内，如果要升级容器必然删除旧容器，所有数据都跟着删除了。</p>\\n</li>\\n</ol>\\n<h3> 定义</h3>\\n<ol>\\n<li>\\n<p>Docker容器产生的数据，如果不通过docker commit命令生成新的镜像，使得数据做为镜像的一部分保存下来，</p>\\n<p>那么当容器删除后，数据自然也就没有了。为了能保存数据，在docker中可以使用数据卷。</p>\\n</li>\\n<li>\\n<p><strong>卷(volume)就是目录或文件，存在于一个或多个容器中</strong>，由docker挂载到容器，但不属于联合文件系统，因此能够绕过UnionFS。</p>\\n</li>\\n</ol>","copyright":{"author":"北斗星司"},"autoDesc":true}');export{e as data};
