import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as e}from"./app-a89b456a.js";const p={},t=e(`<h2 id="grep" tabindex="-1"><a class="header-anchor" href="#grep" aria-hidden="true">#</a> grep</h2><p>文本搜索工具，根据用户指定的模式(过滤条件)对目标文件或管道数据流<strong>逐行进行匹配检查</strong>，打印匹配到的行。</p><p>grep [options] [pattern] file1 file2</p><p>-c   只打印匹配到的行数</p><p>-i   忽略字符大小写</p><p>-l   只显示匹配的文件名</p><p>-L   列出不匹配的文件名</p><p>-n   显示行号</p><p>-o   仅显示匹配到的字符串本身</p><p>-v   显示不能被模式匹配到的行，即，排除匹配结果</p><p>-E   支持使用扩展的正则表达式</p><p>-r   在子文件夹中递归进行搜索</p><p>-w   只匹配过滤的单词</p><p><strong>[pattern]为正则表达式，使用时要用单引号</strong></p><p><strong>如果是匹配某个具体的字符串，则可以直接使用，不需要引号</strong></p><p>例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>. <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">&#39;^$&#39;</span> test.txt   <span class="token comment">#过滤空行</span>

<span class="token number">2</span>. <span class="token function">grep</span> hello file.txt     <span class="token comment">#在文件 file.txt 中查找字符串 &quot;hello&quot;，并打印匹配的行：</span>

<span class="token number">3</span>. <span class="token function">grep</span> <span class="token parameter variable">-l</span> vkls /etc/passwd /etc/shadow /etc/gshadow  <span class="token comment">#列出包含&#39;vkls&#39;的文件</span>

<span class="token number">4</span>. <span class="token function">grep</span> <span class="token string">&#39;[a-z]\\{5\\}&#39;</span> aa    <span class="token comment">#匹配至少有5个连续小写字母的行</span>

<span class="token number">5</span>. <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">&#39;nobody&#39;</span> /etc/passwd   <span class="token comment">#列出不包含nobody字符串的所有行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sed" tabindex="-1"><a class="header-anchor" href="#sed" aria-hidden="true">#</a> sed</h2><p><strong>sed 可依照脚本中的指令来处理、编辑文本文件，主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</strong></p><p>语法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token punctuation">[</span>-hnV<span class="token punctuation">]</span> <span class="token punctuation">[</span>-e<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>-f<span class="token operator">&lt;</span>script文件<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>文本文件<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数说明</strong>：</p><ul><li><p><code>-e&lt;script&gt;</code>或--expression=<code>&lt;script&gt;</code>   以选项中指定的script来处理输入的文本文件。</p></li><li><p><code>-f&lt;script文件&gt;</code>或--file=<code>&lt;script文件&gt;</code>   以选项中指定的script文件来处理输入的文本文件。</p></li><li><p>-h或--help   显示帮助。</p></li><li><p>-n或 --quiet 或 --silent   仅显示script处理后的结果。</p></li><li><p>-V或--version   显示版本信息。</p></li></ul><p><strong>动作说明</strong>：</p><ul><li><p>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(当前行的下一行)</p></li><li><p>c ：取代， c 的后面可以接字串，这些字串可以取代 n1到n2 之间的行。</p></li><li><p>d ：删除， d 后面通常不接任何东西；</p></li><li><p>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(当前行的上一行)；</p></li><li><p>p ：打印，将选择的某行数据打印。如果单独使用，选中的行会打印两次，一般和 -n 一起使用。</p></li><li><p>s ：取代，可以直接进行取代的工作。通常可以搭配正则表达式。</p></li></ul><p><strong>sed只是将对文件操作后的结果打印出来，实际并没有改变文件的内容。使用 -i 参数可以修改文件内容。</strong></p><p>例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">1</span>.删除第2到第5行
  <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token number">2</span>,5d <span class="token builtin class-name">test</span>  <span class="token comment"># 会输出操作后的结果</span>
  <span class="token function">sed</span> <span class="token string">&#39;2,5d&#39;</span> <span class="token builtin class-name">test</span>   <span class="token comment"># 可以不使用-e，但动作要放在单引号中</span>
  
<span class="token number">2</span>. <span class="token function">sed</span> <span class="token string">&#39;3,$d&#39;</span> <span class="token builtin class-name">test</span>  <span class="token comment">#删除第三行到最后一行</span>

<span class="token number">3</span>. <span class="token function">sed</span> <span class="token string">&#39;2a drink tea&#39;</span>  <span class="token comment">#在第二行后面添加字符串drink tea，但新添加的内容会显示在第三行</span>

<span class="token number">4</span>. <span class="token function">sed</span> <span class="token string">&#39;2i vkls&#39;</span>  <span class="token comment">#在第二行前面添加字符串vkls，同样，字符串会显示在新的第二行 </span>

<span class="token number">5</span>. <span class="token function">sed</span> <span class="token string">&#39;2,5c vkls mtgd&#39;</span> <span class="token builtin class-name">test</span>   <span class="token comment">#用字符串&quot;vkls mtgd&quot;代替第2到第5行数据</span>

<span class="token number">6</span>. <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;5,7p&#39;</span>  <span class="token comment">#打印第5到第7行的内容</span>

<span class="token number">7</span>. <span class="token function">sed</span> <span class="token parameter variable">-n</span> <span class="token string">&#39;/ab/p&#39;</span> <span class="token builtin class-name">test</span>  <span class="token comment">#打印包含ab的行  如果能找到，除了输出所有行外，还会输出匹配行</span>

<span class="token number">8</span>. <span class="token function">sed</span> <span class="token string">&#39;/12/d&#39;</span> <span class="token builtin class-name">test</span>  <span class="token comment">#将不包含12的行打印</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据的查找与替换：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sed</span> <span class="token string">&#39;s/要被取代的字串/新的字串/g&#39;</span>

例:
  <span class="token number">1</span>. <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/oo/kk/&#39;</span> <span class="token builtin class-name">test</span>   <span class="token comment">#将文件中每行第一次出现的 oo用字符串 kk替换，然后将该文件内容输出</span>
  
  <span class="token number">2</span>. <span class="token function">sed</span> <span class="token parameter variable">-e</span> <span class="token string">&#39;s/oo/kk/g&#39;</span> <span class="token builtin class-name">test</span>  <span class="token comment">#g表示全局替换</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30),l=[t];function i(c,o){return n(),a("div",null,l)}const u=s(p,[["render",i],["__file","文件处理.html.vue"]]);export{u as default};
