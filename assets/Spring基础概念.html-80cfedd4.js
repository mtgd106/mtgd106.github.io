import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as e,a as s}from"./app-a89b456a.js";const p={},o=s(`<h3 id="spring的优势" tabindex="-1"><a class="header-anchor" href="#spring的优势" aria-hidden="true">#</a> Spring的优势</h3><ul><li><p>通过控制反转和依赖注入实现<strong>松耦合</strong>。</p></li><li><p>支持<strong>面向切面</strong>的编程，并且把应用业务逻辑和系统服务分开。</p></li><li><p>通过切面和模板<strong>减少样板式代码</strong>。</p></li><li><p><strong>方便集成各种优秀框架</strong>。内部提供了对各种优秀框架的直接支持(如：Hibernate、MyBatis等)。</p></li><li><p><strong>方便程序的测试</strong>。Spring支持Junit4，添加注解便可以测试Spring程序。</p></li></ul><h3 id="aop" tabindex="-1"><a class="header-anchor" href="#aop" aria-hidden="true">#</a> AOP</h3><p>面向切面编程，作为面向对象的一种补充，将公共逻辑(事务管理、日志、缓存等)封装成切面，跟业务代码进行分离，</p><p>可以减少系统的重复代码和降低模块之间的耦合度。<strong>切面就是那些与业务无关，但所有业务模块都会调用的公共逻辑。</strong></p><h3 id="ioc" tabindex="-1"><a class="header-anchor" href="#ioc" aria-hidden="true">#</a> IoC</h3><ul><li><p><strong>控制</strong> ：指的是对象创建(实例化、管理)的权力</p></li><li><p><strong>反转</strong> ：控制权交给外部环境(Spring 框架、IoC 容器)</p></li></ul><p>控制反转，是一种设计理念，<strong>将对象创建和组装的主动控制权交给了spring容器</strong>，控制的动作被反转了，降低了系统的耦合度，利于系统维护和扩展。</p><p><strong>通过反射实现对其他对象的控制，包括初始化、创建、销毁等，解放手动创建对象的过程。</strong></p><p>将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。</p><p>IoC容器就像是一个工厂，当需要创建一个对象的时候，只需要配置好配置文件/注解即可，完全不用考虑对象是如何被创建出来的。</p><h3 id="di" tabindex="-1"><a class="header-anchor" href="#di" aria-hidden="true">#</a> DI</h3><p>指Spring创建对象的过程中，将对象依赖属性(常量、对象、集合)通过配置传递给该对象。通过某些注入方式可以让系统更灵活。</p><h3 id="spring容器-ioc容器" tabindex="-1"><a class="header-anchor" href="#spring容器-ioc容器" aria-hidden="true">#</a> Spring容器/IoC容器</h3><p>程序启动的时候会创建spring容器，会给spring容器一个清单，清单中列出了需要创建的对象以及对象依赖关系，</p><p><strong>spring容器会创建和组装好清单中的对象</strong>，然后将这些对象存放在spring容器中，当程序中需要使用的时候，</p><p>可以到容器中查找获取，然后直接使用。</p><p><strong>IoC容器是具有依赖注入功能的容器</strong>，负责对象的实例化、对象的初始化，对象和对象之间依赖关系配置、对象的销毁、对外提供对象的查找等操作，<strong>对象的整个生命周期都是由容器来控制</strong>。</p><p>我们需要使用的对象都由IoC容器进行管理，不需要再去手动通过new的方式去创建对象，由IoC容器直接帮我们组装好，</p><p>当<strong>需要使用的时候直接从IoC容器中直接获取就可以了。</strong></p><h3 id="ioc初始化过程" tabindex="-1"><a class="header-anchor" href="#ioc初始化过程" aria-hidden="true">#</a> IoC初始化过程</h3><ol><li><p>从XML中读取配置文件。</p></li><li><p>将bean标签解析成 BeanDefinition，如解析 property 元素， 并注入到 BeanDefinition 实例中。</p></li><li><p>将 BeanDefinition 注册到容器 BeanDefinitionMap 中。</p></li><li><p>BeanFactory 根据 BeanDefinition 的定义信息创建实例化和初始化 bean。</p></li></ol><p>单例bean的初始化以及依赖注入一般都在容器初始化阶段进行，只有懒加载(lazy-init为true)的单例bean是在应用第一次</p><p>调用getBean()时进行初始化和依赖注入。</p><p><strong>多例bean 在容器启动时不实例化，只有调用了getBean( )才进行实例化。</strong></p><h3 id="将类声明为bean的注解" tabindex="-1"><a class="header-anchor" href="#将类声明为bean的注解" aria-hidden="true">#</a> 将类声明为Bean的注解</h3><p>使用<code>@Configuration</code>与<code>@Bean</code>注解</p><p> <code>@Component</code> ：通用的注解，可标注任意类为 Spring组件。如果一个 Bean 不知道属于哪个层，可以使用</p><p>​               @Component注解标注。</p><p> <code>@Repository</code> : 对应持久层即 Dao 层，主要用于数据库相关操作。</p><p> <code>@Service</code> : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。</p><p> <code>@Controller</code> : 对应 Spring MVC 控制层，主要用于接收用户请求并调用 <code>Service</code> 层返回数据给前端页面。</p><h3 id="bean和-component的区别" tabindex="-1"><a class="header-anchor" href="#bean和-component的区别" aria-hidden="true">#</a> @Bean和@Component的区别</h3><ol><li><p>都是使用注解定义 Bean。@Bean 是使用 Java 代码装配 Bean，@Component 是自动装配 Bean。</p></li><li><p><strong>@Component注解用在类上，表明一个类会作为组件类</strong>，并告知Spring要为这个类创建bean，每个类对应一个 Bean。</p></li><li><p><strong>@Bean注解用在方法上，表示这个方法返回一个 Bean。</strong></p><p>@Bean需要在配置类中使用，即类上需要加上@Configuration注解。</p></li><li><p>@Bean 注解更加灵活，当需要将第三方类装配到 Spring 容器中，因为没办法直接在源代码上添加@Component注解，</p><p>所以只能使用@Bean 注解的方式。</p></li></ol><h3 id="注入bean的注解" tabindex="-1"><a class="header-anchor" href="#注入bean的注解" aria-hidden="true">#</a> 注入Bean的注解</h3><p>Spring 内置的 <code>@Autowired</code> 以及 JDK 内置的 <code>@Resource</code> 和 <code>@Inject</code> 都可以用于注入 Bean。</p><h3 id="autowired和-resource的区别" tabindex="-1"><a class="header-anchor" href="#autowired和-resource的区别" aria-hidden="true">#</a> @Autowired和@Resource的区别</h3><ol><li><p>@Autowired注解是默认按照类型(byType)装配依赖对象的，但是如果存在多个类型⼀致的bean，则无法通过byType</p><p>注入时，就会再使用byName来注入，如果还是无法判断注入哪个bean则会报错：UnsatisfiedDependencyException。</p></li></ol><p>​   例：<code>UserService</code> 接口有两个实现类: <code>UserServiceImpl1</code>和 <code>UserServiceImpl2</code>，且它们都已经被 Spring 容器所管理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span>

<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span>

<span class="token comment">/*
  报错，byName 和 byType 都无法匹配到 bean  
  因为通过类型匹配时，发现UserService有两个实现类，无法确定是哪个，然后通过name匹配，
  但userService无法匹配IoC容器中的id(此处指的是userServiceImpl1和userServiceImpl2)，于是报错。
  通过注解注入到IoC容器的id值默认是其类名首字母小写
*/</span>  
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

<span class="token comment">// 正确注入 UserServiceImpl1 对象对应的 bean</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">UserService</span> userServiceImpl1<span class="token punctuation">;</span>

<span class="token comment">// 正确注入  UserServiceImpl1 对象对应的 bean</span>
<span class="token comment">// userServiceImpl1 就是上面所说的名称</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;userServiceImpl1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>@Resource是JDK提供的注解，它会首先按照byName来装配，如果找不到bean，会自动动按照byType再找⼀次。</p><p><code>@Resource</code> 有两个比较重要且常用的属性：<code>name</code>(名称)、<code>type</code>(类型)。</p><p>如果仅指定 <code>name</code> 属性则注入方式为<code>byName</code>，如果仅指定<code>type</code>属性则注入方式为<code>byType</code>，如果同时指定<code>name</code> 和<code>type</code>属性，则注入方式为<code>byType</code>+<code>byName</code>。</p></li></ol><ul><li><p>如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常</p></li><li><p>如果指定了name，则从上下文中查找名称(id)匹配的bean进行装配，找不到则抛出异常</p></li><li><p>如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或者找到多个，都会抛出异常</p></li><li><p>如果既没有指定name，又没有指定type，则自动按照byName方式进行匹配；如果没有找到，则按照类型进行匹配</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 报错，byName 和 byType 都无法匹配到 bean</span>
<span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>

<span class="token comment">// 正确注入 UserServiceImpl1 对象对应的 bean</span>
<span class="token annotation punctuation">@Resource</span>
<span class="token keyword">private</span> <span class="token class-name">UserService</span> userServiceImpl1<span class="token punctuation">;</span>

<span class="token comment">// 正确注入 UserServiceImpl1 对象对应的 bean</span>
<span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;userServiceImpl1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="qualifier注解的作用" tabindex="-1"><a class="header-anchor" href="#qualifier注解的作用" aria-hidden="true">#</a> @Qualifier注解的作用</h3><p>当需要创建多个相同类型的 bean 并希望仅使用属性装配其中一个 bean 时，可以使用@Qualifier 注解和 @Autowired</p><p>通过指定应该装配哪个 bean 来消除歧义。</p><h3 id="bean的作用域" tabindex="-1"><a class="header-anchor" href="#bean的作用域" aria-hidden="true">#</a> Bean的作用域</h3><p><strong>singleton</strong> : IoC 容器中只有唯一的 bean 实例。<strong>Spring 中的 Bean 默认都是单例的，是对单例设计模式的应用。</strong></p><p><strong>prototype</strong> : 每次获取都会创建一个新的 bean 实例。也就是说，连续 <code>getBean()</code> 两次，得到的是不同的 Bean 实例。</p><p><strong>request</strong>(仅 Web 应用可用): 每次 HTTP 请求都会产生一个新的 bean(请求 bean)，该 bean 仅在当前 HTTP request 内有效</p><p><strong>session</strong>(仅 Web 应用可用): 每一次来自新 session 的 HTTP 请求都会产生一个新的 bean(会话 bean)，该 bean 仅在当前HTTP session 内有效。</p><p><strong>application/global-session</strong>(仅 Web 应用可用)：每个 Web 应用在启动时创建一个 Bean(应用 Bean)，该 bean 仅在当前应用启动时间内有效。</p><p><strong>websocket</strong> (仅 Web 应用可用)：每一次 WebSocket 会话产生一个新的 bean。</p><p><strong>配置作用域</strong></p><p>1.xml方式</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>singleton<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.注解方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">ConfigurableBeanFactory</span><span class="token punctuation">.</span><span class="token constant">SCOPE_PROTOTYPE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Person</span> <span class="token function">personPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="单例bean的安全问题" tabindex="-1"><a class="header-anchor" href="#单例bean的安全问题" aria-hidden="true">#</a> 单例Bean的安全问题</h3><p>如果多个线程的业务逻辑有对单例状态的修改(体现为此单例的成员属性)，则必须考虑线程安全问题。</p><p>若每个线程中对全局变量、静态变量只有读操作，而无写操作，那么不会有线程安全问题；</p><p>若有多个线程同时执行写操作，一般都需要考虑线程同步，否则就可能影响线程安全。</p><p><strong>常见的有两种解决办法：</strong></p><ol><li><p>在 Bean 中尽量避免定义可变的成员变量。</p></li><li><p>在类中定义一个 <code>ThreadLocal</code> 成员变量，将需要的可变成员变量保存在 <code>ThreadLocal</code> 中。</p></li></ol><p><strong>无状态bean和有状态bean</strong></p><ul><li><p>有实例变量的bean，称为有状态bean，可以保存数据，是非线程安全的。</p></li><li><p>没有实例变量的bean，称为无状态bean，不能保存数据，是线程安全的。</p></li></ul><p><strong>在Spring中无状态的Bean适合用单例模式，这样可以共享实例提高性能。</strong></p><p><strong>有状态的Bean在多线程环境下不安全，一般用Prototype模式或者使用ThreadLocal解决线程安全问题。</strong></p><h3 id="bean的生命周期" tabindex="-1"><a class="header-anchor" href="#bean的生命周期" aria-hidden="true">#</a> Bean的生命周期</h3><p>bean 的后置处理器，bean 生命周期有七步</p><p>(1)通过构造器创建 bean 实例(无参数构造)</p><p>(2)为 bean的属性设置值和对其他 bean 引用(调用 set 方法，即，依赖注入)</p><p>(3)把bean实例传递给后置处理器中的方法 postProcessBeforeInitialization</p><p>(4)调用 bean 的初始化方法(需要进行配置初始化方法)</p><p>(5)把 bean实例传递给 bean 后置处理器中的方法 postProcessAfterInitialization</p><p>(6)bean可以使用了(对象获取到了)</p><p>(7)当容器关闭时候，调用 bean 的销毁方法(需要进行配置销毁方法)</p><h3 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h3><ol><li><p>连接点：类里面哪些方法可以被增强，这些方法称为连接点。</p><p>  连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方法时、抛出异常时、甚至修改一个字段时。</p></li></ol><p>​     <strong>切面代码可以利用这些点插入到应用的正常流程之中，并添加新的行为。</strong></p><ol start="2"><li><p>切入点：实际被真正增强的方法，称为切入点。</p></li><li><p>通知(Advice)：实际增强的逻辑部分称为通知。</p></li><li><p>切面(Aspect)：切入点+通知。</p></li><li><p>织入(Weaving)：</p><p><strong>将通知应用到目标对象，进而生成代理对象的过程</strong>。</p><p>在目标对象的生命周期里有以下时间点可以进行织入：</p></li></ol><p>​     编译期：切面在目标类编译时被织入。AspectJ的织入编译器是以这种方式织入切面的。</p><p>​     类加载期：切面在目标类加载到JVM时被织入。需要特殊的类加载器，它可以在目标类被引入应用之前增强该目标类</p><p>               的字节码。AspectJ5的加载时织入就支持以这种方式织入切面。</p><p>​     运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象动态地创建一个</p><p>​              代理对象。SpringAOP就是以这种方式织入切面。</p><h3 id="通知的类型" tabindex="-1"><a class="header-anchor" href="#通知的类型" aria-hidden="true">#</a> 通知的类型</h3><p><strong>Before</strong>(前置通知)：在目标对象的方法调用之前触发。</p><p><strong>After</strong>(后置通知)：在目标对象的方法调用之后触发，此时不会关心方法的输出是什么。</p><p><strong>AfterReturning</strong>(返回通知)：目标对象的方法调用完成，在返回结果值之后触发。</p><p><strong>AfterThrowing</strong>(异常通知) ：目标对象的方法运行中抛出异常后触发。AfterReturning 和 AfterThrowing 两者互斥。</p><p>​    如果方法调用成功无异常，则会有返回值；如果方法抛出了异常，则不会有返回值。</p><p><strong>Around</strong>(环绕通知)：编程式控制目标对象的方法调用。环绕通知是所有通知类型中可操作范围最大的一种，</p><p>​    因为它可以直接拿到目标对象，以及要执行的方法，所以环绕通知可以任意的在目标对象的方法调用前后搞事，</p><p>​    甚至不调用目标对象的方法。</p><h3 id="代理" tabindex="-1"><a class="header-anchor" href="#代理" aria-hidden="true">#</a> 代理</h3><p>假设有类A和B实现了接口C中的方法，现在需要在不修改源代码的基础上在方法执行之前执行其他的代码。</p><p>此时，只需要给C创建一个代理类，通过代理类去访问目标对象，需要添加的一些共有的功能都放在代理中，</p><p>当有其他需求的时候，只需修改ServiceProxy的代码，方便系统的扩展和测试。</p><p><strong>使用一个代理将对象包装起来，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理。</strong></p><p><strong>代理对象决定是否以及何时将方法调用转到原始对象上。</strong></p><p>Spring有两种实现方式：静态代理和动态代理。</p><p><strong>静态代理</strong></p><p>静态代理：代理类在编译阶段生成，在编译阶段将通知织入Java字节码中，也称编译时增强。AspectJ使用的是静态代理。</p><p>  缺点：代理对象需要与目标对象实现一样的接口，并且实现接口的方法，有冗余代码。同时，一旦接口类中增加方法，</p><p>​ 目标对象与代理对象都要维护。</p><p><strong>动态代理</strong></p><p>动态代理：代理类在程序运行时创建，AOP框架不会去修改字节码，而是<strong>在内存中临时生成一个代理对象</strong>，</p><p>​   <strong>在运行期间对业务方法进行增强，不会生成新类</strong>。</p><h3 id="两种动态代理的区别" tabindex="-1"><a class="header-anchor" href="#两种动态代理的区别" aria-hidden="true">#</a> 两种动态代理的区别</h3><p>Spring AOP中的动态代理主要有两种方式：JDK动态代理和CGLIB动态代理。</p><p><strong>JDK动态代理</strong></p><p>如果目标类实现了接口，Spring AOP会选择使用JDK动态代理目标类。代理类根据目标类实现的接口动态生成，</p><p>不需要自己编写，生成的代理类和目标类都实现相同的接口。JDK动态代理的核心是<code>InvocationHandler</code>接口和<code>Proxy</code>类。</p><p>缺点：<strong>目标类必须有实现的接口。如果某个类没有实现接口，那么这个类就不能用JDK动态代理。</strong></p><p><strong>CGLIB(Code Generation Library)动态代理</strong></p><p><strong>通过继承实现。</strong> 如果目标类没有实现接口，那么Spring AOP会选择使用CGLIB来动态代理目标类。</p><p>CGLIB<strong>可以在运行时动态生成类的字节码，动态创建目标类的子类对象，在子类对象中增强目标类。</strong></p><p>CGLIB是通过继承的方式实现的动态代理，因此如果某个类被标记为<code>final</code>，那么它是无法使用CGLIB做动态代理的。</p><p>CGLIB本质上是通过动态的生成一个子类去覆盖所要代理的类(非final修饰的类和方法)。</p><p>Enhancer可能是CGLIB中最常用的一个类，和Proxy不同的是，Enhancer既能够代理普通的class，也能够代理接口。</p><p><strong>Enhancer创建一个被代理对象的子类并且拦截所有的方法调用(包括从Object中继承的toString和hashCode方法)。</strong></p><p>Enhancer不能够拦截final方法，例如Object.getClass()方法，这是由于Java final方法语义决定的。基于同样的道理，</p><p>  <strong>Enhancer也不能对final类进行代理操作。</strong></p><p>优点：目标类不需要实现特定的接口，更加灵活。</p><p>什么时候采用哪种动态代理？</p><ol><li><p>如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</p></li><li><p>如果目标对象实现了接口，可以强制使用CGLIB实现AOP</p></li><li><p>如果目标对象没有实现了接口，必须采用CGLIB库</p></li></ol><p><strong>两者的区别</strong>：</p><ol><li><p>JDK动态代理使用jdk中的类Proxy来创建代理对象，它<strong>使用反射技术</strong>来实现，不需要导入其他依赖。</p><p><strong>CGLIB需要引入相关依赖</strong>：asm.jar，它使用字节码增强技术来实现。</p></li><li><p>如果目标类实现了接口，Spring Aop默认使用JDK动态代理方式来增强方法，没有实现接口的时候使用CGLIB动态代理。</p></li></ol>`,129),i=[o];function t(r,c){return a(),e("div",null,i)}const u=n(p,[["render",t],["__file","Spring基础概念.html.vue"]]);export{u as default};
