import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,f as p,a as o}from"./app-a89b456a.js";const t={},a=o('<h2 id="基础sql优化" tabindex="-1"><a class="header-anchor" href="#基础sql优化" aria-hidden="true">#</a> 基础SQL优化</h2><ol><li><p>查询SQL尽量不要使用select *，而是具体字段</p><p>理由：</p></li></ol><p>​     1、字段多时，大表能达到100多个字段甚至达200多个字段</p><p>​     2、只取需要的字段，节省资源、减少网络开销</p><p>​     3、select * 进行查询时，很可能不会用到索引，就会造成全表扫描</p><ol start="2"><li>避免在where子句中使用or来连接条件</li></ol><p>  理由：使用or可能会使索引失效，从而进行全表扫描</p><ol start="3"><li>使用varchar代替char</li></ol><p>  理由：</p><p>    varchar变长字段按数据内容实际长度存储，存储空间小，可以节省存储空间</p><p>    char按声明大小存储，不足补空格</p><p>​   对于查询来说，在一个相对较小的字段内搜索，效率更高</p><ol start="4"><li><p>尽量使用数值替代字符串类型</p></li><li><p>索引不适合建在有大量重复数据的字段上</p></li><li><p>尽量避免使用in 和not in，会导致引擎走全表扫描</p></li><li><p><strong>order by 条件要与where中条件一致，否则order by不会利用索引进行排序</strong></p></li><li><p><strong>多表关联查询时，小表在前，大表在后。</strong></p></li></ol><p>  在MySQL中，执行 from 后的表关联查询是从左往右执行的（Oracle相反），第一张表会涉及到全表扫描，</p><p>  所以将小表放在前面，先扫小表，扫描快效率较高，再扫描后面的大表。</p>',15);function i(c,s){return e(),l("div",null,[p(" permalink: /MySQL/原理/基础SQL优化    "),a])}const h=r(t,[["render",i],["__file","50.基础SQL优化.html.vue"]]);export{h as default};
