import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t,a as e}from"./app-a89b456a.js";const p="/assets/image-20230426100131505-c3368789.png",o={},c=e(`<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><ol><li><p>不是程序本身，可以对程序作出解释，与注释类似。</p></li><li><p>可以被其他程序(如，编译器)读取。如果没有注解信息处理流程，则注解毫无意义。</p></li><li><p>可以附加在package，class，method，field等上面，相当于添加了额外的辅助信息，可以通过反射访问这些元数据。</p></li></ol><p>作用：</p><ol><li><p>生成文档，通过代码里标识的元数据生成javadoc文档。</p></li><li><p>编译检查，通过代码里标识的元数据让编译器在编译期间进行检查验证。</p></li><li><p>编译时动态处理，编译时通过代码里标识的元数据动态处理，例如，动态生成代码。</p></li><li><p>运行时动态处理，运行时通过代码里标识的元数据动态处理，例如，使用反射注入实例。</p></li></ol><h2 id="格式" tabindex="-1"><a class="header-anchor" href="#格式" aria-hidden="true">#</a> 格式</h2><p>注解以 <strong>@注解名</strong> 的形式在代码中存在，还可以添加一些参数值。例如：@SuppressWarnings(value=&quot;unchecked&quot;);</p><h2 id="内置注解" tabindex="-1"><a class="header-anchor" href="#内置注解" aria-hidden="true">#</a> 内置注解</h2><ol><li><p>@Override</p><p>定义在java.lang.Override中，此注解只适用于修饰方法，表示打算重写超类中的一个方法。</p></li><li><p>@Deprecated</p><p>定义在java.lang.Deprecated中，此注解可用于修辞方法、属性、类，表示不鼓励程序员使用这样的元素，</p><p>通常是因为它很危险或存在更好的选择。</p></li><li><p>@SuppressWarnings</p><p>定义在java.lang.SuppressWarnings中，作用是不显示编译时的警告信息。该注解需要添加一个参数才能使用：</p></li></ol><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">deprecation</td><td style="text-align:center;">使用了过时的类或方法时的警告</td></tr><tr><td style="text-align:center;">unchecked</td><td style="text-align:center;">执行了未检查的转换时的警告。例如，使用集合时未指定泛型</td></tr><tr><td style="text-align:center;">fallthrough</td><td style="text-align:center;">当在switch语句使用时发生case穿透</td></tr><tr><td style="text-align:center;">path</td><td style="text-align:center;">在类路径、源文件路径等中有不存在路径时的警告</td></tr><tr><td style="text-align:center;">serial</td><td style="text-align:center;">当在可序列化的类上缺少serialVersionUID定义时的警告</td></tr><tr><td style="text-align:center;">finally</td><td style="text-align:center;">任何finally子句不能完成时的警告</td></tr><tr><td style="text-align:center;">all</td><td style="text-align:center;">关于以上所有情况的警告</td></tr></tbody></table><p>例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>

<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;deprecation&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解" aria-hidden="true">#</a> 元注解</h2><p><strong>元注解的作用是负责注解其他注解。</strong></p><p>java定义了四个标准的meta-annotation类型，它们被用来对其它 annotation类型作说明。</p><p>这些类型和它们所支持的类在java.lang.annotation包中可以找到。</p><ol><li><p>@Target</p><p>用于描述注解的使用范围(即：被描述的注解可以用在什么地方)，取值范围定义在ElementType 枚举类中。</p></li></ol><table><thead><tr><th style="text-align:center;">可使用的地方</th><th style="text-align:center;">取值</th></tr></thead><tbody><tr><td style="text-align:center;">包</td><td style="text-align:center;">PACKAGE</td></tr><tr><td style="text-align:center;">类、接口、枚举、Annotation类型</td><td style="text-align:center;">TYPE</td></tr><tr><td style="text-align:center;">类成员(方法，构造方法，成员变量，枚举值)</td><td style="text-align:center;">构造方法：CONSTRUCTOR   变量：FIELD  方法：METHOD</td></tr><tr><td style="text-align:center;">方法参数和本地变量</td><td style="text-align:center;">局部变量：LOCAL_VARIABLE   参数：PARAMETER</td></tr></tbody></table><p>​ 例：@Target(value=ElementType.TYPE)</p><ol start="2"><li><p>@Retention</p><p>表示需要在什么级别保存该注解信息，用于描述注解的生命周期</p><p>Reteniton注解用来限定那些被它所注解的注解类在注解到其他类上以后，可被保留到何时。</p><p>取值定义在RetentionPolicy枚举类中。</p></li></ol><table><thead><tr><th style="text-align:center;">取值----RetentionPolicy</th><th style="text-align:center;">作用</th></tr></thead><tbody><tr><td style="text-align:center;">SOURCE</td><td style="text-align:center;">在源文件中有效(即，源文件中保留)</td></tr><tr><td style="text-align:center;">CLASS</td><td style="text-align:center;">在class文件中有效</td></tr><tr><td style="text-align:center;">RUNTIME</td><td style="text-align:center;">在运行时有效，<strong>取值为RUNTIME时可以被反射机制读取</strong></td></tr></tbody></table><ol start="3"><li><p>@Documented</p><p>在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。</p></li><li><p>@Inherited</p><p>被它修饰的Annotation将具有继承性。如果某个类使用了被@Inherited修饰的Annotation，则其子类将自动具有该注解。</p></li><li><p>@Repeatable(Java8新增)</p><p>允许多次使用同一个注解</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Authorities</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Authority</span> <span class="token punctuation">{</span>
     <span class="token class-name">String</span> <span class="token function">role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Authorities</span> <span class="token punctuation">{</span>
    <span class="token class-name">Authority</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepeatAnnotationUseNewVersion</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token string">&quot;Admin&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token string">&quot;Manager&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//创建重复注解Authority时，加上@Repeatable，指向存储注解Authorities，在使用时候，直接可以重复使用Authority注解。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><p>@Native(Java8新增)</p><p>使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，常常被代码生成工具使用。不常使用。</p></li></ol><h2 id="获取注解" tabindex="-1"><a class="header-anchor" href="#获取注解" aria-hidden="true">#</a> 获取注解</h2><p><strong>反射包 java.lang.reflect 下的AnnotatedElement接口提供了获取注解的方法。</strong></p><p>注意：<strong>只有注解被定义为RUNTIME后，该注解才能是运行时可见</strong>。</p><ul><li><code>boolean isAnnotationPresent(Class&lt;?extends Annotation&gt; annotationClass)</code></li></ul><p>​ 判断该程序元素上是否包含指定类型的注解，存在则返回true，否则返回false。</p><p>​ 注意：此方法会忽略注解对应的注解容器。</p><ul><li><code>&lt;T extends Annotation&gt; T getAnnotation(Class&lt;T&gt; annotationClass)</code></li></ul><p>​ 返回该程序元素上存在的、指定类型的注解，如果该类型注解不存在，则返回null。</p><ul><li><code>Annotation[] getAnnotations()</code></li></ul><p>​ 返回该程序元素上存在的所有注解，若没有注解，返回长度为0的数组。</p><ul><li><code>&lt;T extends Annotation&gt; T[] getAnnotationsByType(Class&lt;T&gt; annotationClass)</code></li></ul><p>​ 返回该程序元素上存在的、指定类型的注解数组。如果没有注解对应类型的注解时，返回长度为0的数组。</p><p>​ 该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。</p><p>​ <code>getAnnotationsByType</code>方法与 <code>getAnnotation</code>的区别在于，<code>getAnnotationsByType</code>会检测注解对应的重复注解容器。</p><p>​ 若程序元素为类，当前类上找不到注解，且该注解为可继承的，则会去父类上检测对应的注解。</p><ul><li><code>&lt;T extends Annotation&gt; T getDeclaredAnnotation(Class&lt;T&gt; annotationClass)</code></li></ul><p>​ 返回直接存在于此元素上的所有注解。该方法将忽略继承的注释。如果没有注释直接存在于此元素上，则返回null。</p><ul><li><code>&lt;T extends Annotation&gt; T[] getDeclaredAnnotationsByType(Class&lt;T&gt; annotationClass)</code></li></ul><p>​ 返回直接存在于此元素上的所有注解。与此接口中的其他方法不同，该方法将忽略继承的注解。</p><ul><li><p><code>Annotation[] getDeclaredAnnotations()</code></p><p>返回直接存在于此元素上的所有注解及注解对应的重复注解容器。该方法将忽略继承的注解。</p><p>如果没有注释直接存在于此元素上，则返回长度为零的一个数组。</p><p>该方法的调用者可以随意修改返回的数组，而不会对其他调用者返回的数组产生任何影响。</p></li></ul><h2 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解" aria-hidden="true">#</a> 自定义注解</h2><p>使用 @interface 进行自定义注解时，自动继承了java.lang.annotation.Annotation接口</p><p>格式：</p><p><code>public @interface 注解名 { 定义体 }</code></p><p>例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
          
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SuppressWarnings</span> <span class="token punctuation">{</span>
          			  
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		   
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中, <code>String[] value()</code> 这行代码声明了一个配置参数，参数名称为value，参数类型是String类型的数组。</p><p>  参数类型只能是基本类型、Class、String、enum</p><p>  可以使用 default 来声明参数的默认值。 <strong>如果只有一个参数成员，一般参数名为value。</strong></p><p>注意：</p><p>​ <strong>注解元素必须要有值。定义注解元素时，经常使用空字符串、0作为默认值。也经常使用负数(比如：-1)表示不存在的含义</strong></p><p>例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
       
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
       
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>
    
     <span class="token comment">//参数name,取值为String型,默认为空字符串</span>
    <span class="token comment">//如果有默认值，那么在使用该注解时如果没有对该参数进行赋值是不会报错的</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>  
                                                                        
    <span class="token keyword">int</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//参数age，取值为int型，默认为0</span>
            
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">schools</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token string">&quot;清华大学&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment">//参数schools，取值为String数组，默认为&quot;清华大学&quot;        </span>
<span class="token punctuation">}</span>

在使用时<span class="token operator">:</span>
           
	<span class="token annotation punctuation">@MyAnnotation</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;vkls&quot;</span><span class="token punctuation">,</span>age<span class="token operator">=</span><span class="token number">19</span><span class="token punctuation">,</span>schools<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;北京大学&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;浙江大学&quot;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span>
           
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           
   <span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//定义自己的注解</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyMethodAnnotation</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//使用注解</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMethodAnnotation</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@MyMethodAnnotation</span><span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">&quot;toStringMethod&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;override toString method&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Override toString method&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Deprecated</span>
    <span class="token annotation punctuation">@MyMethodAnnotation</span><span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">&quot;old static method&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;deprecated old static method&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">oldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;old method, don&#39;t use it.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;deprecation&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@MyMethodAnnotation</span><span class="token punctuation">(</span>title <span class="token operator">=</span> <span class="token string">&quot;test method&quot;</span><span class="token punctuation">,</span> description <span class="token operator">=</span> <span class="token string">&quot;suppress warning static method&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">genericsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">{</span>
        
        <span class="token class-name">List</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        l<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token function">oldMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//用反射接口获取注解信息</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
        
            <span class="token comment">// 获取所有methods       </span>
            <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token class-name">TestMethodAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                
                <span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">&quot;com.pdai.java.annotation.TestMethodAnnotation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                
                <span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
            <span class="token comment">// 遍历    </span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            
                <span class="token comment">//判断方法上是否有MyMethodAnnotation注解            </span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">MyMethodAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    
                        <span class="token comment">// 获取并遍历方法上的所有注解                   </span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Annotation</span> anno <span class="token operator">:</span> method<span class="token punctuation">.</span><span class="token function">getDeclaredAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        
                            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Annotation in Method &#39;&quot;</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">&quot;&#39; : &quot;</span> <span class="token operator">+</span> anno<span class="token punctuation">)</span><span class="token punctuation">;</span>                 
                        <span class="token punctuation">}</span>
                   
                        <span class="token comment">// 获取MyMethodAnnotation对象信息                   </span>
                        <span class="token class-name">MyMethodAnnotation</span> methodAnno <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyMethodAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                                                            
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>methodAnno<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>           
                        ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>            
                <span class="token punctuation">}</span>       
            <span class="token punctuation">}</span>    
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="原理" tabindex="-1"><a class="header-anchor" href="#原理" aria-hidden="true">#</a> 原理</h2><p>注解@interface 是一个实现了Annotation接口的 接口， 然后在调用getDeclaredAnnotations()方法的时候，</p><p>返回一个代理$Proxy对象，这个是使用jdk动态代理创建，使用Proxy的newProxyInstance方法时候，</p><p>传入接口 和InvocationHandler的一个实例(也就是 AnotationInvocationHandler ) ，最后返回一个代理实例。</p><p>期间，在创建代理对象之前，解析注解时候 从该注解类的常量池中取出注解的信息，包括之前写到注解中的参数，然后</p><p>将这些信息在创建 AnnotationInvocationHandler时候 ，传入进去作为构造函数的参数。</p><p>​ <img src="`+p+'" alt="image-20230426100131505" loading="lazy"></p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2>',66);function i(l,u){return s(),a("div",null,[t(" permalink: /    "),c])}const k=n(o,[["render",i],["__file","注解.html.vue"]]);export{k as default};
