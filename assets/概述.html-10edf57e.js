import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,f as e,a as t}from"./app-a89b456a.js";const p="/assets/image-20230426101453099-b831bcc3.png",i="/assets/image-20230426101500598-2d2c8f9b.png",l="/assets/image-20230426101505263-7fd8d326.png",c={},o=t('<h2 id="jvm体系结构图" tabindex="-1"><a class="header-anchor" href="#jvm体系结构图" aria-hidden="true">#</a> JVM体系结构图</h2><p>​ <img src="'+p+'" alt="image-20230426101453099" loading="lazy"></p><p>​ 执行引擎包含三部分：解释器，及时编译器，垃圾回收器</p><h2 id="虚拟机和java虚拟机" tabindex="-1"><a class="header-anchor" href="#虚拟机和java虚拟机" aria-hidden="true">#</a> 虚拟机和Java虚拟机</h2><h3 id="虚拟机" tabindex="-1"><a class="header-anchor" href="#虚拟机" aria-hidden="true">#</a> 虚拟机</h3><p>所谓虚拟机（Virtual Machine），就是一台虚拟的计算机。它是一款软件，用来执行一系列虚拟计算机指令。</p><p>大体上，<strong>虚拟机可以分为系统虚拟机和程序虚拟机。</strong></p><p>Visual Box,VMware就属于系统虚拟机，它们完全是对物理计算机的仿真，提供了一个可运行完整操作系统的软件平台。</p><p>程序虚拟机的典型代表就是 Java 虚拟机，它专门为执行单个计算机程序而设计，在 Java 虚拟机中执行的指令我们称为Java 字节码指令。</p><p>无论是系统虚拟机还是程序虚拟机，在上面运行的软件都被限制于虚拟机提供的资源。</p><h3 id="java-虚拟机" tabindex="-1"><a class="header-anchor" href="#java-虚拟机" aria-hidden="true">#</a> Java 虚拟机</h3><p>Java 虚拟机是一台执行 Java 字节码的虚拟计算机，它拥有独立的运行机制，<strong>其运行的 Java 字节码也未必由 Java 语言编译而成。</strong></p><p>JVM 平台的各种语言可以共享 Java 虚拟机带来的跨平台性、优秀的垃圾回器，以及可靠的即时编译器。</p><p>Java 技术的核心就是 Java 虚拟机（JVM，Java Virtual Machine），因为所有的 Java程序都运行在 Java 虚拟机内部。</p><p><strong>Java 虚拟机就是二进制字节码的运行环境，负责装载字节码到其内部，解释/编译为对应平台上的机器指令执行。</strong></p><p><strong>每一条 Java 指令，Java 虚拟机规范中都有详细定义，如怎么取操作数，怎么处理操作数，处理结果放在哪里。</strong></p><h3 id="字节码文件" tabindex="-1"><a class="header-anchor" href="#字节码文件" aria-hidden="true">#</a> 字节码文件</h3><p>​ <img src="'+i+'" alt="image-20230426101500598" loading="lazy"></p><p>​ 每种语言都需要转换成字节码文件，最后转换得到的字节码文件都能通过 Java 虚拟机进行运行和处理。</p><p>​ <img src="'+l+`" alt="image-20230426101505263" loading="lazy"></p><p><strong>Java 虚拟机根本不关心运行在其内部的程序到底是使用何种编程语言编写的，它只关心“字节码”文件。</strong></p><p>即，Java 虚拟机拥有语言无关性，并不会单纯地与Java 语言“终身绑定”，只要其他编程语言的编译结果满足并包含</p><p>Java 虚拟机的内部指令集、符号表以及其他的辅助信息，它就是一个有效的字节码文件，就能够被虚拟机所识别并装载运行。</p><p>平时说的 java 字节码，指的是用 java语言编译成的字节码。准确的说任何能在jvm平台上执行的字节码格式都是一样的</p><p>​ 所以应该统称为：jvm 字节码。</p><p><strong>不同的编译器，可以编译出相同的字节码文件，字节码文件也可以在不同的 JVM上运行。</strong></p><h2 id="指令集架构" tabindex="-1"><a class="header-anchor" href="#指令集架构" aria-hidden="true">#</a> 指令集架构</h2><h3 id="指令集" tabindex="-1"><a class="header-anchor" href="#指令集" aria-hidden="true">#</a> 指令集</h3><p>Java 编译器输入的指令流基本上是一种基于栈的指令集架构，另外一种指令集架构则是基于寄存器的指令集架构。</p><p>基于栈式架构的特点</p><p>​ • 设计和实现更简单，适用于资源受限的系统；</p><p>​ • 避开了寄存器的分配难题：使用零地址指令方式分配。</p><p>​ • <strong>指令流中的指令大部分是零地址指令，其执行过程依赖于操作栈。指令集更小， 编译器容易实现。</strong></p><p>​ • 不需要硬件支持，可移植性更好，更好实现跨平台</p><p>基于寄存器架构的特点</p><p>​ • 典型的应用是 x86 的二进制指令集：比如传统的 PC 以及 Android 的 Davlik虚拟机。</p><p>​ • 指令集架构则完全依赖硬件，可移植性差</p><p>​ • 性能优秀和执行更高效</p><p>​ • 花费更少的指令去完成一项操作。</p><p>​ • 在大部分情况下，基于寄存器架构的指令集往往都以一地址指令、二地址指令和三地址指令为主，</p><p>     而基于栈式架构的指令集却是以零地址指令为主。</p><h3 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h3><p>同样执行 2+3 这种逻辑操作，其指令分别如下：</p><p>基于栈的计算流程（以 Java 虚拟机为例）：</p><p>​ iconst_2 //常量 2 入栈</p><p>​ istore_1</p><p>​ iconst_3 // 常量 3 入栈</p><p>​ istore_2</p><p>​ iload_1</p><p>​ iload_2</p><p>​ iadd //常量 2/3 出栈，执行相加</p><p>​ istore_0 // 结果 5 入栈</p><p>而基于寄存器的计算流程:</p><p>​ mov eax,2 //将 eax 寄存器的值设为 1</p><p>​ add eax,3 //使 eax 寄存器的值加 3</p><h3 id="字节码反编译" tabindex="-1"><a class="header-anchor" href="#字节码反编译" aria-hidden="true">#</a> 字节码反编译</h3><p>编写一个简单的代码，然后查看一下字节码的反编译后的结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StackStruTest</span> <span class="token punctuation">{</span>
    
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
		   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>       	        
    <span class="token punctuation">}</span>	  	
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 然后找到编译后的 .class 文件，在idea的命令行中使用下列命令进行反编译：</p><p>​ javap -v StackStruTest.class</p><p>​ 得到的文件为:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
				
	descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span>
				
    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span>
				
    <span class="token class-name">Code</span><span class="token operator">:</span>
					
      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span> <span class="token number">0</span><span class="token operator">:</span> iconst_2
						
                  <span class="token number">1</span><span class="token operator">:</span> istore_1
						
                  <span class="token number">2</span><span class="token operator">:</span> iconst_3
						
                  <span class="token number">3</span><span class="token operator">:</span> istore_2
						
                  <span class="token number">4</span><span class="token operator">:</span> iload_1
						
                  <span class="token number">5</span><span class="token operator">:</span> iload_2
						
                  <span class="token number">6</span><span class="token operator">:</span> iadd
						
                  <span class="token number">7</span><span class="token operator">:</span> istore_3
						
                  <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span> 
				
    <span class="token class-name">LineNumberTable</span><span class="token operator">:</span>
						
         line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">0</span>
						
         line <span class="token number">10</span><span class="token operator">:</span> <span class="token number">2</span>
						
         line <span class="token number">11</span><span class="token operator">:</span> <span class="token number">4</span>
						
         line <span class="token number">12</span><span class="token operator">:</span> <span class="token number">8</span> 
				
     <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span>
						
           <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span>
                  
							<span class="token number">0</span>       <span class="token number">9</span>        <span class="token number">0</span>     args   <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span> 
                                                           
							<span class="token number">2</span> 		 <span class="token number">7</span>        <span class="token number">1</span>      i          <span class="token class-name">I</span>
                                                           
							<span class="token number">4</span>       <span class="token number">5</span>        <span class="token number">2</span>       j          <span class="token class-name">I</span>
                                                           
							<span class="token number">8</span>       <span class="token number">1</span>        <span class="token number">3</span>       k          <span class="token class-name">I</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>由于跨平台性的设计，Java 的指令都是根据栈来设计的。</p><p><strong>不同平台 CPU 架构不同， 所以不能设计为基于寄存器的指令集。</strong></p><p><strong>优点是跨平台，指令集小，编译器容易实现，缺点是性能下降，实现同样的功能需要更多的指令。</strong></p><h2 id="jvm生命周期" tabindex="-1"><a class="header-anchor" href="#jvm生命周期" aria-hidden="true">#</a> JVM生命周期</h2><h3 id="虚拟机的启动" tabindex="-1"><a class="header-anchor" href="#虚拟机的启动" aria-hidden="true">#</a> 虚拟机的启动</h3><p>Java 虚拟机的启动是通过引导类加载器（bootstrap class loader）创建一个初始类(initial class）来完成的，这个类是由虚拟机的具体实现指定的。</p><h3 id="虚拟机的执行" tabindex="-1"><a class="header-anchor" href="#虚拟机的执行" aria-hidden="true">#</a> 虚拟机的执行</h3><p>• 一个运行中的 Java 虚拟机有着一个清晰的任务：执行 Java 程序。</p><p>• 程序开始执行时它才运行，程序结束时他就停止。</p><p>• 执行一个所谓的 Java 程序的时候，真真正正在执行的是一个叫做 Java 虚拟机的进程。</p><h3 id="虚拟机的退出" tabindex="-1"><a class="header-anchor" href="#虚拟机的退出" aria-hidden="true">#</a> 虚拟机的退出</h3><p>有如下的几种情况：</p><p>​ • 程序正常执行结束</p><p>​ • 程序在执行过程中遇到了异常或错误而异常终止</p><p>​ • 由于操作系统出现错误而导致 Java 虚拟机进程终止</p><p>​ • 某线程调用 Runtime 类或 System 类的 exit 方法，或 Runtime 类的 halt 方法，且 Java 安全管理器也允许这种操作。</p><p>​ 除此之外，JNI(Java Native Interface)规范描述了用 JNI Invocation API 来加载或卸载Java 虚拟机时，Java 虚拟机的退出情况。</p>`,80);function r(d,v){return n(),s("div",null,[e(" permalink: /JVM/概述 "),o])}const k=a(c,[["render",r],["__file","概述.html.vue"]]);export{k as default};
