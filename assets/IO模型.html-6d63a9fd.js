const e=JSON.parse('{"key":"v-0f945828","path":"/posts/interview/IO%E6%A8%A1%E5%9E%8B.html","title":"IO模型","lang":"zh-CN","frontmatter":{"title":"IO模型","author":{"name":"北斗星司"},"category":["面试题"],"tag":["IO模型"],"date":"2023-10-23T15:08:32.000Z","description":"定义 应用程序并不存在实质的IO过程，真正的IO过程是操作系统的事，这里把应用程序的IO操作分为两种：IO调用和IO执行。 IO调用是由进程发起，IO执行是操作系统的工作。因此，更准确些来说，此时所说的IO是应用程序对操作系统IO功能的一次触发，即IO调用。 IO调用的目的是将进程的内部数据迁移到外部(输出)，或者是将外部数据迁移到进程内部(输入)。 UNIX 系统下， IO 模型一共有 5 种： 同步阻塞 I/O、同步非阻塞 I/O、I/O 多路复用、信号驱动 I/O 和 异步 I/O。","head":[["meta",{"property":"og:url","content":"https://mtgd106.github.io/posts/interview/IO%E6%A8%A1%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"北斗星司"}],["meta",{"property":"og:title","content":"IO模型"}],["meta",{"property":"og:description","content":"定义 应用程序并不存在实质的IO过程，真正的IO过程是操作系统的事，这里把应用程序的IO操作分为两种：IO调用和IO执行。 IO调用是由进程发起，IO执行是操作系统的工作。因此，更准确些来说，此时所说的IO是应用程序对操作系统IO功能的一次触发，即IO调用。 IO调用的目的是将进程的内部数据迁移到外部(输出)，或者是将外部数据迁移到进程内部(输入)。 UNIX 系统下， IO 模型一共有 5 种： 同步阻塞 I/O、同步非阻塞 I/O、I/O 多路复用、信号驱动 I/O 和 异步 I/O。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mtgd106.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-06T06:59:59.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"IO模型"}],["meta",{"property":"article:author","content":"北斗星司"}],["meta",{"property":"article:tag","content":"IO模型"}],["meta",{"property":"article:published_time","content":"2023-10-23T15:08:32.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-06T06:59:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"IO模型\\",\\"image\\":[\\"https://mtgd106.github.io/\\"],\\"datePublished\\":\\"2023-10-23T15:08:32.000Z\\",\\"dateModified\\":\\"2023-11-06T06:59:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"北斗星司\\"}]}"]]},"headers":[{"level":2,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":2,"title":"阻塞和非阻塞","slug":"阻塞和非阻塞","link":"#阻塞和非阻塞","children":[{"level":3,"title":"阻塞(Blocking I/O)","slug":"阻塞-blocking-i-o","link":"#阻塞-blocking-i-o","children":[]},{"level":3,"title":"非阻塞","slug":"非阻塞","link":"#非阻塞","children":[]}]},{"level":2,"title":"IO多路复用","slug":"io多路复用","link":"#io多路复用","children":[{"level":3,"title":"select/poll","slug":"select-poll","link":"#select-poll","children":[]},{"level":3,"title":"epoll","slug":"epoll","link":"#epoll","children":[]}]},{"level":2,"title":"信号驱动I/O","slug":"信号驱动i-o","link":"#信号驱动i-o","children":[]},{"level":2,"title":"异步I/O","slug":"异步i-o","link":"#异步i-o","children":[]},{"level":2,"title":"对比","slug":"对比","link":"#对比","children":[]},{"level":2,"title":"Java中3种常见 IO 模型","slug":"java中3种常见-io-模型","link":"#java中3种常见-io-模型","children":[{"level":3,"title":"BIO(Blocking I/O)","slug":"bio-blocking-i-o","link":"#bio-blocking-i-o","children":[]},{"level":3,"title":"NIO","slug":"nio","link":"#nio","children":[]},{"level":3,"title":"AIO","slug":"aio","link":"#aio","children":[]},{"level":3,"title":"对比","slug":"对比-1","link":"#对比-1","children":[]}]}],"git":{"createdTime":1699253999000,"updatedTime":1699253999000,"contributors":[{"name":"mtgd106","email":"1487722388@qq.com","commits":1}]},"readingTime":{"minutes":10.94,"words":2187},"filePathRelative":"posts/interview/IO模型.md","localizedDate":"2023年10月23日","excerpt":"<!-- permalink: /    -->\\n<h2> 定义</h2>\\n<p>应用程序并不存在实质的IO过程，真正的IO过程是操作系统的事，这里把应用程序的IO操作分为两种：IO调用和IO执行。</p>\\n<p>IO调用是由进程发起，IO执行是操作系统的工作。因此，更准确些来说，此时所说的<strong>IO是应用程序对操作系统IO功能的一次触发，即IO调用。</strong></p>\\n<p>IO调用的目的是将进程的内部数据迁移到外部(输出)，或者是将外部数据迁移到进程内部(输入)。</p>\\n<p>UNIX 系统下， IO 模型一共有 5 种： <strong>同步阻塞 I/O</strong>、<strong>同步非阻塞 I/O</strong>、<strong>I/O 多路复用</strong>、<strong>信号驱动 I/O</strong> 和 <strong>异步 I/O</strong>。</p>","copyright":{"author":"北斗星司"},"autoDesc":true}');export{e as data};
