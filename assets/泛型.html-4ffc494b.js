const n=JSON.parse('{"key":"v-eb3a2762","path":"/posts/note/Java/%E6%B3%9B%E5%9E%8B.html","title":"泛型","lang":"zh-CN","frontmatter":{"title":"泛型","author":{"name":"北斗星司"},"category":["基础知识"],"tag":["语法"],"date":"2023-07-12T15:08:32.000Z","icon":"file","description":"类别 泛型类的定义 修饰符 class 类名&lt;类型&gt;{ } 如果想在类中定义泛型变量或在类的方法中使用泛型，则类必须定义为泛型类。 例1：简单泛型类 public class Student&lt;T&gt;{\\t\\t//此处的T是任意标识,常见的有T,E,K,V等用于表示泛型 private T var; public T getVar(){ return var; } public void setVar(T var){ // 设置的类型也由外部决定 this.var = var ; } } Student&lt;String&gt; s1=new Student&lt;String&gt;(); //创建对象s1,T就变成了String类型 Student&lt;Integer&gt; s2=new Student&lt;Integer&gt;(); //创建对象s2,T就变成了Integer类型","head":[["meta",{"property":"og:url","content":"https://mtgd106.github.io/posts/note/Java/%E6%B3%9B%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"北斗星司"}],["meta",{"property":"og:title","content":"泛型"}],["meta",{"property":"og:description","content":"类别 泛型类的定义 修饰符 class 类名&lt;类型&gt;{ } 如果想在类中定义泛型变量或在类的方法中使用泛型，则类必须定义为泛型类。 例1：简单泛型类 public class Student&lt;T&gt;{\\t\\t//此处的T是任意标识,常见的有T,E,K,V等用于表示泛型 private T var; public T getVar(){ return var; } public void setVar(T var){ // 设置的类型也由外部决定 this.var = var ; } } Student&lt;String&gt; s1=new Student&lt;String&gt;(); //创建对象s1,T就变成了String类型 Student&lt;Integer&gt; s2=new Student&lt;Integer&gt;(); //创建对象s2,T就变成了Integer类型"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mtgd106.github.io/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"泛型"}],["meta",{"property":"article:author","content":"北斗星司"}],["meta",{"property":"article:tag","content":"语法"}],["meta",{"property":"article:published_time","content":"2023-07-12T15:08:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"泛型\\",\\"image\\":[\\"https://mtgd106.github.io/\\"],\\"datePublished\\":\\"2023-07-12T15:08:32.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"北斗星司\\"}]}"]]},"headers":[{"level":2,"title":"类别","slug":"类别","link":"#类别","children":[]},{"level":2,"title":"泛型类的定义","slug":"泛型类的定义","link":"#泛型类的定义","children":[]},{"level":2,"title":"泛型方法","slug":"泛型方法","link":"#泛型方法","children":[{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"调用","slug":"调用","link":"#调用","children":[]}]},{"level":2,"title":"泛型接口的定义","slug":"泛型接口的定义","link":"#泛型接口的定义","children":[]},{"level":2,"title":"类型通配符","slug":"类型通配符","link":"#类型通配符","children":[]},{"level":2,"title":"可变参数","slug":"可变参数","link":"#可变参数","children":[]},{"level":2,"title":"类型擦除","slug":"类型擦除","link":"#类型擦除","children":[{"level":3,"title":"定义","slug":"定义-1","link":"#定义-1","children":[]},{"level":3,"title":"类型擦除的原则","slug":"类型擦除的原则","link":"#类型擦除的原则","children":[]},{"level":3,"title":"类型擦除方式","slug":"类型擦除方式","link":"#类型擦除方式","children":[]}]},{"level":2,"title":"泛型的编译期检查","slug":"泛型的编译期检查","link":"#泛型的编译期检查","children":[]},{"level":2,"title":"静态方法和静态变量","slug":"静态方法和静态变量","link":"#静态方法和静态变量","children":[]},{"level":2,"title":"","slug":"","link":"#","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":16.43,"words":3286},"filePathRelative":"posts/note/Java/泛型.md","localizedDate":"2023年7月12日","excerpt":"<!-- permalink: /    -->\\n<h2> 类别</h2>\\n<figure><figcaption></figcaption></figure>\\n<h2> 泛型类的定义</h2>\\n<p><code>修饰符 class 类名&lt;类型&gt;{  }</code></p>\\n<p><strong>如果想在类中定义泛型变量或在类的方法中使用泛型，则类必须定义为泛型类。</strong></p>\\n<p>例1：简单泛型类</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Student</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">T</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">{</span>\\t\\t<span class=\\"token comment\\">//此处的T是任意标识,常见的有T,E,K,V等用于表示泛型</span>\\n    \\n    <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">T</span> <span class=\\"token keyword\\">var</span><span class=\\"token punctuation\\">;</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token class-name\\">T</span> <span class=\\"token function\\">getVar</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        \\n        <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">var</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n    \\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">setVar</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">T</span> <span class=\\"token keyword\\">var</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>  <span class=\\"token comment\\">// 设置的类型也由外部决定  </span>\\n        \\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">var</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">var</span> <span class=\\"token punctuation\\">;</span>  \\n    <span class=\\"token punctuation\\">}</span>      \\n<span class=\\"token punctuation\\">}</span>      \\n            \\n<span class=\\"token class-name\\">Student</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> s1<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Student</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>       <span class=\\"token comment\\">//创建对象s1,T就变成了String类型</span>\\n            \\n<span class=\\"token class-name\\">Student</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span> s2<span class=\\"token operator\\">=</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Student</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Integer</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">//创建对象s2,T就变成了Integer类型</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{"author":"北斗星司"},"autoDesc":true}');export{n as data};
