import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as p}from"./app-a89b456a.js";const e="/assets/image-20230426075906875-c54f3bb1.png",t={},i=p('<h2 id="redis应用问题" tabindex="-1"><a class="header-anchor" href="#redis应用问题" aria-hidden="true">#</a> Redis应用问题</h2><h3 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透" aria-hidden="true">#</a> 缓存穿透</h3><h4 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> <strong>描述</strong></h4><p><strong>大量请求的key不存在于缓存中，也不存在于数据库中</strong>，如果key对应的数据在redis中并不存在，那么每次针对这个key的</p><p>请求都会去访问数据库，如果这样的请求过多，则可能会压垮数据库，黑客可能会利用这个特点进行攻击数据库。</p><p><strong>现象</strong>：</p><p>​  1.数据库访问压力突然变大了</p><p>​  2.redis命中率降低</p><p>​  3.一直查询数据库</p><p>​  4.出现很多非正常url访问</p><h4 id="解决" tabindex="-1"><a class="header-anchor" href="#解决" aria-hidden="true">#</a> <strong>解决</strong></h4><p>由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，</p><p>这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p><ol><li><p><strong>对空值缓存</strong>：如果一个查询返回的数据为空(不管是数据是否不存在)，仍然把这个空结果(null)进行缓存，</p><p>设置空结果的过期时间会很短，最长不超过五分钟。</p></li><li><p><strong>设置可访问的名单(白名单)</strong>：使用bitmaps类型定义一个可以访问的名单，名单id作为bitmaps的偏移量，</p><p>每次访问和bitmap里面的id进行比较，如果访问id不在bitmaps里面，进行拦截，不允许访问。</p></li><li><p><strong>采用布隆过滤器</strong>：布隆过滤器可以用于检索一个元素是否在一个集合中。</p><p>它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p>将所有可能存在的数据哈希到一个足够大的bitmaps中，一个一定不存在的数据会被 这个bitmaps拦截掉，</p><p>从而避免了对底层存储系统的查询压力。</p><p>布隆过滤器（Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的二进制向量(位图)和一系列随机映射函数(哈希函数)。</p></li><li><p><strong>进行实时监控</strong>：当发现Redis的命中率开始急速降低，需要排查访问对象和访问的数据，和运维人员配合，可以设置黑名单限制服务。</p></li></ol><h3 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿" aria-hidden="true">#</a> 缓存击穿</h3><h4 id="描述-1" tabindex="-1"><a class="header-anchor" href="#描述-1" aria-hidden="true">#</a> <strong>描述</strong></h4><p><strong>请求的key对应的是热点数据，该数据存在于数据库中，但在redis中已经过期</strong>，此时若有大量并发请求过来，</p><p>这些请求发现缓存过期一般都会从后端DB加载数据并回设到缓存，这个时候大并发的请求可能会瞬间把后端DB压垮。</p><p>例：秒杀进行过程中，缓存中的某个秒杀商品的数据突然过期，这就导致瞬时大量对该商品的请求直接落到数据库上，对数据库造成了巨大的压力。</p><p>​ 现象：</p><p>​  1.数据库访问压力瞬时增加</p><p>​  2.redis里面没有出现大量过期的key</p><p>​  3.redis正常运行</p><h4 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> <strong>解决方案</strong></h4><p>key可能会在某些时间点被超高并发的访问，是一种非常“热点”的数据。这个时候，需要就考虑缓存被“击穿”的问题。</p><p>解决问题：</p><p>（1）<strong>预先设置热门数据</strong>：在redis高峰访问之前，把一些热门数据提前存入到redis里面，加大这些热门数据key的时长。</p><p>（2）<strong>实时调整</strong>：现场监控哪些数据热门，实时调整key的过期时长。</p><p>（3）<strong>使用互斥锁</strong>，保证只有一个请求会落到数据库上，减小数据库的压力：</p><p>​  （1）就是在缓存失效的时候(判断拿出来的值为空)，不是立即去load db。</p><p>​  （2）先使用缓存工具的某些带成功操作返回值的操作(比如Redis的SETNX)去set一个mutex key</p><p>​  （3）当操作返回成功时，再进行load db的操作，并回设缓存，最后删除mutex key；</p><p>​  （4）当操作返回失败，证明有线程在load db，当前线程睡眠一段时间再重试整个get缓存的方法。</p><h3 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩" aria-hidden="true">#</a> 缓存雪崩</h3><h4 id="描述-2" tabindex="-1"><a class="header-anchor" href="#描述-2" aria-hidden="true">#</a> <strong>描述</strong></h4><p><strong>缓存在同一时间大面积的失效，导致大量的请求都直接落到了数据库上，对数据库造成了巨大的压力</strong>。</p><p>缓存雪崩与缓存击穿的区别在于缓存雪崩针对很多key缓存，而缓存击穿则是某一个key过期。</p><h4 id="解决-1" tabindex="-1"><a class="header-anchor" href="#解决-1" aria-hidden="true">#</a> <strong>解决</strong></h4><p>​ （1)构建多级缓存架构：nginx缓存 + redis缓存 +其他缓存（ehcache等）</p><p>​  (2)使用锁或队列：</p><p>​    用加锁或者队列的方式保证来保证不会有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求</p><p>​    落到底层存储系统上。不适用高并发情况。</p><p>​  (3)设置过期标志更新缓存：</p><p>​    记录缓存数据是否过期（设置提前量），如果过期会触发通知另外的线程在后台去更新实际key的缓存。</p><p>  (4)将缓存失效时间分散开：</p><p>​     比如可以在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样每一个缓存的过期时间的重复率</p><p>     就会降低，就很难引发集体失效的事件。</p><h3 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器" aria-hidden="true">#</a> 布隆过滤器</h3><h4 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> <strong>简介</strong></h4><p>​ 一个名叫 Bloom 的人提出了一种来检索元素是否在给定大集合中的数据结构，这种数据结构是高效且性能很好的，</p><p>​ 但缺点是具有一定的错误识别率和删除难度。并且，<strong>理论情况下，添加到集合中的元素越多，误报的可能性就越大。</strong></p><p><strong>原理</strong></p><p>可以把它看作由二进制向量（或者说位数组）和一系列随机映射函数（哈希函数）两部分组成的数据结构。</p><p><strong>当一个元素加入布隆过滤器中的时候，会进行如下操作：</strong></p><ol><li><p>使用布隆过滤器中的哈希函数对元素值进行计算，得到哈希值(有几个哈希函数就会得到几个哈希值)。</p></li><li><p>根据得到的多个哈希值，在位数组中把对应下标的值置为 1。</p></li></ol><p><strong>当需要判断一个元素是否存在于布隆过滤器的时候，会进行如下操作：</strong></p><ol><li><p>对给定元素再次进行相同的哈希计算；</p></li><li><p>得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，</p><p>如果存在一个值不为 1，说明该元素不在布隆过滤器中。</p><p>​ <img src="'+e+`" alt="image-20230426075906875" loading="lazy"></p></li></ol><p><strong>不同的字符串可能哈希出来的位置相同，这种情况可以适当增加位数组大小或者调整哈希函数。</strong></p><p><strong>布隆过滤器说某个元素存在，小概率会误判。布隆过滤器说某个元素不在，那么这个元素一定不在。</strong></p><p><strong>使用场景</strong></p><ol><li><p>判断给定数据是否存在：比如判断一个数字是否存在于包含大量数字的数字集中(数字集很大)、</p><p>防止缓存穿透(判断请求的数据是否有效，避免直接绕过缓存请求数据库等、邮箱的垃圾邮件过滤、黑名单功能等。</p></li><li><p>去重：比如爬给定网址的时候对已经爬取过的 URL 去重。</p></li></ol><h3 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h3><h4 id="简介-1" tabindex="-1"><a class="header-anchor" href="#简介-1" aria-hidden="true">#</a> <strong>简介</strong></h4><p>随着业务发展的需要，原单体单机部署的系统被演化成分布式集群系统后，由于分布式系统多线程、多进程并且分布在不同机器上，这将使原单机部署情况下的并发控制锁策略失效，单纯的Java API并不能提供分布式锁的能力。</p><p>为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题！</p><p>分布式锁主流的实现方案：</p><p>​  1.基于数据库实现分布式锁</p><p>​  2.基于缓存（Redis等）</p><p>​  3.基于Zookeeper</p><p>每一种分布式锁解决方案都有各自的优缺点：</p><p>​ 1.性能：redis最高</p><p>​ 2.可靠性：zookeeper最高</p><h4 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> <strong>实现</strong></h4><p>redis中使用setnx命令实现分布式锁。</p><p>​  nx ：当键不存在时，才对键进行设置操作。 set key value nx 效果等同于 setnx key value。</p><p> 使用 setnx 设置一个公共锁</p><p>​   setnx key value    //加锁， value取值任意</p><p>​   del lock-key    //删除锁，即，删除该键</p><p> 返回值：如果已经被锁上，则返回设置失败(数字0)；如果还没有被锁，则返回设置成功(数字1)</p><p>​          对于返回设置成功的，拥有控制权，可以进行下一步的具体业务操作</p><p>​          对于返回设置失败的，不具有控制权，排队或等待</p><p>​  <strong>操作完毕通过del操作释放锁，如果不释放锁，是无法再次加锁的。</strong></p><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> <strong>注意</strong></h4><p>​  使用分布式锁必须规定，多个终端对数据进行操作前，必须都要对该数据先加锁。</p><p>​  如果一个终端加上了锁，另一个终端再加锁就会失败，说明数据正在被其他终端操作。</p><p>​  而如果另一个没有加锁直接对数据进行操作，也是可以成功的。</p><h4 id="为锁设定时间" tabindex="-1"><a class="header-anchor" href="#为锁设定时间" aria-hidden="true">#</a> <strong>为锁设定时间</strong></h4><ol><li>使用expire为锁添加时间限制，在该时间内没有解锁，则系统强制解锁。</li></ol><p>​   expire lock-key second    //为锁添加时间，以秒为单位</p><p>​   pexpire lock-key milliseconds    //以毫秒为单位</p><p>​   缺乏原子性：如果在setnx和expire之间出现异常，锁也无法释放</p><ol start="2"><li>在set时就指定过期时间</li></ol><p>​   set key value ex 3000 nx</p><h4 id="出现的问题" tabindex="-1"><a class="header-anchor" href="#出现的问题" aria-hidden="true">#</a> <strong>出现的问题</strong></h4><ol><li><strong>可能会释放其他服务器的锁。</strong></li></ol><p>​   场景：如果业务逻辑的执行时间是7s。执行流程如下</p><p>​     1.index1业务逻辑没执行完，3秒后锁被自动释放。</p><p>​     2.index2获取到锁，执行业务逻辑，3秒后锁被自动释放。</p><p>​     3.index3获取到锁，执行业务逻辑</p><p>​     4.index1业务逻辑执行完成，开始调用del释放锁，这时释放的是index3的锁，导致index3的业务只执行1s</p><p>​        就被别人释放，最终等于没锁。</p><p>  解决：<strong>setnx获取锁时，设置一个指定的唯一值(例如：uuid)；释放锁前获取这个值，判断是否还是自己的锁。</strong></p><p>​     set key uuid ex 3000 nx</p><ol start="2"><li><strong>删除操作缺乏原子性</strong></li></ol><p>  场景：</p><p>   1.index1执行删除时，查询到的lock值确实和uuid相等</p><p>​     uuid=v1</p><p>​     set(lock,uuid)；</p><p>   2.index1执行删除前，lock刚好过期时间已到，被redis自动释放。在redis中没有了lock，没有了锁。</p><p>   3.index2获取了lock</p><p>     index2线程获取到了cpu的资源，开始执行方法</p><p>     uuid=v2</p><p>     set(lock,uuid)；</p><p>   4.index1执行删除，此时会把index2的lock删除</p><p>    index1 因为已经在方法中了，所以不需要重新上锁。index1有执行的权限。index1已经比较完成了，这个时候，</p><p>    继续执行就会删除index2的锁。</p><p>​ 解决：使用Lua脚本</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ol><li>加锁</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 从redis中获取锁,set k1 v1 px 20000 nx</span>
<span class="token class-name">String</span> uuid <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Boolean</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">,</span> uuid<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.使用Lua释放锁</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 2. 释放锁 del</span>
<span class="token class-name">String</span> script <span class="token operator">=</span> <span class="token string">&quot;if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 设置lua脚本返回的数据类型</span>
<span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 设置lua脚本返回类型为Long</span>
redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>

redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.重试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">testLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了确保分布式锁可用，至少要确保锁的实现同时满足以下四个条件：</p><ul><li><p>互斥性。在任意时刻，只有一个客户端能持有锁。</p></li><li><p>不会发生死锁。即使有一个客户端在持有锁的期间崩溃而没有主动解锁，也能保证后续其他客户端能加锁。</p></li><li><p>解铃还须系铃人。加锁和解锁必须是同一个客户端，客户端自己不能把别人加的锁给解了。</p></li><li><p>加锁和解锁必须具有原子性。</p></li></ul>`,126),o=[i];function l(c,r){return s(),a("div",null,o)}const k=n(t,[["render",l],["__file","应用问题.html.vue"]]);export{k as default};
