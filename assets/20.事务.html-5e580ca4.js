import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,f as s,a as t}from"./app-a89b456a.js";const p="/assets/image-20230426074021122-1698645405864-5-fce07f8c.png",d="/assets/image-20230426074027901-1698645405864-6-3049ef38.png",o="/assets/image-20230426074045115-1698645405864-7-3d364e64.png",r="/assets/image-20230426074103164-1698645405864-8-8b3701ee.png",i="/assets/image-20230426074344035-6d701d53.png",l={},c=t(`<h2 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><p>事务是一组操作的集合，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求。</p><p>即，<strong>这些操作要么同时成功，要么同时失败。</strong></p><p>事务不能回退 <code>SELECT</code> 语句，回退 <code>SELECT</code> 语句也没意义；也不能回退 <code>CREATE</code> 和 <code>DROP</code> 语句。</p><h2 id="控制事务" tabindex="-1"><a class="header-anchor" href="#控制事务" aria-hidden="true">#</a> 控制事务</h2><p><strong>MySQL 默认是隐式提交</strong>，每执行一条语句就把这条语句当成一个事务然后进行提交。</p><p>当出现 <code>START TRANSACTION</code> 语句时，会关闭隐式提交；当 <code>COMMIT</code> 或 <code>ROLLBACK</code> 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>查看/设置事务提交方式</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span>

<span class="token keyword">set</span> @<span class="token variable">@autocommit</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//取消自动提交</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提交事务</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>回滚事务</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">rollback</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>开启事务</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">start</span> transction 或 <span class="token keyword">begin</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指令：</p><ul><li><code>START TRANSACTION</code> --- 用于标记事务的起始点。</li><li><code>SAVEPOINT</code> ------------ 用于创建保留点。</li><li><code>ROLLBACK TO</code> ---------- 用于回滚到指定的保留点；如果没有设置保留点，则回退到 <code>START TRANSACTION</code> 语句处。</li><li><code>COMMIT</code> ---------------- 提交事务</li></ul><p>例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 开始事务</span>
<span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span><span class="token punctuation">;</span>

<span class="token comment">-- 插入操作 A</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;root1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 创建保留点 updateA</span>
<span class="token keyword">SAVEPOINT</span> updateA<span class="token punctuation">;</span>

<span class="token comment">-- 插入操作 B</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;root2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;root2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxxx@163.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">-- 回滚到保留点 updateA</span>
<span class="token keyword">ROLLBACK</span> <span class="token keyword">TO</span> updateA<span class="token punctuation">;</span>

<span class="token comment">-- 提交事务，只有操作 A 生效</span>
<span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="事务四大特性" tabindex="-1"><a class="header-anchor" href="#事务四大特性" aria-hidden="true">#</a> 事务四大特性</h2><p>​ 原子性（Atomicity）：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</p><p>​ 一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</p><p>​ 隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</p><p>​ 持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</p><p>​ 上述就是事务的四大特性，简称ACID。</p><h2 id="并发事务的问题" tabindex="-1"><a class="header-anchor" href="#并发事务的问题" aria-hidden="true">#</a> 并发事务的问题</h2><table><thead><tr><th style="text-align:left;">问题</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">脏读</td><td style="text-align:left;">一个事务读到另一个事务还没提交的数据</td></tr><tr><td style="text-align:left;">不可重复读</td><td style="text-align:left;">一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td style="text-align:left;">幻读</td><td style="text-align:left;">一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td></tr></tbody></table><h3 id="脏读-dirty-read" tabindex="-1"><a class="header-anchor" href="#脏读-dirty-read" aria-hidden="true">#</a> 脏读(Dirty read)</h3><p>一个事务读取数据并且对数据进行了修改，这个修改对其他事务来说是可见的，即使当前事务没有提交，</p><p>这时，另外一个事务读取了这个还未提交的数据，但第一个事务突然回滚，导致数据并没有被提交到数据库，</p><p>那第二个事务读取到的就是脏数据。</p><p>例：</p><p>  事务1读取某表中的数据 A=20，事务1修改 A=A-1，事务2读取到 A=19,事务1回滚导致对 A 的修改并为提交到数据库，</p><p>  所以，A 的值还是 20。</p><p>​ <img src="`+p+'" alt="image-20230426074021122" loading="lazy"></p><h3 id="丢失修改-lost-to-modify" tabindex="-1"><a class="header-anchor" href="#丢失修改-lost-to-modify" aria-hidden="true">#</a> 丢失修改(Lost to modify)</h3><p>在一个事务读取一个数据时，另外一个事务也访问了该数据，在第一个事务中修改了这个数据后，第二个事务也修改了</p><p>这个数据，这样第一个事务内的修改结果就被丢失，因此称为丢失修改。</p><p>例：</p><p>  事务1读取某表中的数据 A=20，事务2 也读取 A=20，事务1 先修改 A=A-1，事务2后来也修改 A=A-1，</p><p>  最终结果 A=19，则，事务1 的修改被丢失。</p><p>​ <img src="'+d+'" alt="image-20230426074027901" loading="lazy"></p><h3 id="不可重复读-unrepeatable-read" tabindex="-1"><a class="header-anchor" href="#不可重复读-unrepeatable-read" aria-hidden="true">#</a> 不可重复读(Unrepeatable read)</h3><p>在一个事务内多次读取同一个数据，在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的</p><p>两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。</p><p>这就发生了<strong>在一个事务内两次读到的数据是不一样的情况</strong>，因此称为不可重复读。</p><p>例如：事务1读取某表中的数据 A=20，事务2也读取 A=20，事务1修改 A=A-1，事务 2 再次读取 A =19，</p><p>   此时，事务2第二次读取的结果和第一次读取的结果不同。</p><p>​ <img src="'+o+'" alt="image-20230426074045115" loading="lazy"></p><p><strong>三种不可重复读</strong></p><p>1.读-更新</p><p>​ – 事务1 读取某一数据</p><p>​ – 事务2 对其做了修改</p><p>​ – 当事务1 再次读该数据时，得到与前一次不同的值</p><p>2.读-删除</p><p>​ – 事务1 按一定条件从数据库中读取某些数据记录</p><p>​ – 事务2 删除了其中部分记录</p><p>​ – 当事务1 再次按相同条件读取数据时，发现某些记录神密地消失了</p><p>3.读-插入</p><p>​ – 事务1 按一定条件从数据库中读取某些数据记录</p><p>​ – 事务2 插入了一些记录</p><p>​ – 当事务1再次按相同条件读取数据时，发现多了一些记录</p><h3 id="幻读-phantom-read" tabindex="-1"><a class="header-anchor" href="#幻读-phantom-read" aria-hidden="true">#</a> 幻读(Phantom read)</h3><p>幻读与不可重复读类似。一个事务读取了几行数据，接着另一个并发事务插入了一些数据时，如果第一个事务再次进行</p><p>查询，就会发现多了一些原本不存在的记录，就好像发生了幻觉一样。(即，三类不可重复读中的第二种和第三种情况)。</p><p>例如：事务2 读取某个范围的数据，事务1 在这个范围插入了新的数据，事务2 再次读取这个范围的数据发现相比于第一次读取的结果多了新的数据。</p><p>​ <img src="'+r+`" alt="image-20230426074103164" loading="lazy"></p><h3 id="不可重复读和幻读的区别" tabindex="-1"><a class="header-anchor" href="#不可重复读和幻读的区别" aria-hidden="true">#</a> 不可重复读和幻读的区别</h3><ul><li>不可重复读的重点是内容修改或者记录减少，比如多次读取一条记录发现其中某些记录的值被修改；</li><li>幻读的重点在于数据的新增，比如多次执行同一条查询语句（DQL）时，发现查到的记录增加了。</li></ul><h3 id="解决幻读的方法" tabindex="-1"><a class="header-anchor" href="#解决幻读的方法" aria-hidden="true">#</a> 解决幻读的方法</h3><p>解决幻读的方式有很多，但其核心思想是：<strong>一个事务在操作某张表数据的时候，另外一个事务不允许新增或者删除这张表中的数据</strong>。</p><p>解决幻读的方式主要有以下几种：</p><ol><li><p>将事务隔离级别调整为 <code>SERIALIZABLE</code> 。</p></li><li><p>在可重复读的事务级别下，给事务操作的这张表添加表锁。</p></li><li><p>在可重复读的事务级别下，给事务操作的这张表添加 Next-key Lock（Record Lock+Gap Lock，即，行锁+间隙锁）。</p></li></ol><h2 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h2><p>​ 为了解决并发事务所引发的问题，在数据库中引入了事务隔离级别。</p><p>​ 主要有以下几种（从低到高，√是该隔离级别下会出现的问题）：</p><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th style="text-align:left;">幻读</th></tr></thead><tbody><tr><td>Read uncommitted   </td><td>√   </td><td>√   </td><td style="text-align:left;">√    </td></tr><tr><td>Read committed</td><td>×</td><td>√</td><td style="text-align:left;">√</td></tr><tr><td>Repeatable Read(默认)</td><td>×</td><td>×</td><td style="text-align:left;">√</td></tr><tr><td>Serializable</td><td>×</td><td>×</td><td style="text-align:left;">×</td></tr></tbody></table><p>READ-UNCOMMITTED(读取未提交)：最低的隔离级别，<strong>允许读取尚未提交的数据</strong>，可能会导致脏读、幻读、不可重复读</p><p>READ-COMMITTED(读取已提交)：<strong>允许读取并发事务已经提交的数据</strong>，可以阻止脏读，但可能发生幻读或不可重复读。</p><p>REPEATABLE-READ(可重复读)：<strong>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，</strong> 可以阻止脏读和不可重复读，但幻读仍有可能发生。</p><p>SERIALIZABLE(可串行化)：最高的隔离级别，完全服从 ACID 的隔离级别。<strong>所有的事务依次逐个执行</strong>，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</p><p><strong>隔离级别的实现：</strong></p><p>  Read committed：写操作时加X锁，事务结束释放，读操作时加S锁，读取完成释放。</p><p>  Repeatable Read：写操作时加X锁，事务结束释放；读操作时加S锁，事务结束释放。</p><p>  解决幻读：写操作时加X锁，事务结束释放；读操作时加临键锁，事务结束释放。</p><p><strong>查看事务隔离级别</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> @<span class="token variable">@transaction_isolation</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>设置事务隔离级别</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">set</span> <span class="token punctuation">[</span> <span class="token keyword">session</span> <span class="token operator">|</span> <span class="token keyword">global</span> <span class="token punctuation">]</span> <span class="token keyword">transaction</span> <span class="token keyword">isolation</span> <span class="token keyword">level</span> { <span class="token keyword">read</span> <span class="token keyword">uncommitted</span> <span class="token operator">|</span>

<span class="token keyword">read</span> <span class="token keyword">committed</span> <span class="token operator">|</span> <span class="token keyword">repeatable</span> <span class="token keyword">read</span> <span class="token operator">|</span> <span class="token keyword">serializable</span> }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：<strong>事务隔离级别越高，数据越安全，但是性能越低。</strong></p><p>​ MySQL InnoDB 存储引擎的默认的隔离级别是 <strong>REPEATABLE-READ(可重读)。</strong></p><h2 id="事务原理" tabindex="-1"><a class="header-anchor" href="#事务原理" aria-hidden="true">#</a> 事务原理</h2><p>事务的原子性、一致性和持久性是由InnoDB中的两份日志来保证的，一份是undo log日志，一份是redo log日志。</p><p>而<strong>隔离性是通过数据库的锁，加上MVCC来保证的</strong>。</p><h3 id="redo-log" tabindex="-1"><a class="header-anchor" href="#redo-log" aria-hidden="true">#</a> redo log</h3><p><strong>重做日志，记录的是事务提交时数据页的物理修改，用来实现事务的持久性。</strong></p><p>该日志文件由两部分组成：重做日志缓冲(redo log buffer) 以及重做日志文件(redo log file)，前者是在内存中，后者在磁盘中。</p><p>当事务提交之后会把所有修改信息都存到该日志文件中, <strong>用于在刷新脏页到磁盘时，如果发生错误, 进行数据恢复使用。</strong></p><p>有了redo log之后，当对缓冲区的数据进行增删改之后，会首先将操作的数据页的变化，记录在redo log buffer中。</p><p>在事务提交时(默认策略），会将redo log buffer中的数据刷新到redo log磁盘文件中。</p><p>过一段时间之后，如果刷新缓冲区的脏页到磁盘时，发生错误，此时就可以借助于redo log进行数据恢复，这样就保证了事务的持久性。</p><p><strong>如果脏页成功刷新到磁盘或者涉及到的数据已经落盘，此时redolog就没有作用可以删除了，所以存在的两个redolog文件是循环写的。</strong></p><h3 id="undo-log" tabindex="-1"><a class="header-anchor" href="#undo-log" aria-hidden="true">#</a> undo log</h3><p>回滚日志，用于记录数据被修改前的信息 , 作用包含两个：提供回滚(保证事务的原子性) 和 MVCC(多版本并发控制) 。</p><p>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undo log中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。</p><p><strong>当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</strong></p><p>Undo log销毁：undo log在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC。</p><p>Undo log存储：<strong>undo log采用段的方式进行管理和记录，存放在 rollback segment回滚段中，内部包含1024个undo log segment。</strong></p><h2 id="并发事务的控制方式" tabindex="-1"><a class="header-anchor" href="#并发事务的控制方式" aria-hidden="true">#</a> 并发事务的控制方式</h2><p>MySQL 中并发事务的控制方式有两种：<strong>锁</strong> 和 <strong>MVCC</strong>。</p><h3 id="锁" tabindex="-1"><a class="header-anchor" href="#锁" aria-hidden="true">#</a> 锁</h3><p>锁可以看作是悲观控制的模式，多版本并发控制(MVCC，Multiversion concurrency control)可以看作是乐观控制的模式。</p><p>锁控制方式下会通过锁来显示控制共享资源而不是通过调度手段，MySQL 中主要是通过 <strong>读写锁</strong> 来实现并发控制。</p><ul><li><p><strong>共享锁(S 锁)：</strong> 又称读锁，事务在读取记录的时候获取共享锁，允许多个事务同时获取（锁兼容）。</p></li><li><p><strong>排他锁(X 锁)：</strong> 又称写锁/独占锁，事务在修改记录的时候获取排他锁，不允许多个事务同时获取。</p><p>​ <strong>如果一个记录已经被加了排他锁，那么其他事务不能再对这条记录加任何类型的锁（锁不兼容）。</strong></p><p>读写锁可以做到读读并行，但是无法做到写读、写写并行。</p><p>另外，根据根据锁粒度的不同，又被分为 表级锁(table-level locking) 和行级锁(row-level locking) 。</p><p>InnoDB 不仅支持表级锁，还支持行级锁，默认为行级锁。</p><p>行级锁的粒度更小，仅对相关的记录上锁即可（对一行或者多行记录加锁），所以对于并发写入操作来说， InnoDB 的性能更高。</p><p><strong>不论是表级锁还是行级锁，都存在共享锁（Share Lock，S 锁）和排他锁（Exclusive Lock，X 锁）这两类。</strong></p></li></ul><h3 id="mvcc" tabindex="-1"><a class="header-anchor" href="#mvcc" aria-hidden="true">#</a> MVCC</h3><p>MVCC是多版本并发控制方法，对一份数据会存储多个版本，通过事务的可见性来保证事务能看到自己应该看到的版本。</p><p>通常会有一个全局的版本分配器来为每一行数据设置版本号，版本号是唯一的。</p><p>MVCC 在 MySQL 中实现所依赖的手段主要是: <strong>隐藏字段、read view、undo log</strong>。</p><ul><li>undo log : undo log 用于记录某行数据的多个版本的数据。</li><li>read view 和 隐藏字段 : 用来判断当前版本数据的可见性。</li></ul><h2 id="mvcc-1" tabindex="-1"><a class="header-anchor" href="#mvcc-1" aria-hidden="true">#</a> MVCC</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p>全称 Multi-Version Concurrency Control，多版本并发控制，是乐观锁的一种实现。</p><p><strong>作用：维护一个数据的多个版本，使得读写操作没有冲突，主要是为了提高数据库的并发性能。</strong></p><p>为了当查询一些正在被另一个事务更新的行时，可以看到它们被更新之前的值，这样在做查询的时候就不用等待另一个事务释放锁了。</p><p>同一行数据平时发生读写请求时，一般会上锁阻塞住，</p><p>但<strong>MVCC用更好的方式去处理读—写请求，做到了在发生读—写请求冲突时不用加锁。</strong></p><p>这个读是指的快照读，而不是当前读，当前读是一种加锁操作，是悲观锁。</p><h3 id="当前读" tabindex="-1"><a class="header-anchor" href="#当前读" aria-hidden="true">#</a> 当前读</h3><p>当前读读取的是记录的最新版本(最新数据，而不是历史版本的数据)，读取时还要保证其他并发事务不能修改当前记录，</p><p><strong>会对读取的记录进行加锁，是悲观锁的一种操作。</strong></p><p>如下操作都是当前读：</p><ul><li><p>select ... lock in share mode (加了共享锁的select语句)</p></li><li><p>select for update (加了排他锁的select语句)</p></li><li><p>update... (update语句默认加排他锁)</p></li><li><p>insert... (insert语句默认加排他锁)</p></li><li><p>delete... (delete语句默认加排他锁)</p></li><li><p>串行化事务隔离级别</p></li></ul><h3 id="快照读" tabindex="-1"><a class="header-anchor" href="#快照读" aria-hidden="true">#</a> 快照读</h3><p>快照读的实现是基于多版本并发控制，即MVCC，它在很多情况下，避免了加锁操作，降低了开销。</p><p><strong>既然是多版本，那么快照读读到的数据不一定是当前最新的数据，有可能是之前历史版本的数据。</strong></p><p>快照读又叫一致性读，读取的是快照数据。<strong>不加锁的简单的 SELECT语句就属于快照读。</strong></p><p><strong>快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读。</strong></p><h3 id="数据库并发场景" tabindex="-1"><a class="header-anchor" href="#数据库并发场景" aria-hidden="true">#</a> 数据库并发场景</h3><ul><li><p>读--读：不存在任何问题，也不需要并发控制。</p></li><li><p>读--写：有线程安全问题，可能会造成事务隔离性问题，可能遇到脏读，幻读，不可重复读。</p></li><li><p>写--写：有线程安全问题，可能会存在更新丢失问题，比如第一类更新丢失，第二类更新丢失。</p></li></ul><h3 id="mvcc解决的问题" tabindex="-1"><a class="header-anchor" href="#mvcc解决的问题" aria-hidden="true">#</a> MVCC解决的问题</h3><p>MVCC用来解决读—写冲突的无锁并发控制，<strong>为事务分配单向增长的时间戳，为每个数据修改保存一个版本，版本与事务时间戳相关联。</strong></p><p><strong>读操作只读取该事务开始前的数据库快照。</strong></p><p><strong>解决问题如下：</strong></p><ul><li>并发读-写时：可以做到读操作不阻塞写操作，同时写操作也不会阻塞读操作。</li><li>解决 脏读、幻读、不可重复读等事务隔离问题，但不能解决上面的 写-写 更新丢失 问题。</li></ul><p><strong>因此有了下面提高并发性能的组合拳：</strong></p><ul><li><p><code>MVCC + 悲观锁</code>：MVCC解决读写冲突，悲观锁解决写写冲突</p></li><li><p><code>MVCC + 乐观锁</code>：MVCC解决读写冲突，乐观锁解决写写冲突</p></li></ul><h3 id="mvcc的实现原理" tabindex="-1"><a class="header-anchor" href="#mvcc的实现原理" aria-hidden="true">#</a> MVCC的实现原理</h3><p>它的实现依赖于版本链、undo log日志、Read View。</p><p><strong>版本链</strong></p><p>数据库中的每行数据，除了可见的数据外，还有三个隐藏的字段：</p><table><thead><tr><th>隐藏字段</th><th>含义</th></tr></thead><tbody><tr><td>DB_TRX_ID</td><td>最近修改事务ID，保存插入这条记录或最后一次修改这条记录的事务的ID</td></tr><tr><td>DB_ROLL_POINTER</td><td>回滚指针，指向这条记录的上一个版本，上一个版本的内容记录在undo log中</td></tr><tr><td>DB_ROW_ID</td><td>隐藏主键，如果表结构没有指定主键，将会生成该隐藏字段</td></tr></tbody></table><p>TRX_ID：6bytes，记录创建/最后一次修改 这条记录的事务ID。</p><p>ROLL_POINTER：7bytes，回滚指针，指向这条记录的上一个版本。</p><p>    <strong>每次对某条记录进行改动时，都会把旧的内容保存到 undo日志中，通过这个指针，可以找到该记录被修改前的信息</strong>。</p><p>ROW_ID：6bytes，隐含的自增id，如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引。</p><p>每次对数据库记录进行改动，都会记录一条undo日志，<strong>每条undo日志也都有一个roll_pointer属性</strong>(insert操作对应的undo日志没有该属性，因为该记录并没有更早的版本)，</p><p>可以将这些undo日志都连起来，串成一个链表，所以现在的情况就像下图一样：</p><p>​ <img src="`+i+'" alt="image-20230426074344035" loading="lazy"></p><p>对该记录每次更新后，都会将旧值放到一条undo日志中，算是该记录的一个旧版本，随着更新次数的增多，所有的版本</p><p>都会被roll_pointer属性连接成一个链表，这个链表称之为版本链，版本链的头节点就是当前记录最新的值。</p><p>​ 另外，<strong>每个版本中还包含生成该版本时对应的事务id，这个信息在根据ReadView判断版本可见性的时候会用到</strong>。</p><h3 id="undo-log-1" tabindex="-1"><a class="header-anchor" href="#undo-log-1" aria-hidden="true">#</a> undo log</h3><p><strong>简介</strong></p><p>Undo log 主要用于记录数据被修改之前的日志，在表信息修改之前先会把数据拷贝到undo log里。</p><p>当事务进行回滚时可以通过undo log 里的日志进行数据还原。</p><p><strong>作用</strong></p><p>1.保证事务进行rollback时的原子性和一致性，当事务进行回滚的时候可以用undo log的数据进行恢复。</p><p>2.用于MVCC快照读的数据，在MVCC多版本控制中，通过读取undo log的历史版本数据可以实现不同事务版本号都拥有自己独立的快照数据版本。</p><p><strong>种类</strong></p><p>当进行insert操作的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。</p><p>而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会被立即删除，只有在快照读或事务回滚不涉及该日志时，对应的日志才会被purge线程统一清除。</p><h3 id="readview-读视图" tabindex="-1"><a class="header-anchor" href="#readview-读视图" aria-hidden="true">#</a> ReadView(读视图)</h3><p><strong>简介</strong></p><p><strong>事务进行快照读操作的时候产生的读视图</strong>，在该事务执行快照读的那一刻，会生成数据库系统当前的一个快照。</p><p>ReadView 是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务（未提交的）id。</p><p><strong>Read View主要是用来做可见性判断的, 即当某个事务执行快照读的时候，对该记录创建一个Read View读视图，</strong></p><p><strong>把它当做条件用来判断当前事务能够看到哪个版本的数据，既可能是当前最新的数据，也有可能是该行记录的undo log里面的某个版本的数据。</strong></p><p><strong>属性</strong></p><p>ReadView中包含了四个核心字段：</p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>trx_ids</td><td>当前活跃的(未提交)事务ID集合</td></tr><tr><td>up_limit_id</td><td>最小活跃事务ID</td></tr><tr><td>low_limit_id</td><td>预分配事务ID，当前最大事务ID+1（因为事务ID是自增的）</td></tr><tr><td>creator_trx_id</td><td>创建当前read view的事务ID</td></tr></tbody></table><p><strong>Read View可见性判断条件</strong></p><ul><li><p><code>db_trx_id</code> &lt; <code>up_limit_id</code> || <code>db_trx_id</code> == <code>creator_trx_id</code>（显示）</p><p>如果旧版本数据中的事务ID小于读视图中的最小活跃事务ID，说明该数据是在当前事务开启之前就已经存在了，所以可以显示。</p><p>或者旧版本事务ID等于<code>creator_trx_id</code> ，说明这个数据就是当前事务自己生成的，这种情况下此数据也可以显示。</p></li><li><p><code>db_trx_id</code> &gt;= <code>low_limit_id</code>（不显示）</p><p>如果旧版本的事务ID大于read view 中的当前系统的最大事务ID，则说明该数据是在当前read view 创建之后才产生的，所以数据不显示。</p><p>如果小于则进入下一个判断。</p></li><li><p><code>db_trx_id</code>是否在 活跃事务（trx_ids）中</p><ul><li><code>不存在</code>：则说明read view产生的时候事务已经commit了，这种情况下数据可以显示。</li><li><code>存在</code>：则代表Read View生成时刻，这个事务还在活跃，还没有Commit，则这个事务修改的数据，当前事务是看不见的。</li></ul></li></ul><p><strong>MVCC和事务隔离级别</strong></p><p>Read View 用于RC（Read Committed，读提交）和RR（Repeatable Read，可重复读）隔离级别的实现。</p><p>不同的隔离级别，生成ReadView的时机不同：</p><p>  READ COMMITTED ：在事务中每一次执行快照读时都会生成并获取最新的ReadView。</p><p>  REPEATABLE READ：仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView，所以一个事务的查询结果</p><p>                                      每次都是一样的。</p><h3 id="rc和rr级别下快照读区别" tabindex="-1"><a class="header-anchor" href="#rc和rr级别下快照读区别" aria-hidden="true">#</a> RC和RR级别下快照读区别</h3><ul><li><p><strong>在RC级别下的事务中，每次快照读都会新生成一个快照和Read View，所以在RC级别的事务中可以看到别的事务提交的更新。</strong></p></li><li><p>在RR级别下的事务对某条记录的第一次快照读会创建一个快照及Read View， 将当前系统活跃的其他事务记录起来，</p><p>此后再调用快照读的时候，使用的是同一个Read View，所以只要当前事务在其他事务提交更新之前使用过快照读，</p><p>那么之后的快照读使用的都是同一个Read View，所以对其他事务之后的修改不可见；</p></li><li><p>即，RR级别下，快照读生成Read View时，Read View会记录此时所有其他活动事务的ID，这些事务的修改对于</p><p>当前事务都是不可见的，而早于Read View创建的事务所做的修改均是可见。</p></li></ul><h3 id="解决幻读问题" tabindex="-1"><a class="header-anchor" href="#解决幻读问题" aria-hidden="true">#</a> 解决幻读问题</h3><ul><li>快照读：通过MVCC来进行控制的，不用加锁。按照MVCC中规定的“语法”进行增删改查等操作，以避免幻读。</li><li>当前读：通过next-key锁（行锁+gap锁）来解决问题的。</li></ul>',192);function u(g,h){return a(),n("div",null,[s(" permalink: /MySQL/原理/事务/  "),c])}const b=e(l,[["render",u],["__file","20.事务.html.vue"]]);export{b as default};
